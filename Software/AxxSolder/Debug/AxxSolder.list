
AxxSolder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010270  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003628  08010450  08010450  00020450  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013a78  08013a78  00030280  2**0
                  CONTENTS
  4 .ARM          00000008  08013a78  08013a78  00023a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013a80  08013a80  00030280  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013a80  08013a80  00023a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013a84  08013a84  00023a84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000280  20000000  08013a88  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001934  20000280  08013d08  00030280  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001bb4  08013d08  00031bb4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030280  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000302b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000223c9  00000000  00000000  000302f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004b22  00000000  00000000  000526bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f68  00000000  00000000  000571e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001823  00000000  00000000  00059148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024bb8  00000000  00000000  0005a96b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00027a2b  00000000  00000000  0007f523  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e627e  00000000  00000000  000a6f4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009a48  00000000  00000000  0018d1cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000090  00000000  00000000  00196c14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000280 	.word	0x20000280
 80001fc:	00000000 	.word	0x00000000
 8000200:	08010438 	.word	0x08010438

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000284 	.word	0x20000284
 800021c:	08010438 	.word	0x08010438

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b970 	b.w	8000fd0 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f806 	bl	8000d08 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__udivmoddi4>:
 8000d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d0c:	9e08      	ldr	r6, [sp, #32]
 8000d0e:	460d      	mov	r5, r1
 8000d10:	4604      	mov	r4, r0
 8000d12:	460f      	mov	r7, r1
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d14a      	bne.n	8000dae <__udivmoddi4+0xa6>
 8000d18:	428a      	cmp	r2, r1
 8000d1a:	4694      	mov	ip, r2
 8000d1c:	d965      	bls.n	8000dea <__udivmoddi4+0xe2>
 8000d1e:	fab2 f382 	clz	r3, r2
 8000d22:	b143      	cbz	r3, 8000d36 <__udivmoddi4+0x2e>
 8000d24:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d28:	f1c3 0220 	rsb	r2, r3, #32
 8000d2c:	409f      	lsls	r7, r3
 8000d2e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d32:	4317      	orrs	r7, r2
 8000d34:	409c      	lsls	r4, r3
 8000d36:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d3a:	fa1f f58c 	uxth.w	r5, ip
 8000d3e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d42:	0c22      	lsrs	r2, r4, #16
 8000d44:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d48:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d4c:	fb01 f005 	mul.w	r0, r1, r5
 8000d50:	4290      	cmp	r0, r2
 8000d52:	d90a      	bls.n	8000d6a <__udivmoddi4+0x62>
 8000d54:	eb1c 0202 	adds.w	r2, ip, r2
 8000d58:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d5c:	f080 811c 	bcs.w	8000f98 <__udivmoddi4+0x290>
 8000d60:	4290      	cmp	r0, r2
 8000d62:	f240 8119 	bls.w	8000f98 <__udivmoddi4+0x290>
 8000d66:	3902      	subs	r1, #2
 8000d68:	4462      	add	r2, ip
 8000d6a:	1a12      	subs	r2, r2, r0
 8000d6c:	b2a4      	uxth	r4, r4
 8000d6e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d72:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d76:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d7a:	fb00 f505 	mul.w	r5, r0, r5
 8000d7e:	42a5      	cmp	r5, r4
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x90>
 8000d82:	eb1c 0404 	adds.w	r4, ip, r4
 8000d86:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d8a:	f080 8107 	bcs.w	8000f9c <__udivmoddi4+0x294>
 8000d8e:	42a5      	cmp	r5, r4
 8000d90:	f240 8104 	bls.w	8000f9c <__udivmoddi4+0x294>
 8000d94:	4464      	add	r4, ip
 8000d96:	3802      	subs	r0, #2
 8000d98:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d9c:	1b64      	subs	r4, r4, r5
 8000d9e:	2100      	movs	r1, #0
 8000da0:	b11e      	cbz	r6, 8000daa <__udivmoddi4+0xa2>
 8000da2:	40dc      	lsrs	r4, r3
 8000da4:	2300      	movs	r3, #0
 8000da6:	e9c6 4300 	strd	r4, r3, [r6]
 8000daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0xbc>
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	f000 80ed 	beq.w	8000f92 <__udivmoddi4+0x28a>
 8000db8:	2100      	movs	r1, #0
 8000dba:	e9c6 0500 	strd	r0, r5, [r6]
 8000dbe:	4608      	mov	r0, r1
 8000dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc4:	fab3 f183 	clz	r1, r3
 8000dc8:	2900      	cmp	r1, #0
 8000dca:	d149      	bne.n	8000e60 <__udivmoddi4+0x158>
 8000dcc:	42ab      	cmp	r3, r5
 8000dce:	d302      	bcc.n	8000dd6 <__udivmoddi4+0xce>
 8000dd0:	4282      	cmp	r2, r0
 8000dd2:	f200 80f8 	bhi.w	8000fc6 <__udivmoddi4+0x2be>
 8000dd6:	1a84      	subs	r4, r0, r2
 8000dd8:	eb65 0203 	sbc.w	r2, r5, r3
 8000ddc:	2001      	movs	r0, #1
 8000dde:	4617      	mov	r7, r2
 8000de0:	2e00      	cmp	r6, #0
 8000de2:	d0e2      	beq.n	8000daa <__udivmoddi4+0xa2>
 8000de4:	e9c6 4700 	strd	r4, r7, [r6]
 8000de8:	e7df      	b.n	8000daa <__udivmoddi4+0xa2>
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xe6>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f382 	clz	r3, r2
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	f040 8090 	bne.w	8000f18 <__udivmoddi4+0x210>
 8000df8:	1a8a      	subs	r2, r1, r2
 8000dfa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dfe:	fa1f fe8c 	uxth.w	lr, ip
 8000e02:	2101      	movs	r1, #1
 8000e04:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e08:	fb07 2015 	mls	r0, r7, r5, r2
 8000e0c:	0c22      	lsrs	r2, r4, #16
 8000e0e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e12:	fb0e f005 	mul.w	r0, lr, r5
 8000e16:	4290      	cmp	r0, r2
 8000e18:	d908      	bls.n	8000e2c <__udivmoddi4+0x124>
 8000e1a:	eb1c 0202 	adds.w	r2, ip, r2
 8000e1e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e22:	d202      	bcs.n	8000e2a <__udivmoddi4+0x122>
 8000e24:	4290      	cmp	r0, r2
 8000e26:	f200 80cb 	bhi.w	8000fc0 <__udivmoddi4+0x2b8>
 8000e2a:	4645      	mov	r5, r8
 8000e2c:	1a12      	subs	r2, r2, r0
 8000e2e:	b2a4      	uxth	r4, r4
 8000e30:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e34:	fb07 2210 	mls	r2, r7, r0, r2
 8000e38:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e3c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e40:	45a6      	cmp	lr, r4
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x14e>
 8000e44:	eb1c 0404 	adds.w	r4, ip, r4
 8000e48:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e4c:	d202      	bcs.n	8000e54 <__udivmoddi4+0x14c>
 8000e4e:	45a6      	cmp	lr, r4
 8000e50:	f200 80bb 	bhi.w	8000fca <__udivmoddi4+0x2c2>
 8000e54:	4610      	mov	r0, r2
 8000e56:	eba4 040e 	sub.w	r4, r4, lr
 8000e5a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e5e:	e79f      	b.n	8000da0 <__udivmoddi4+0x98>
 8000e60:	f1c1 0720 	rsb	r7, r1, #32
 8000e64:	408b      	lsls	r3, r1
 8000e66:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e6a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e6e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e72:	fa20 f307 	lsr.w	r3, r0, r7
 8000e76:	40fd      	lsrs	r5, r7
 8000e78:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e7c:	4323      	orrs	r3, r4
 8000e7e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e82:	fa1f fe8c 	uxth.w	lr, ip
 8000e86:	fb09 5518 	mls	r5, r9, r8, r5
 8000e8a:	0c1c      	lsrs	r4, r3, #16
 8000e8c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e90:	fb08 f50e 	mul.w	r5, r8, lr
 8000e94:	42a5      	cmp	r5, r4
 8000e96:	fa02 f201 	lsl.w	r2, r2, r1
 8000e9a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e9e:	d90b      	bls.n	8000eb8 <__udivmoddi4+0x1b0>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ea8:	f080 8088 	bcs.w	8000fbc <__udivmoddi4+0x2b4>
 8000eac:	42a5      	cmp	r5, r4
 8000eae:	f240 8085 	bls.w	8000fbc <__udivmoddi4+0x2b4>
 8000eb2:	f1a8 0802 	sub.w	r8, r8, #2
 8000eb6:	4464      	add	r4, ip
 8000eb8:	1b64      	subs	r4, r4, r5
 8000eba:	b29d      	uxth	r5, r3
 8000ebc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ec0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ec4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ec8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ecc:	45a6      	cmp	lr, r4
 8000ece:	d908      	bls.n	8000ee2 <__udivmoddi4+0x1da>
 8000ed0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ed8:	d26c      	bcs.n	8000fb4 <__udivmoddi4+0x2ac>
 8000eda:	45a6      	cmp	lr, r4
 8000edc:	d96a      	bls.n	8000fb4 <__udivmoddi4+0x2ac>
 8000ede:	3b02      	subs	r3, #2
 8000ee0:	4464      	add	r4, ip
 8000ee2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ee6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eea:	eba4 040e 	sub.w	r4, r4, lr
 8000eee:	42ac      	cmp	r4, r5
 8000ef0:	46c8      	mov	r8, r9
 8000ef2:	46ae      	mov	lr, r5
 8000ef4:	d356      	bcc.n	8000fa4 <__udivmoddi4+0x29c>
 8000ef6:	d053      	beq.n	8000fa0 <__udivmoddi4+0x298>
 8000ef8:	b156      	cbz	r6, 8000f10 <__udivmoddi4+0x208>
 8000efa:	ebb0 0208 	subs.w	r2, r0, r8
 8000efe:	eb64 040e 	sbc.w	r4, r4, lr
 8000f02:	fa04 f707 	lsl.w	r7, r4, r7
 8000f06:	40ca      	lsrs	r2, r1
 8000f08:	40cc      	lsrs	r4, r1
 8000f0a:	4317      	orrs	r7, r2
 8000f0c:	e9c6 7400 	strd	r7, r4, [r6]
 8000f10:	4618      	mov	r0, r3
 8000f12:	2100      	movs	r1, #0
 8000f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f18:	f1c3 0120 	rsb	r1, r3, #32
 8000f1c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f20:	fa20 f201 	lsr.w	r2, r0, r1
 8000f24:	fa25 f101 	lsr.w	r1, r5, r1
 8000f28:	409d      	lsls	r5, r3
 8000f2a:	432a      	orrs	r2, r5
 8000f2c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f30:	fa1f fe8c 	uxth.w	lr, ip
 8000f34:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f38:	fb07 1510 	mls	r5, r7, r0, r1
 8000f3c:	0c11      	lsrs	r1, r2, #16
 8000f3e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f42:	fb00 f50e 	mul.w	r5, r0, lr
 8000f46:	428d      	cmp	r5, r1
 8000f48:	fa04 f403 	lsl.w	r4, r4, r3
 8000f4c:	d908      	bls.n	8000f60 <__udivmoddi4+0x258>
 8000f4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f52:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f56:	d22f      	bcs.n	8000fb8 <__udivmoddi4+0x2b0>
 8000f58:	428d      	cmp	r5, r1
 8000f5a:	d92d      	bls.n	8000fb8 <__udivmoddi4+0x2b0>
 8000f5c:	3802      	subs	r0, #2
 8000f5e:	4461      	add	r1, ip
 8000f60:	1b49      	subs	r1, r1, r5
 8000f62:	b292      	uxth	r2, r2
 8000f64:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f68:	fb07 1115 	mls	r1, r7, r5, r1
 8000f6c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f70:	fb05 f10e 	mul.w	r1, r5, lr
 8000f74:	4291      	cmp	r1, r2
 8000f76:	d908      	bls.n	8000f8a <__udivmoddi4+0x282>
 8000f78:	eb1c 0202 	adds.w	r2, ip, r2
 8000f7c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f80:	d216      	bcs.n	8000fb0 <__udivmoddi4+0x2a8>
 8000f82:	4291      	cmp	r1, r2
 8000f84:	d914      	bls.n	8000fb0 <__udivmoddi4+0x2a8>
 8000f86:	3d02      	subs	r5, #2
 8000f88:	4462      	add	r2, ip
 8000f8a:	1a52      	subs	r2, r2, r1
 8000f8c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f90:	e738      	b.n	8000e04 <__udivmoddi4+0xfc>
 8000f92:	4631      	mov	r1, r6
 8000f94:	4630      	mov	r0, r6
 8000f96:	e708      	b.n	8000daa <__udivmoddi4+0xa2>
 8000f98:	4639      	mov	r1, r7
 8000f9a:	e6e6      	b.n	8000d6a <__udivmoddi4+0x62>
 8000f9c:	4610      	mov	r0, r2
 8000f9e:	e6fb      	b.n	8000d98 <__udivmoddi4+0x90>
 8000fa0:	4548      	cmp	r0, r9
 8000fa2:	d2a9      	bcs.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fa4:	ebb9 0802 	subs.w	r8, r9, r2
 8000fa8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fac:	3b01      	subs	r3, #1
 8000fae:	e7a3      	b.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fb0:	4645      	mov	r5, r8
 8000fb2:	e7ea      	b.n	8000f8a <__udivmoddi4+0x282>
 8000fb4:	462b      	mov	r3, r5
 8000fb6:	e794      	b.n	8000ee2 <__udivmoddi4+0x1da>
 8000fb8:	4640      	mov	r0, r8
 8000fba:	e7d1      	b.n	8000f60 <__udivmoddi4+0x258>
 8000fbc:	46d0      	mov	r8, sl
 8000fbe:	e77b      	b.n	8000eb8 <__udivmoddi4+0x1b0>
 8000fc0:	3d02      	subs	r5, #2
 8000fc2:	4462      	add	r2, ip
 8000fc4:	e732      	b.n	8000e2c <__udivmoddi4+0x124>
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	e70a      	b.n	8000de0 <__udivmoddi4+0xd8>
 8000fca:	4464      	add	r4, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e742      	b.n	8000e56 <__udivmoddi4+0x14e>

08000fd0 <__aeabi_idiv0>:
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop

08000fd4 <GetPage>:
#include "stdlib.h"
#include "stm32g4xx_hal.h"


uint32_t GetPage(uint32_t Addr)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  return (Addr - FLASH_BASE) / FLASH_PAGE_SIZE;;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8000fe2:	0adb      	lsrs	r3, r3, #11
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <Flash_Read_Data>:

void Flash_Read_Data(uint32_t StartPageAddress, uint32_t *RxBuf, uint16_t numberofwords)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	80fb      	strh	r3, [r7, #6]
	while (1)
	{
		*RxBuf = *(__IO uint32_t *)StartPageAddress;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	601a      	str	r2, [r3, #0]
		StartPageAddress += 8;//4
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	3308      	adds	r3, #8
 800100a:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	3304      	adds	r3, #4
 8001010:	60bb      	str	r3, [r7, #8]
		if (!(numberofwords--))
 8001012:	88fb      	ldrh	r3, [r7, #6]
 8001014:	1e5a      	subs	r2, r3, #1
 8001016:	80fa      	strh	r2, [r7, #6]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d000      	beq.n	800101e <Flash_Read_Data+0x2e>
		*RxBuf = *(__IO uint32_t *)StartPageAddress;
 800101c:	e7ef      	b.n	8000ffe <Flash_Read_Data+0xe>
			break;
 800101e:	bf00      	nop
	}
}
 8001020:	bf00      	nop
 8001022:	3714      	adds	r7, #20
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <Flash_Write_Data>:

uint32_t Flash_Write_Data (uint32_t StartPageAddress, uint32_t *Data, uint16_t numberofwords)
{
 800102c:	b5b0      	push	{r4, r5, r7, lr}
 800102e:	b08a      	sub	sp, #40	; 0x28
 8001030:	af00      	add	r7, sp, #0
 8001032:	60f8      	str	r0, [r7, #12]
 8001034:	60b9      	str	r1, [r7, #8]
 8001036:	4613      	mov	r3, r2
 8001038:	80fb      	strh	r3, [r7, #6]
	static FLASH_EraseInitTypeDef EraseInitStruct;

		uint32_t PageError;
	int sofar=0;
 800103a:	2300      	movs	r3, #0
 800103c:	627b      	str	r3, [r7, #36]	; 0x24

	  /* Unlock the Flash to enable the flash control register access *************/
	   HAL_FLASH_Unlock();
 800103e:	f005 fca9 	bl	8006994 <HAL_FLASH_Unlock>

	   /* Erase the user Flash area*/

	   uint32_t StartPage = GetPage(StartPageAddress);
 8001042:	68f8      	ldr	r0, [r7, #12]
 8001044:	f7ff ffc6 	bl	8000fd4 <GetPage>
 8001048:	6238      	str	r0, [r7, #32]
	  uint32_t EndPageAdress = StartPageAddress + numberofwords*4;
 800104a:	88fb      	ldrh	r3, [r7, #6]
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	461a      	mov	r2, r3
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	4413      	add	r3, r2
 8001054:	61fb      	str	r3, [r7, #28]
	  uint32_t EndPage = GetPage(EndPageAdress);
 8001056:	69f8      	ldr	r0, [r7, #28]
 8001058:	f7ff ffbc 	bl	8000fd4 <GetPage>
 800105c:	61b8      	str	r0, [r7, #24]

		 /* Clear OPTVERR bit set on virgin samples */
		  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800105e:	4b22      	ldr	r3, [pc, #136]	; (80010e8 <Flash_Write_Data+0xbc>)
 8001060:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001064:	611a      	str	r2, [r3, #16]

	   /* Fill EraseInit structure*/
		EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 8001066:	4b21      	ldr	r3, [pc, #132]	; (80010ec <Flash_Write_Data+0xc0>)
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
		EraseInitStruct.Page        = StartPage;
 800106c:	4a1f      	ldr	r2, [pc, #124]	; (80010ec <Flash_Write_Data+0xc0>)
 800106e:	6a3b      	ldr	r3, [r7, #32]
 8001070:	6093      	str	r3, [r2, #8]
		EraseInitStruct.NbPages     = ((EndPage - StartPage)/FLASH_PAGE_SIZE) +1;
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	6a3b      	ldr	r3, [r7, #32]
 8001076:	1ad3      	subs	r3, r2, r3
 8001078:	0adb      	lsrs	r3, r3, #11
 800107a:	3301      	adds	r3, #1
 800107c:	4a1b      	ldr	r2, [pc, #108]	; (80010ec <Flash_Write_Data+0xc0>)
 800107e:	60d3      	str	r3, [r2, #12]

	   if (HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) != HAL_OK)
 8001080:	f107 0314 	add.w	r3, r7, #20
 8001084:	4619      	mov	r1, r3
 8001086:	4819      	ldr	r0, [pc, #100]	; (80010ec <Flash_Write_Data+0xc0>)
 8001088:	f005 fd7c 	bl	8006b84 <HAL_FLASHEx_Erase>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d01f      	beq.n	80010d2 <Flash_Write_Data+0xa6>
	   {
	     /*Error occurred while page erase.*/
		  return HAL_FLASH_GetError();
 8001092:	f005 fcbb 	bl	8006a0c <HAL_FLASH_GetError>
 8001096:	4603      	mov	r3, r0
 8001098:	e022      	b.n	80010e0 <Flash_Write_Data+0xb4>

	   /* Program the user Flash area word by word*/

	   while (sofar<numberofwords)
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, StartPageAddress, Data[sofar]) == HAL_OK)
 800109a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	68ba      	ldr	r2, [r7, #8]
 80010a0:	4413      	add	r3, r2
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2200      	movs	r2, #0
 80010a6:	461c      	mov	r4, r3
 80010a8:	4615      	mov	r5, r2
 80010aa:	4622      	mov	r2, r4
 80010ac:	462b      	mov	r3, r5
 80010ae:	68f9      	ldr	r1, [r7, #12]
 80010b0:	2000      	movs	r0, #0
 80010b2:	f005 fc19 	bl	80068e8 <HAL_FLASH_Program>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d106      	bne.n	80010ca <Flash_Write_Data+0x9e>
	     {
	    	 StartPageAddress += 8;//8  // use StartPageAddress += 2 for half word and 8 for double word
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	3308      	adds	r3, #8
 80010c0:	60fb      	str	r3, [r7, #12]
	    	 sofar++;
 80010c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c4:	3301      	adds	r3, #1
 80010c6:	627b      	str	r3, [r7, #36]	; 0x24
 80010c8:	e003      	b.n	80010d2 <Flash_Write_Data+0xa6>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 80010ca:	f005 fc9f 	bl	8006a0c <HAL_FLASH_GetError>
 80010ce:	4603      	mov	r3, r0
 80010d0:	e006      	b.n	80010e0 <Flash_Write_Data+0xb4>
	   while (sofar<numberofwords)
 80010d2:	88fb      	ldrh	r3, [r7, #6]
 80010d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010d6:	429a      	cmp	r2, r3
 80010d8:	dbdf      	blt.n	800109a <Flash_Write_Data+0x6e>
	     }
	   }

	   /* Lock the Flash to disable the flash control register access (recommended
	      to protect the FLASH memory against possible unwanted operation) *********/
	   HAL_FLASH_Lock();
 80010da:	f005 fc7d 	bl	80069d8 <HAL_FLASH_Lock>

	   return 0;
 80010de:	2300      	movs	r3, #0
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3728      	adds	r7, #40	; 0x28
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bdb0      	pop	{r4, r5, r7, pc}
 80010e8:	40022000 	.word	0x40022000
 80010ec:	2000029c 	.word	0x2000029c

080010f0 <HAL_UART_TxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

PID_TypeDef TPID;

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle){
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
	/* Set transmission flag: transfer complete */
	tx_done = 1;
 80010f8:	4b04      	ldr	r3, [pc, #16]	; (800110c <HAL_UART_TxCpltCallback+0x1c>)
 80010fa:	2201      	movs	r2, #1
 80010fc:	701a      	strb	r2, [r3, #0]
}
 80010fe:	bf00      	nop
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	2000001d 	.word	0x2000001d

08001110 <get_mean_ADC_reading>:

/* Returns the average of 100 readings of the index+4*n value in the ADC_buffer vector */
float get_mean_ADC_reading(uint8_t index){
 8001110:	b480      	push	{r7}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	71fb      	strb	r3, [r7, #7]
	ADC_filter_mean = 0;
 800111a:	4b17      	ldr	r3, [pc, #92]	; (8001178 <get_mean_ADC_reading+0x68>)
 800111c:	f04f 0200 	mov.w	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
	for(int n=index;n<400;n=n+4){
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	60fb      	str	r3, [r7, #12]
 8001126:	e012      	b.n	800114e <get_mean_ADC_reading+0x3e>
		ADC_filter_mean += ADC_buffer[n];
 8001128:	4a14      	ldr	r2, [pc, #80]	; (800117c <get_mean_ADC_reading+0x6c>)
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001130:	ee07 3a90 	vmov	s15, r3
 8001134:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001138:	4b0f      	ldr	r3, [pc, #60]	; (8001178 <get_mean_ADC_reading+0x68>)
 800113a:	edd3 7a00 	vldr	s15, [r3]
 800113e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001142:	4b0d      	ldr	r3, [pc, #52]	; (8001178 <get_mean_ADC_reading+0x68>)
 8001144:	edc3 7a00 	vstr	s15, [r3]
	for(int n=index;n<400;n=n+4){
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	3304      	adds	r3, #4
 800114c:	60fb      	str	r3, [r7, #12]
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001154:	dbe8      	blt.n	8001128 <get_mean_ADC_reading+0x18>
	}
	return ADC_filter_mean/100.0;
 8001156:	4b08      	ldr	r3, [pc, #32]	; (8001178 <get_mean_ADC_reading+0x68>)
 8001158:	edd3 7a00 	vldr	s15, [r3]
 800115c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001180 <get_mean_ADC_reading+0x70>
 8001160:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001164:	eef0 7a66 	vmov.f32	s15, s13
}
 8001168:	eeb0 0a67 	vmov.f32	s0, s15
 800116c:	3714      	adds	r7, #20
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	2000033c 	.word	0x2000033c
 800117c:	20000340 	.word	0x20000340
 8001180:	42c80000 	.word	0x42c80000
 8001184:	00000000 	.word	0x00000000

08001188 <get_bus_voltage>:

void get_bus_voltage(){
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
	/* Index 3 is bus Voltage */
	sensor_values.bus_voltage = Moving_Average_Compute(get_mean_ADC_reading(3), &input_voltage_filterStruct)*VOLTAGE_COMPENSATION; /* Moving average filter */
 800118c:	2003      	movs	r0, #3
 800118e:	f7ff ffbf 	bl	8001110 <get_mean_ADC_reading>
 8001192:	eef0 7a40 	vmov.f32	s15, s0
 8001196:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800119a:	490d      	ldr	r1, [pc, #52]	; (80011d0 <get_bus_voltage+0x48>)
 800119c:	ee17 0a90 	vmov	r0, s15
 80011a0:	f001 fcc2 	bl	8002b28 <Moving_Average_Compute>
 80011a4:	ec51 0b10 	vmov	r0, r1, d0
 80011a8:	a307      	add	r3, pc, #28	; (adr r3, 80011c8 <get_bus_voltage+0x40>)
 80011aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ae:	f7ff fa4b 	bl	8000648 <__aeabi_dmul>
 80011b2:	4602      	mov	r2, r0
 80011b4:	460b      	mov	r3, r1
 80011b6:	4610      	mov	r0, r2
 80011b8:	4619      	mov	r1, r3
 80011ba:	f7ff fd3d 	bl	8000c38 <__aeabi_d2f>
 80011be:	4603      	mov	r3, r0
 80011c0:	4a04      	ldr	r2, [pc, #16]	; (80011d4 <get_bus_voltage+0x4c>)
 80011c2:	6113      	str	r3, [r2, #16]
}
 80011c4:	bf00      	nop
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	48b35add 	.word	0x48b35add
 80011cc:	3f7a91e4 	.word	0x3f7a91e4
 80011d0:	20000cc8 	.word	0x20000cc8
 80011d4:	20000020 	.word	0x20000020

080011d8 <get_actual_temperature>:

void get_actual_temperature(){
 80011d8:	b5b0      	push	{r4, r5, r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
	/* Index 0 is bus Voltage */
	float TC_temperature_temp = Moving_Average_Compute(get_mean_ADC_reading(0), &actual_temperature_filter_struct); /* Moving average filter */
 80011de:	2000      	movs	r0, #0
 80011e0:	f7ff ff96 	bl	8001110 <get_mean_ADC_reading>
 80011e4:	eef0 7a40 	vmov.f32	s15, s0
 80011e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011ec:	497a      	ldr	r1, [pc, #488]	; (80013d8 <get_actual_temperature+0x200>)
 80011ee:	ee17 0a90 	vmov	r0, s15
 80011f2:	f001 fc99 	bl	8002b28 <Moving_Average_Compute>
 80011f6:	ec53 2b10 	vmov	r2, r3, d0
 80011fa:	4610      	mov	r0, r2
 80011fc:	4619      	mov	r1, r3
 80011fe:	f7ff fd1b 	bl	8000c38 <__aeabi_d2f>
 8001202:	4603      	mov	r3, r0
 8001204:	607b      	str	r3, [r7, #4]
	if(handle == T210){
 8001206:	4b75      	ldr	r3, [pc, #468]	; (80013dc <get_actual_temperature+0x204>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d14e      	bne.n	80012ac <get_actual_temperature+0xd4>
		sensor_values.actual_temperature = pow(TC_temperature_temp, 3)*TC_COMPENSATION_X3_T210 +
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f7ff f9c2 	bl	8000598 <__aeabi_f2d>
 8001214:	4602      	mov	r2, r0
 8001216:	460b      	mov	r3, r1
 8001218:	ed9f 1b59 	vldr	d1, [pc, #356]	; 8001380 <get_actual_temperature+0x1a8>
 800121c:	ec43 2b10 	vmov	d0, r2, r3
 8001220:	f00e f9d2 	bl	800f5c8 <pow>
 8001224:	ec51 0b10 	vmov	r0, r1, d0
 8001228:	a357      	add	r3, pc, #348	; (adr r3, 8001388 <get_actual_temperature+0x1b0>)
 800122a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122e:	f7ff fa0b 	bl	8000648 <__aeabi_dmul>
 8001232:	4602      	mov	r2, r0
 8001234:	460b      	mov	r3, r1
 8001236:	4614      	mov	r4, r2
 8001238:	461d      	mov	r5, r3
				pow(TC_temperature_temp, 2)*TC_COMPENSATION_X2_T210 + TC_temperature_temp*TC_COMPENSATION_X1_T210 + TC_COMPENSATION_X0_T210;
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f7ff f9ac 	bl	8000598 <__aeabi_f2d>
 8001240:	4602      	mov	r2, r0
 8001242:	460b      	mov	r3, r1
 8001244:	ed9f 1b52 	vldr	d1, [pc, #328]	; 8001390 <get_actual_temperature+0x1b8>
 8001248:	ec43 2b10 	vmov	d0, r2, r3
 800124c:	f00e f9bc 	bl	800f5c8 <pow>
 8001250:	ec51 0b10 	vmov	r0, r1, d0
 8001254:	a350      	add	r3, pc, #320	; (adr r3, 8001398 <get_actual_temperature+0x1c0>)
 8001256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800125a:	f7ff f9f5 	bl	8000648 <__aeabi_dmul>
 800125e:	4602      	mov	r2, r0
 8001260:	460b      	mov	r3, r1
		sensor_values.actual_temperature = pow(TC_temperature_temp, 3)*TC_COMPENSATION_X3_T210 +
 8001262:	4620      	mov	r0, r4
 8001264:	4629      	mov	r1, r5
 8001266:	f7ff f839 	bl	80002dc <__adddf3>
 800126a:	4602      	mov	r2, r0
 800126c:	460b      	mov	r3, r1
 800126e:	4614      	mov	r4, r2
 8001270:	461d      	mov	r5, r3
				pow(TC_temperature_temp, 2)*TC_COMPENSATION_X2_T210 + TC_temperature_temp*TC_COMPENSATION_X1_T210 + TC_COMPENSATION_X0_T210;
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f7ff f990 	bl	8000598 <__aeabi_f2d>
 8001278:	a349      	add	r3, pc, #292	; (adr r3, 80013a0 <get_actual_temperature+0x1c8>)
 800127a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800127e:	f7ff f9e3 	bl	8000648 <__aeabi_dmul>
 8001282:	4602      	mov	r2, r0
 8001284:	460b      	mov	r3, r1
 8001286:	4620      	mov	r0, r4
 8001288:	4629      	mov	r1, r5
 800128a:	f7ff f827 	bl	80002dc <__adddf3>
 800128e:	4602      	mov	r2, r0
 8001290:	460b      	mov	r3, r1
 8001292:	4610      	mov	r0, r2
 8001294:	4619      	mov	r1, r3
 8001296:	a344      	add	r3, pc, #272	; (adr r3, 80013a8 <get_actual_temperature+0x1d0>)
 8001298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800129c:	f7ff f81e 	bl	80002dc <__adddf3>
 80012a0:	4602      	mov	r2, r0
 80012a2:	460b      	mov	r3, r1
		sensor_values.actual_temperature = pow(TC_temperature_temp, 3)*TC_COMPENSATION_X3_T210 +
 80012a4:	494e      	ldr	r1, [pc, #312]	; (80013e0 <get_actual_temperature+0x208>)
 80012a6:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80012aa:	e051      	b.n	8001350 <get_actual_temperature+0x178>
	}
	else if(handle == T245){
 80012ac:	4b4b      	ldr	r3, [pc, #300]	; (80013dc <get_actual_temperature+0x204>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d14d      	bne.n	8001350 <get_actual_temperature+0x178>
		sensor_values.actual_temperature = pow(TC_temperature_temp, 3)*TC_COMPENSATION_X3_T245 +
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f7ff f96f 	bl	8000598 <__aeabi_f2d>
 80012ba:	4602      	mov	r2, r0
 80012bc:	460b      	mov	r3, r1
 80012be:	ed9f 1b30 	vldr	d1, [pc, #192]	; 8001380 <get_actual_temperature+0x1a8>
 80012c2:	ec43 2b10 	vmov	d0, r2, r3
 80012c6:	f00e f97f 	bl	800f5c8 <pow>
 80012ca:	ec51 0b10 	vmov	r0, r1, d0
 80012ce:	a338      	add	r3, pc, #224	; (adr r3, 80013b0 <get_actual_temperature+0x1d8>)
 80012d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d4:	f7ff f9b8 	bl	8000648 <__aeabi_dmul>
 80012d8:	4602      	mov	r2, r0
 80012da:	460b      	mov	r3, r1
 80012dc:	4614      	mov	r4, r2
 80012de:	461d      	mov	r5, r3
				pow(TC_temperature_temp, 2)*TC_COMPENSATION_X2_T245 + TC_temperature_temp*TC_COMPENSATION_X1_T245 + TC_COMPENSATION_X0_T245;
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f7ff f959 	bl	8000598 <__aeabi_f2d>
 80012e6:	4602      	mov	r2, r0
 80012e8:	460b      	mov	r3, r1
 80012ea:	ed9f 1b29 	vldr	d1, [pc, #164]	; 8001390 <get_actual_temperature+0x1b8>
 80012ee:	ec43 2b10 	vmov	d0, r2, r3
 80012f2:	f00e f969 	bl	800f5c8 <pow>
 80012f6:	ec51 0b10 	vmov	r0, r1, d0
 80012fa:	a32f      	add	r3, pc, #188	; (adr r3, 80013b8 <get_actual_temperature+0x1e0>)
 80012fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001300:	f7ff f9a2 	bl	8000648 <__aeabi_dmul>
 8001304:	4602      	mov	r2, r0
 8001306:	460b      	mov	r3, r1
		sensor_values.actual_temperature = pow(TC_temperature_temp, 3)*TC_COMPENSATION_X3_T245 +
 8001308:	4620      	mov	r0, r4
 800130a:	4629      	mov	r1, r5
 800130c:	f7fe ffe6 	bl	80002dc <__adddf3>
 8001310:	4602      	mov	r2, r0
 8001312:	460b      	mov	r3, r1
 8001314:	4614      	mov	r4, r2
 8001316:	461d      	mov	r5, r3
				pow(TC_temperature_temp, 2)*TC_COMPENSATION_X2_T245 + TC_temperature_temp*TC_COMPENSATION_X1_T245 + TC_COMPENSATION_X0_T245;
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f7ff f93d 	bl	8000598 <__aeabi_f2d>
 800131e:	a328      	add	r3, pc, #160	; (adr r3, 80013c0 <get_actual_temperature+0x1e8>)
 8001320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001324:	f7ff f990 	bl	8000648 <__aeabi_dmul>
 8001328:	4602      	mov	r2, r0
 800132a:	460b      	mov	r3, r1
 800132c:	4620      	mov	r0, r4
 800132e:	4629      	mov	r1, r5
 8001330:	f7fe ffd4 	bl	80002dc <__adddf3>
 8001334:	4602      	mov	r2, r0
 8001336:	460b      	mov	r3, r1
 8001338:	4610      	mov	r0, r2
 800133a:	4619      	mov	r1, r3
 800133c:	a322      	add	r3, pc, #136	; (adr r3, 80013c8 <get_actual_temperature+0x1f0>)
 800133e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001342:	f7fe ffcb 	bl	80002dc <__adddf3>
 8001346:	4602      	mov	r2, r0
 8001348:	460b      	mov	r3, r1
		sensor_values.actual_temperature = pow(TC_temperature_temp, 3)*TC_COMPENSATION_X3_T245 +
 800134a:	4925      	ldr	r1, [pc, #148]	; (80013e0 <get_actual_temperature+0x208>)
 800134c:	e9c1 2302 	strd	r2, r3, [r1, #8]
	}

	if(sensor_values.actual_temperature > 999){
 8001350:	4b23      	ldr	r3, [pc, #140]	; (80013e0 <get_actual_temperature+0x208>)
 8001352:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001356:	a31e      	add	r3, pc, #120	; (adr r3, 80013d0 <get_actual_temperature+0x1f8>)
 8001358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800135c:	f7ff fc04 	bl	8000b68 <__aeabi_dcmpgt>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d100      	bne.n	8001368 <get_actual_temperature+0x190>
		sensor_values.actual_temperature = 999;
	}
}
 8001366:	e005      	b.n	8001374 <get_actual_temperature+0x19c>
		sensor_values.actual_temperature = 999;
 8001368:	491d      	ldr	r1, [pc, #116]	; (80013e0 <get_actual_temperature+0x208>)
 800136a:	a319      	add	r3, pc, #100	; (adr r3, 80013d0 <get_actual_temperature+0x1f8>)
 800136c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001370:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 8001374:	bf00      	nop
 8001376:	3708      	adds	r7, #8
 8001378:	46bd      	mov	sp, r7
 800137a:	bdb0      	pop	{r4, r5, r7, pc}
 800137c:	f3af 8000 	nop.w
 8001380:	00000000 	.word	0x00000000
 8001384:	40080000 	.word	0x40080000
 8001388:	e6c91459 	.word	0xe6c91459
 800138c:	be3d333c 	.word	0xbe3d333c
 8001390:	00000000 	.word	0x00000000
 8001394:	40000000 	.word	0x40000000
 8001398:	77c4dab0 	.word	0x77c4dab0
 800139c:	bed98561 	.word	0xbed98561
 80013a0:	0aa653bc 	.word	0x0aa653bc
 80013a4:	3fd1585a 	.word	0x3fd1585a
 80013a8:	d797deed 	.word	0xd797deed
 80013ac:	40396624 	.word	0x40396624
 80013b0:	b4effad8 	.word	0xb4effad8
 80013b4:	3e21f933 	.word	0x3e21f933
 80013b8:	c7e1dac1 	.word	0xc7e1dac1
 80013bc:	bee97525 	.word	0xbee97525
 80013c0:	8d8ee863 	.word	0x8d8ee863
 80013c4:	3fbe16b0 	.word	0x3fbe16b0
 80013c8:	7373b751 	.word	0x7373b751
 80013cc:	40390d47 	.word	0x40390d47
 80013d0:	00000000 	.word	0x00000000
 80013d4:	408f3800 	.word	0x408f3800
 80013d8:	20000670 	.word	0x20000670
 80013dc:	200002ac 	.word	0x200002ac
 80013e0:	20000020 	.word	0x20000020
 80013e4:	00000000 	.word	0x00000000

080013e8 <get_ambient_temp>:

void get_ambient_temp(){
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
	//Index 2 is PCB temp
	/* Moving average filter */
	sensor_values.ambient_temperature = ((Moving_Average_Compute(get_mean_ADC_reading(2), &ambient_temperature_filter_struct)*AMBIENT_TEMP_COMPENSATION)-0.4)/0.0195;
 80013ec:	2002      	movs	r0, #2
 80013ee:	f7ff fe8f 	bl	8001110 <get_mean_ADC_reading>
 80013f2:	eef0 7a40 	vmov.f32	s15, s0
 80013f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013fa:	491b      	ldr	r1, [pc, #108]	; (8001468 <get_ambient_temp+0x80>)
 80013fc:	ee17 0a90 	vmov	r0, s15
 8001400:	f001 fb92 	bl	8002b28 <Moving_Average_Compute>
 8001404:	ec51 0b10 	vmov	r0, r1, d0
 8001408:	a311      	add	r3, pc, #68	; (adr r3, 8001450 <get_ambient_temp+0x68>)
 800140a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800140e:	f7ff f91b 	bl	8000648 <__aeabi_dmul>
 8001412:	4602      	mov	r2, r0
 8001414:	460b      	mov	r3, r1
 8001416:	4610      	mov	r0, r2
 8001418:	4619      	mov	r1, r3
 800141a:	a30f      	add	r3, pc, #60	; (adr r3, 8001458 <get_ambient_temp+0x70>)
 800141c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001420:	f7fe ff5a 	bl	80002d8 <__aeabi_dsub>
 8001424:	4602      	mov	r2, r0
 8001426:	460b      	mov	r3, r1
 8001428:	4610      	mov	r0, r2
 800142a:	4619      	mov	r1, r3
 800142c:	a30c      	add	r3, pc, #48	; (adr r3, 8001460 <get_ambient_temp+0x78>)
 800142e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001432:	f7ff fa33 	bl	800089c <__aeabi_ddiv>
 8001436:	4602      	mov	r2, r0
 8001438:	460b      	mov	r3, r1
 800143a:	4610      	mov	r0, r2
 800143c:	4619      	mov	r1, r3
 800143e:	f7ff fbfb 	bl	8000c38 <__aeabi_d2f>
 8001442:	4603      	mov	r3, r0
 8001444:	4a09      	ldr	r2, [pc, #36]	; (800146c <get_ambient_temp+0x84>)
 8001446:	6193      	str	r3, [r2, #24]
	//• Positive slope sensor gain, offset (typical):
	//– 19.5 mV/°C, 400 mV at 0°C (TMP236-Q1) From data sheet
}
 8001448:	bf00      	nop
 800144a:	bd80      	pop	{r7, pc}
 800144c:	f3af 8000 	nop.w
 8001450:	e3fc03eb 	.word	0xe3fc03eb
 8001454:	3f4a680c 	.word	0x3f4a680c
 8001458:	9999999a 	.word	0x9999999a
 800145c:	3fd99999 	.word	0x3fd99999
 8001460:	d916872b 	.word	0xd916872b
 8001464:	3f93f7ce 	.word	0x3f93f7ce
 8001468:	2000099c 	.word	0x2000099c
 800146c:	20000020 	.word	0x20000020

08001470 <debugPrint>:

void debugPrint(UART_HandleTypeDef *huart, char _out[]){
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
    tx_done = 0;
 800147a:	4b0b      	ldr	r3, [pc, #44]	; (80014a8 <debugPrint+0x38>)
 800147c:	2200      	movs	r2, #0
 800147e:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(huart, (uint8_t *) _out, strlen(_out));
 8001480:	6838      	ldr	r0, [r7, #0]
 8001482:	f7fe ff1d 	bl	80002c0 <strlen>
 8001486:	4603      	mov	r3, r0
 8001488:	b29b      	uxth	r3, r3
 800148a:	461a      	mov	r2, r3
 800148c:	6839      	ldr	r1, [r7, #0]
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f008 fcd2 	bl	8009e38 <HAL_UART_Transmit_IT>
	while(!tx_done);
 8001494:	bf00      	nop
 8001496:	4b04      	ldr	r3, [pc, #16]	; (80014a8 <debugPrint+0x38>)
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d0fb      	beq.n	8001496 <debugPrint+0x26>
}
 800149e:	bf00      	nop
 80014a0:	bf00      	nop
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	2000001d 	.word	0x2000001d

080014ac <init_OLED>:

/* Initiate OLED display */
void init_OLED(){
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af02      	add	r7, sp, #8
	OLED_1in5_Init();
 80014b2:	f00b f8ff 	bl	800c6b4 <OLED_1in5_Init>
	Driver_Delay_ms(500);
 80014b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014ba:	f00a f8b9 	bl	800b630 <Driver_Delay_ms>
	OLED_1in5_Clear();
 80014be:	f00b f945 	bl	800c74c <OLED_1in5_Clear>

	//0.Create a new image cache
	if((black_image = (UBYTE *)malloc(image_size)) == NULL) {
 80014c2:	4b14      	ldr	r3, [pc, #80]	; (8001514 <init_OLED+0x68>)
 80014c4:	881b      	ldrh	r3, [r3, #0]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f00b f98a 	bl	800c7e0 <malloc>
 80014cc:	4603      	mov	r3, r0
 80014ce:	461a      	mov	r2, r3
 80014d0:	4b11      	ldr	r3, [pc, #68]	; (8001518 <init_OLED+0x6c>)
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	4b10      	ldr	r3, [pc, #64]	; (8001518 <init_OLED+0x6c>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d018      	beq.n	800150e <init_OLED+0x62>
		return;
	}
	Paint_NewImage(black_image, OLED_1in5_WIDTH, OLED_1in5_HEIGHT, 270, BLACK);
 80014dc:	4b0e      	ldr	r3, [pc, #56]	; (8001518 <init_OLED+0x6c>)
 80014de:	6818      	ldr	r0, [r3, #0]
 80014e0:	2300      	movs	r3, #0
 80014e2:	9300      	str	r3, [sp, #0]
 80014e4:	f44f 7387 	mov.w	r3, #270	; 0x10e
 80014e8:	2280      	movs	r2, #128	; 0x80
 80014ea:	2180      	movs	r1, #128	; 0x80
 80014ec:	f00a f8ac 	bl	800b648 <Paint_NewImage>
	Paint_SetScale(16);
 80014f0:	2010      	movs	r0, #16
 80014f2:	f00a f90f 	bl	800b714 <Paint_SetScale>

	//1.Select Image
	Paint_SelectImage(black_image);
 80014f6:	4b08      	ldr	r3, [pc, #32]	; (8001518 <init_OLED+0x6c>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f00a f8fa 	bl	800b6f4 <Paint_SelectImage>
	Paint_Clear(BLACK);
 8001500:	2000      	movs	r0, #0
 8001502:	f00a faf1 	bl	800bae8 <Paint_Clear>
	Driver_Delay_ms(200);
 8001506:	20c8      	movs	r0, #200	; 0xc8
 8001508:	f00a f892 	bl	800b630 <Driver_Delay_ms>
 800150c:	e000      	b.n	8001510 <init_OLED+0x64>
		return;
 800150e:	bf00      	nop
}
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	20000000 	.word	0x20000000
 8001518:	200002b0 	.word	0x200002b0

0800151c <update_OLED>:

void update_OLED(){
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af04      	add	r7, sp, #16
	Paint_DrawString_EN(0, 0, " AxxSolder ", &Font16, 0x00, 0xff);
 8001522:	23ff      	movs	r3, #255	; 0xff
 8001524:	9301      	str	r3, [sp, #4]
 8001526:	2300      	movs	r3, #0
 8001528:	9300      	str	r3, [sp, #0]
 800152a:	4bad      	ldr	r3, [pc, #692]	; (80017e0 <update_OLED+0x2c4>)
 800152c:	4aad      	ldr	r2, [pc, #692]	; (80017e4 <update_OLED+0x2c8>)
 800152e:	2100      	movs	r1, #0
 8001530:	2000      	movs	r0, #0
 8001532:	f00a ffa3 	bl	800c47c <Paint_DrawString_EN>
    Paint_DrawLine(0, 16, 127, 16, WHITE , 2, LINE_STYLE_SOLID);
 8001536:	2300      	movs	r3, #0
 8001538:	9302      	str	r3, [sp, #8]
 800153a:	2302      	movs	r3, #2
 800153c:	9301      	str	r3, [sp, #4]
 800153e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001542:	9300      	str	r3, [sp, #0]
 8001544:	2310      	movs	r3, #16
 8001546:	227f      	movs	r2, #127	; 0x7f
 8001548:	2110      	movs	r1, #16
 800154a:	2000      	movs	r0, #0
 800154c:	f00a fc22 	bl	800bd94 <Paint_DrawLine>

	Paint_DrawString_EN(3, 20, "Set temp", &Font16, 0x00, 0xff);
 8001550:	23ff      	movs	r3, #255	; 0xff
 8001552:	9301      	str	r3, [sp, #4]
 8001554:	2300      	movs	r3, #0
 8001556:	9300      	str	r3, [sp, #0]
 8001558:	4ba1      	ldr	r3, [pc, #644]	; (80017e0 <update_OLED+0x2c4>)
 800155a:	4aa3      	ldr	r2, [pc, #652]	; (80017e8 <update_OLED+0x2cc>)
 800155c:	2114      	movs	r1, #20
 800155e:	2003      	movs	r0, #3
 8001560:	f00a ff8c 	bl	800c47c <Paint_DrawString_EN>
	memset(&buffer, '\0', sizeof(buffer));
 8001564:	2228      	movs	r2, #40	; 0x28
 8001566:	2100      	movs	r1, #0
 8001568:	48a0      	ldr	r0, [pc, #640]	; (80017ec <update_OLED+0x2d0>)
 800156a:	f00c f87b 	bl	800d664 <memset>
	sprintf(buffer, "%.f", sensor_values.set_temperature);
 800156e:	4ba0      	ldr	r3, [pc, #640]	; (80017f0 <update_OLED+0x2d4>)
 8001570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001574:	499f      	ldr	r1, [pc, #636]	; (80017f4 <update_OLED+0x2d8>)
 8001576:	489d      	ldr	r0, [pc, #628]	; (80017ec <update_OLED+0x2d0>)
 8001578:	f00b ff7c 	bl	800d474 <siprintf>
	Paint_DrawString_EN(3, 32, buffer, &Font24,  0x0, 0xff);
 800157c:	23ff      	movs	r3, #255	; 0xff
 800157e:	9301      	str	r3, [sp, #4]
 8001580:	2300      	movs	r3, #0
 8001582:	9300      	str	r3, [sp, #0]
 8001584:	4b9c      	ldr	r3, [pc, #624]	; (80017f8 <update_OLED+0x2dc>)
 8001586:	4a99      	ldr	r2, [pc, #612]	; (80017ec <update_OLED+0x2d0>)
 8001588:	2120      	movs	r1, #32
 800158a:	2003      	movs	r0, #3
 800158c:	f00a ff76 	bl	800c47c <Paint_DrawString_EN>
	Paint_DrawCircle(67, 37, 2, WHITE, 1, DRAW_FILL_EMPTY);
 8001590:	2300      	movs	r3, #0
 8001592:	9301      	str	r3, [sp, #4]
 8001594:	2301      	movs	r3, #1
 8001596:	9300      	str	r3, [sp, #0]
 8001598:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800159c:	2202      	movs	r2, #2
 800159e:	2125      	movs	r1, #37	; 0x25
 80015a0:	2043      	movs	r0, #67	; 0x43
 80015a2:	f00a fd35 	bl	800c010 <Paint_DrawCircle>
	Paint_DrawString_EN(70, 32, "C", &Font24,  0x0, 0xff);
 80015a6:	23ff      	movs	r3, #255	; 0xff
 80015a8:	9301      	str	r3, [sp, #4]
 80015aa:	2300      	movs	r3, #0
 80015ac:	9300      	str	r3, [sp, #0]
 80015ae:	4b92      	ldr	r3, [pc, #584]	; (80017f8 <update_OLED+0x2dc>)
 80015b0:	4a92      	ldr	r2, [pc, #584]	; (80017fc <update_OLED+0x2e0>)
 80015b2:	2120      	movs	r1, #32
 80015b4:	2046      	movs	r0, #70	; 0x46
 80015b6:	f00a ff61 	bl	800c47c <Paint_DrawString_EN>

	Paint_DrawString_EN(3, 58, "Act temp", &Font16, 0x00, 0xff);
 80015ba:	23ff      	movs	r3, #255	; 0xff
 80015bc:	9301      	str	r3, [sp, #4]
 80015be:	2300      	movs	r3, #0
 80015c0:	9300      	str	r3, [sp, #0]
 80015c2:	4b87      	ldr	r3, [pc, #540]	; (80017e0 <update_OLED+0x2c4>)
 80015c4:	4a8e      	ldr	r2, [pc, #568]	; (8001800 <update_OLED+0x2e4>)
 80015c6:	213a      	movs	r1, #58	; 0x3a
 80015c8:	2003      	movs	r0, #3
 80015ca:	f00a ff57 	bl	800c47c <Paint_DrawString_EN>
	memset(&buffer, '\0', sizeof(buffer));
 80015ce:	2228      	movs	r2, #40	; 0x28
 80015d0:	2100      	movs	r1, #0
 80015d2:	4886      	ldr	r0, [pc, #536]	; (80017ec <update_OLED+0x2d0>)
 80015d4:	f00c f846 	bl	800d664 <memset>

	if(sensor_values.actual_temperature >= 500){
 80015d8:	4b85      	ldr	r3, [pc, #532]	; (80017f0 <update_OLED+0x2d4>)
 80015da:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80015de:	f04f 0200 	mov.w	r2, #0
 80015e2:	4b88      	ldr	r3, [pc, #544]	; (8001804 <update_OLED+0x2e8>)
 80015e4:	f7ff fab6 	bl	8000b54 <__aeabi_dcmpge>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d00a      	beq.n	8001604 <update_OLED+0xe8>
		Paint_DrawString_EN(3, 70, "---", &Font24, 0x0, 0xff);
 80015ee:	23ff      	movs	r3, #255	; 0xff
 80015f0:	9301      	str	r3, [sp, #4]
 80015f2:	2300      	movs	r3, #0
 80015f4:	9300      	str	r3, [sp, #0]
 80015f6:	4b80      	ldr	r3, [pc, #512]	; (80017f8 <update_OLED+0x2dc>)
 80015f8:	4a83      	ldr	r2, [pc, #524]	; (8001808 <update_OLED+0x2ec>)
 80015fa:	2146      	movs	r1, #70	; 0x46
 80015fc:	2003      	movs	r0, #3
 80015fe:	f00a ff3d 	bl	800c47c <Paint_DrawString_EN>
 8001602:	e010      	b.n	8001626 <update_OLED+0x10a>
	}
	else{
		sprintf(buffer, "%.f", sensor_values.actual_temperature);
 8001604:	4b7a      	ldr	r3, [pc, #488]	; (80017f0 <update_OLED+0x2d4>)
 8001606:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800160a:	497a      	ldr	r1, [pc, #488]	; (80017f4 <update_OLED+0x2d8>)
 800160c:	4877      	ldr	r0, [pc, #476]	; (80017ec <update_OLED+0x2d0>)
 800160e:	f00b ff31 	bl	800d474 <siprintf>
		Paint_DrawString_EN(3, 70, buffer, &Font24, 0x0, 0xff);
 8001612:	23ff      	movs	r3, #255	; 0xff
 8001614:	9301      	str	r3, [sp, #4]
 8001616:	2300      	movs	r3, #0
 8001618:	9300      	str	r3, [sp, #0]
 800161a:	4b77      	ldr	r3, [pc, #476]	; (80017f8 <update_OLED+0x2dc>)
 800161c:	4a73      	ldr	r2, [pc, #460]	; (80017ec <update_OLED+0x2d0>)
 800161e:	2146      	movs	r1, #70	; 0x46
 8001620:	2003      	movs	r0, #3
 8001622:	f00a ff2b 	bl	800c47c <Paint_DrawString_EN>
	}

	Paint_DrawCircle(67, 75, 2, WHITE, 1, DRAW_FILL_EMPTY);
 8001626:	2300      	movs	r3, #0
 8001628:	9301      	str	r3, [sp, #4]
 800162a:	2301      	movs	r3, #1
 800162c:	9300      	str	r3, [sp, #0]
 800162e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001632:	2202      	movs	r2, #2
 8001634:	214b      	movs	r1, #75	; 0x4b
 8001636:	2043      	movs	r0, #67	; 0x43
 8001638:	f00a fcea 	bl	800c010 <Paint_DrawCircle>
	Paint_DrawString_EN(70, 70, "C", &Font24, 0x0, 0xff);
 800163c:	23ff      	movs	r3, #255	; 0xff
 800163e:	9301      	str	r3, [sp, #4]
 8001640:	2300      	movs	r3, #0
 8001642:	9300      	str	r3, [sp, #0]
 8001644:	4b6c      	ldr	r3, [pc, #432]	; (80017f8 <update_OLED+0x2dc>)
 8001646:	4a6d      	ldr	r2, [pc, #436]	; (80017fc <update_OLED+0x2e0>)
 8001648:	2146      	movs	r1, #70	; 0x46
 800164a:	2046      	movs	r0, #70	; 0x46
 800164c:	f00a ff16 	bl	800c47c <Paint_DrawString_EN>
	Paint_DrawRectangle(1, 56, 100, 93 , WHITE, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
 8001650:	2300      	movs	r3, #0
 8001652:	9302      	str	r3, [sp, #8]
 8001654:	2301      	movs	r3, #1
 8001656:	9301      	str	r3, [sp, #4]
 8001658:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800165c:	9300      	str	r3, [sp, #0]
 800165e:	235d      	movs	r3, #93	; 0x5d
 8001660:	2264      	movs	r2, #100	; 0x64
 8001662:	2138      	movs	r1, #56	; 0x38
 8001664:	2001      	movs	r0, #1
 8001666:	f00a fc4f 	bl	800bf08 <Paint_DrawRectangle>

	Paint_DrawString_EN(0, 96, "HANDLE:", &Font12, 0x00, 0xff);
 800166a:	23ff      	movs	r3, #255	; 0xff
 800166c:	9301      	str	r3, [sp, #4]
 800166e:	2300      	movs	r3, #0
 8001670:	9300      	str	r3, [sp, #0]
 8001672:	4b66      	ldr	r3, [pc, #408]	; (800180c <update_OLED+0x2f0>)
 8001674:	4a66      	ldr	r2, [pc, #408]	; (8001810 <update_OLED+0x2f4>)
 8001676:	2160      	movs	r1, #96	; 0x60
 8001678:	2000      	movs	r0, #0
 800167a:	f00a feff 	bl	800c47c <Paint_DrawString_EN>
	if(handle == T210){
 800167e:	4b65      	ldr	r3, [pc, #404]	; (8001814 <update_OLED+0x2f8>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d10a      	bne.n	800169c <update_OLED+0x180>
		Paint_DrawString_EN(60, 96, "T210", &Font12, 0x00, 0xff);
 8001686:	23ff      	movs	r3, #255	; 0xff
 8001688:	9301      	str	r3, [sp, #4]
 800168a:	2300      	movs	r3, #0
 800168c:	9300      	str	r3, [sp, #0]
 800168e:	4b5f      	ldr	r3, [pc, #380]	; (800180c <update_OLED+0x2f0>)
 8001690:	4a61      	ldr	r2, [pc, #388]	; (8001818 <update_OLED+0x2fc>)
 8001692:	2160      	movs	r1, #96	; 0x60
 8001694:	203c      	movs	r0, #60	; 0x3c
 8001696:	f00a fef1 	bl	800c47c <Paint_DrawString_EN>
 800169a:	e00d      	b.n	80016b8 <update_OLED+0x19c>
	}
	else if(handle == T245){
 800169c:	4b5d      	ldr	r3, [pc, #372]	; (8001814 <update_OLED+0x2f8>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d109      	bne.n	80016b8 <update_OLED+0x19c>
		Paint_DrawString_EN(60, 96, "T245", &Font12, 0x00, 0xff);
 80016a4:	23ff      	movs	r3, #255	; 0xff
 80016a6:	9301      	str	r3, [sp, #4]
 80016a8:	2300      	movs	r3, #0
 80016aa:	9300      	str	r3, [sp, #0]
 80016ac:	4b57      	ldr	r3, [pc, #348]	; (800180c <update_OLED+0x2f0>)
 80016ae:	4a5b      	ldr	r2, [pc, #364]	; (800181c <update_OLED+0x300>)
 80016b0:	2160      	movs	r1, #96	; 0x60
 80016b2:	203c      	movs	r0, #60	; 0x3c
 80016b4:	f00a fee2 	bl	800c47c <Paint_DrawString_EN>
	}

	Paint_DrawString_EN(0, 109, "INPUT VOLTAGE:", &Font8, 0x00, 0xff);
 80016b8:	23ff      	movs	r3, #255	; 0xff
 80016ba:	9301      	str	r3, [sp, #4]
 80016bc:	2300      	movs	r3, #0
 80016be:	9300      	str	r3, [sp, #0]
 80016c0:	4b57      	ldr	r3, [pc, #348]	; (8001820 <update_OLED+0x304>)
 80016c2:	4a58      	ldr	r2, [pc, #352]	; (8001824 <update_OLED+0x308>)
 80016c4:	216d      	movs	r1, #109	; 0x6d
 80016c6:	2000      	movs	r0, #0
 80016c8:	f00a fed8 	bl	800c47c <Paint_DrawString_EN>
	Paint_DrawString_EN(0, 118, "AMB TEMP:     POWER ->", &Font8, 0x00, 0xff);
 80016cc:	23ff      	movs	r3, #255	; 0xff
 80016ce:	9301      	str	r3, [sp, #4]
 80016d0:	2300      	movs	r3, #0
 80016d2:	9300      	str	r3, [sp, #0]
 80016d4:	4b52      	ldr	r3, [pc, #328]	; (8001820 <update_OLED+0x304>)
 80016d6:	4a54      	ldr	r2, [pc, #336]	; (8001828 <update_OLED+0x30c>)
 80016d8:	2176      	movs	r1, #118	; 0x76
 80016da:	2000      	movs	r0, #0
 80016dc:	f00a fece 	bl	800c47c <Paint_DrawString_EN>

	memset(&buffer, '\0', sizeof(buffer));
 80016e0:	2228      	movs	r2, #40	; 0x28
 80016e2:	2100      	movs	r1, #0
 80016e4:	4841      	ldr	r0, [pc, #260]	; (80017ec <update_OLED+0x2d0>)
 80016e6:	f00b ffbd 	bl	800d664 <memset>
	sprintf(buffer, "%.1f", sensor_values.bus_voltage);
 80016ea:	4b41      	ldr	r3, [pc, #260]	; (80017f0 <update_OLED+0x2d4>)
 80016ec:	691b      	ldr	r3, [r3, #16]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7fe ff52 	bl	8000598 <__aeabi_f2d>
 80016f4:	4602      	mov	r2, r0
 80016f6:	460b      	mov	r3, r1
 80016f8:	494c      	ldr	r1, [pc, #304]	; (800182c <update_OLED+0x310>)
 80016fa:	483c      	ldr	r0, [pc, #240]	; (80017ec <update_OLED+0x2d0>)
 80016fc:	f00b feba 	bl	800d474 <siprintf>
	Paint_DrawString_EN(75, 109, buffer, &Font8, 0x0, 0xff);
 8001700:	23ff      	movs	r3, #255	; 0xff
 8001702:	9301      	str	r3, [sp, #4]
 8001704:	2300      	movs	r3, #0
 8001706:	9300      	str	r3, [sp, #0]
 8001708:	4b45      	ldr	r3, [pc, #276]	; (8001820 <update_OLED+0x304>)
 800170a:	4a38      	ldr	r2, [pc, #224]	; (80017ec <update_OLED+0x2d0>)
 800170c:	216d      	movs	r1, #109	; 0x6d
 800170e:	204b      	movs	r0, #75	; 0x4b
 8001710:	f00a feb4 	bl	800c47c <Paint_DrawString_EN>

	memset(&buffer, '\0', sizeof(buffer));
 8001714:	2228      	movs	r2, #40	; 0x28
 8001716:	2100      	movs	r1, #0
 8001718:	4834      	ldr	r0, [pc, #208]	; (80017ec <update_OLED+0x2d0>)
 800171a:	f00b ffa3 	bl	800d664 <memset>
	sprintf(buffer, "%.1f", sensor_values.ambient_temperature);
 800171e:	4b34      	ldr	r3, [pc, #208]	; (80017f0 <update_OLED+0x2d4>)
 8001720:	699b      	ldr	r3, [r3, #24]
 8001722:	4618      	mov	r0, r3
 8001724:	f7fe ff38 	bl	8000598 <__aeabi_f2d>
 8001728:	4602      	mov	r2, r0
 800172a:	460b      	mov	r3, r1
 800172c:	493f      	ldr	r1, [pc, #252]	; (800182c <update_OLED+0x310>)
 800172e:	482f      	ldr	r0, [pc, #188]	; (80017ec <update_OLED+0x2d0>)
 8001730:	f00b fea0 	bl	800d474 <siprintf>
	Paint_DrawString_EN(45, 118, buffer, &Font8, 0x0, 0xff);
 8001734:	23ff      	movs	r3, #255	; 0xff
 8001736:	9301      	str	r3, [sp, #4]
 8001738:	2300      	movs	r3, #0
 800173a:	9300      	str	r3, [sp, #0]
 800173c:	4b38      	ldr	r3, [pc, #224]	; (8001820 <update_OLED+0x304>)
 800173e:	4a2b      	ldr	r2, [pc, #172]	; (80017ec <update_OLED+0x2d0>)
 8001740:	2176      	movs	r1, #118	; 0x76
 8001742:	202d      	movs	r0, #45	; 0x2d
 8001744:	f00a fe9a 	bl	800c47c <Paint_DrawString_EN>

	Paint_DrawRectangle(116, 25, 128, 128, WHITE, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
 8001748:	2300      	movs	r3, #0
 800174a:	9302      	str	r3, [sp, #8]
 800174c:	2301      	movs	r3, #1
 800174e:	9301      	str	r3, [sp, #4]
 8001750:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001754:	9300      	str	r3, [sp, #0]
 8001756:	2380      	movs	r3, #128	; 0x80
 8001758:	2280      	movs	r2, #128	; 0x80
 800175a:	2119      	movs	r1, #25
 800175c:	2074      	movs	r0, #116	; 0x74
 800175e:	f00a fbd3 	bl	800bf08 <Paint_DrawRectangle>
	if(active_state == SLEEP || active_state == EMERGENCY_SLEEP || active_state == HALTED){
 8001762:	4b33      	ldr	r3, [pc, #204]	; (8001830 <update_OLED+0x314>)
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	2b01      	cmp	r3, #1
 8001768:	d007      	beq.n	800177a <update_OLED+0x25e>
 800176a:	4b31      	ldr	r3, [pc, #196]	; (8001830 <update_OLED+0x314>)
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	2b02      	cmp	r3, #2
 8001770:	d003      	beq.n	800177a <update_OLED+0x25e>
 8001772:	4b2f      	ldr	r3, [pc, #188]	; (8001830 <update_OLED+0x314>)
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	2b03      	cmp	r3, #3
 8001778:	d160      	bne.n	800183c <update_OLED+0x320>
		Paint_DrawString_EN(116, 30,  "Z", &Font16, 0x00, 0xff);
 800177a:	23ff      	movs	r3, #255	; 0xff
 800177c:	9301      	str	r3, [sp, #4]
 800177e:	2300      	movs	r3, #0
 8001780:	9300      	str	r3, [sp, #0]
 8001782:	4b17      	ldr	r3, [pc, #92]	; (80017e0 <update_OLED+0x2c4>)
 8001784:	4a2b      	ldr	r2, [pc, #172]	; (8001834 <update_OLED+0x318>)
 8001786:	211e      	movs	r1, #30
 8001788:	2074      	movs	r0, #116	; 0x74
 800178a:	f00a fe77 	bl	800c47c <Paint_DrawString_EN>
		Paint_DrawString_EN(116, 50,  "z", &Font16, 0x00, 0xff);
 800178e:	23ff      	movs	r3, #255	; 0xff
 8001790:	9301      	str	r3, [sp, #4]
 8001792:	2300      	movs	r3, #0
 8001794:	9300      	str	r3, [sp, #0]
 8001796:	4b12      	ldr	r3, [pc, #72]	; (80017e0 <update_OLED+0x2c4>)
 8001798:	4a27      	ldr	r2, [pc, #156]	; (8001838 <update_OLED+0x31c>)
 800179a:	2132      	movs	r1, #50	; 0x32
 800179c:	2074      	movs	r0, #116	; 0x74
 800179e:	f00a fe6d 	bl	800c47c <Paint_DrawString_EN>
		Paint_DrawString_EN(116, 70,  "Z", &Font16, 0x00, 0xff);
 80017a2:	23ff      	movs	r3, #255	; 0xff
 80017a4:	9301      	str	r3, [sp, #4]
 80017a6:	2300      	movs	r3, #0
 80017a8:	9300      	str	r3, [sp, #0]
 80017aa:	4b0d      	ldr	r3, [pc, #52]	; (80017e0 <update_OLED+0x2c4>)
 80017ac:	4a21      	ldr	r2, [pc, #132]	; (8001834 <update_OLED+0x318>)
 80017ae:	2146      	movs	r1, #70	; 0x46
 80017b0:	2074      	movs	r0, #116	; 0x74
 80017b2:	f00a fe63 	bl	800c47c <Paint_DrawString_EN>
		Paint_DrawString_EN(116, 90,  "z", &Font16, 0x00, 0xff);
 80017b6:	23ff      	movs	r3, #255	; 0xff
 80017b8:	9301      	str	r3, [sp, #4]
 80017ba:	2300      	movs	r3, #0
 80017bc:	9300      	str	r3, [sp, #0]
 80017be:	4b08      	ldr	r3, [pc, #32]	; (80017e0 <update_OLED+0x2c4>)
 80017c0:	4a1d      	ldr	r2, [pc, #116]	; (8001838 <update_OLED+0x31c>)
 80017c2:	215a      	movs	r1, #90	; 0x5a
 80017c4:	2074      	movs	r0, #116	; 0x74
 80017c6:	f00a fe59 	bl	800c47c <Paint_DrawString_EN>
		Paint_DrawString_EN(116, 110, "z", &Font16, 0x00, 0xff);
 80017ca:	23ff      	movs	r3, #255	; 0xff
 80017cc:	9301      	str	r3, [sp, #4]
 80017ce:	2300      	movs	r3, #0
 80017d0:	9300      	str	r3, [sp, #0]
 80017d2:	4b03      	ldr	r3, [pc, #12]	; (80017e0 <update_OLED+0x2c4>)
 80017d4:	4a18      	ldr	r2, [pc, #96]	; (8001838 <update_OLED+0x31c>)
 80017d6:	216e      	movs	r1, #110	; 0x6e
 80017d8:	2074      	movs	r0, #116	; 0x74
 80017da:	f00a fe4f 	bl	800c47c <Paint_DrawString_EN>
 80017de:	e050      	b.n	8001882 <update_OLED+0x366>
 80017e0:	2000008c 	.word	0x2000008c
 80017e4:	08010450 	.word	0x08010450
 80017e8:	0801045c 	.word	0x0801045c
 80017ec:	20000310 	.word	0x20000310
 80017f0:	20000020 	.word	0x20000020
 80017f4:	08010468 	.word	0x08010468
 80017f8:	20000094 	.word	0x20000094
 80017fc:	0801046c 	.word	0x0801046c
 8001800:	08010470 	.word	0x08010470
 8001804:	407f4000 	.word	0x407f4000
 8001808:	0801047c 	.word	0x0801047c
 800180c:	20000084 	.word	0x20000084
 8001810:	08010480 	.word	0x08010480
 8001814:	200002ac 	.word	0x200002ac
 8001818:	08010488 	.word	0x08010488
 800181c:	08010490 	.word	0x08010490
 8001820:	2000009c 	.word	0x2000009c
 8001824:	08010498 	.word	0x08010498
 8001828:	080104a8 	.word	0x080104a8
 800182c:	080104c0 	.word	0x080104c0
 8001830:	2000001c 	.word	0x2000001c
 8001834:	080104c8 	.word	0x080104c8
 8001838:	080104cc 	.word	0x080104cc
	}
	else{
		Paint_DrawRectangle(116, 125-PID_output/10, 128, 128, WHITE, DOT_PIXEL_1X1, DRAW_FILL_FULL);
 800183c:	4b16      	ldr	r3, [pc, #88]	; (8001898 <update_OLED+0x37c>)
 800183e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001842:	f04f 0200 	mov.w	r2, #0
 8001846:	4b15      	ldr	r3, [pc, #84]	; (800189c <update_OLED+0x380>)
 8001848:	f7ff f828 	bl	800089c <__aeabi_ddiv>
 800184c:	4602      	mov	r2, r0
 800184e:	460b      	mov	r3, r1
 8001850:	f04f 0000 	mov.w	r0, #0
 8001854:	4912      	ldr	r1, [pc, #72]	; (80018a0 <update_OLED+0x384>)
 8001856:	f7fe fd3f 	bl	80002d8 <__aeabi_dsub>
 800185a:	4602      	mov	r2, r0
 800185c:	460b      	mov	r3, r1
 800185e:	4610      	mov	r0, r2
 8001860:	4619      	mov	r1, r3
 8001862:	f7ff f9c9 	bl	8000bf8 <__aeabi_d2uiz>
 8001866:	4603      	mov	r3, r0
 8001868:	b299      	uxth	r1, r3
 800186a:	2301      	movs	r3, #1
 800186c:	9302      	str	r3, [sp, #8]
 800186e:	2301      	movs	r3, #1
 8001870:	9301      	str	r3, [sp, #4]
 8001872:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001876:	9300      	str	r3, [sp, #0]
 8001878:	2380      	movs	r3, #128	; 0x80
 800187a:	2280      	movs	r2, #128	; 0x80
 800187c:	2074      	movs	r0, #116	; 0x74
 800187e:	f00a fb43 	bl	800bf08 <Paint_DrawRectangle>
	}
	// Show image on page
	OLED_1in5_Display(black_image);
 8001882:	4b08      	ldr	r3, [pc, #32]	; (80018a4 <update_OLED+0x388>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4618      	mov	r0, r3
 8001888:	f00a ff7b 	bl	800c782 <OLED_1in5_Display>
	Paint_Clear(BLACK);
 800188c:	2000      	movs	r0, #0
 800188e:	f00a f92b 	bl	800bae8 <Paint_Clear>
}
 8001892:	bf00      	nop
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	20000660 	.word	0x20000660
 800189c:	40240000 	.word	0x40240000
 80018a0:	405f4000 	.word	0x405f4000
 80018a4:	200002b0 	.word	0x200002b0

080018a8 <get_set_temperature>:

/* Get encoder value (Set temp.) and limit is NOT heating_halted*/
void get_set_temperature(){
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
	if (TIM3->CNT <= MIN_SELECTABLE_TEMPERTURE) {TIM3->CNT = MIN_SELECTABLE_TEMPERTURE; }
 80018ac:	4b0d      	ldr	r3, [pc, #52]	; (80018e4 <get_set_temperature+0x3c>)
 80018ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b0:	2b14      	cmp	r3, #20
 80018b2:	d802      	bhi.n	80018ba <get_set_temperature+0x12>
 80018b4:	4b0b      	ldr	r3, [pc, #44]	; (80018e4 <get_set_temperature+0x3c>)
 80018b6:	2214      	movs	r2, #20
 80018b8:	625a      	str	r2, [r3, #36]	; 0x24
	if (TIM3->CNT >= MAX_SELECTABLE_TEMPERTURE) {TIM3->CNT = MAX_SELECTABLE_TEMPERTURE; }
 80018ba:	4b0a      	ldr	r3, [pc, #40]	; (80018e4 <get_set_temperature+0x3c>)
 80018bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018be:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 80018c2:	d303      	bcc.n	80018cc <get_set_temperature+0x24>
 80018c4:	4b07      	ldr	r3, [pc, #28]	; (80018e4 <get_set_temperature+0x3c>)
 80018c6:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 80018ca:	625a      	str	r2, [r3, #36]	; 0x24
	sensor_values.set_temperature = TIM3->CNT;
 80018cc:	4b05      	ldr	r3, [pc, #20]	; (80018e4 <get_set_temperature+0x3c>)
 80018ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7fe fe3f 	bl	8000554 <__aeabi_ui2d>
 80018d6:	4602      	mov	r2, r0
 80018d8:	460b      	mov	r3, r1
 80018da:	4903      	ldr	r1, [pc, #12]	; (80018e8 <get_set_temperature+0x40>)
 80018dc:	e9c1 2300 	strd	r2, r3, [r1]
}
 80018e0:	bf00      	nop
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	40000400 	.word	0x40000400
 80018e8:	20000020 	.word	0x20000020

080018ec <beep_ms>:

/* Beep the buzzer for beep_time_ms */
void beep_ms(uint16_t beep_time_ms){
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	4603      	mov	r3, r0
 80018f4:	80fb      	strh	r3, [r7, #6]
	TIM2->CCR1 = 50;
 80018f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018fa:	2232      	movs	r2, #50	; 0x32
 80018fc:	635a      	str	r2, [r3, #52]	; 0x34
  	HAL_Delay(beep_time_ms);
 80018fe:	88fb      	ldrh	r3, [r7, #6]
 8001900:	4618      	mov	r0, r3
 8001902:	f002 fa05 	bl	8003d10 <HAL_Delay>
  	TIM2->CCR1 = 0;
 8001906:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800190a:	2200      	movs	r2, #0
 800190c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800190e:	bf00      	nop
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
	...

08001918 <check_beep>:

/* Create a beep is beep is requested */
void check_beep(){
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
	if(beep_requested){
 800191c:	4b05      	ldr	r3, [pc, #20]	; (8001934 <check_beep+0x1c>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d005      	beq.n	8001930 <check_beep+0x18>
		beep_ms(5);
 8001924:	2005      	movs	r0, #5
 8001926:	f7ff ffe1 	bl	80018ec <beep_ms>
		beep_requested = 0;
 800192a:	4b02      	ldr	r3, [pc, #8]	; (8001934 <check_beep+0x1c>)
 800192c:	2200      	movs	r2, #0
 800192e:	701a      	strb	r2, [r3, #0]
	}
}
 8001930:	bf00      	nop
 8001932:	bd80      	pop	{r7, pc}
 8001934:	200002ad 	.word	0x200002ad

08001938 <check_emergency_shutdown>:

/* Function to set state to EMERGENCY_SLEEP */
void check_emergency_shutdown(){
 8001938:	b5b0      	push	{r4, r5, r7, lr}
 800193a:	af00      	add	r7, sp, #0
	/* Function to set state to EMERGENCY_SLEEP if iron is in RUN state for longer than EMERGENCY_shutdown_time */
	if(!sensor_values.previous_state == RUN  && active_state == RUN){
 800193c:	4b28      	ldr	r3, [pc, #160]	; (80019e0 <check_emergency_shutdown+0xa8>)
 800193e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001942:	2b00      	cmp	r3, #0
 8001944:	d008      	beq.n	8001958 <check_emergency_shutdown+0x20>
 8001946:	4b27      	ldr	r3, [pc, #156]	; (80019e4 <check_emergency_shutdown+0xac>)
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d104      	bne.n	8001958 <check_emergency_shutdown+0x20>
		previous_millis_left_stand = HAL_GetTick();
 800194e:	f002 f9d3 	bl	8003cf8 <HAL_GetTick>
 8001952:	4603      	mov	r3, r0
 8001954:	4a24      	ldr	r2, [pc, #144]	; (80019e8 <check_emergency_shutdown+0xb0>)
 8001956:	6013      	str	r3, [r2, #0]
	}
	if ((sensor_values.in_stand == 0) && (HAL_GetTick() - previous_millis_left_stand >= EMERGENCY_shutdown_time) && active_state == RUN){
 8001958:	4b21      	ldr	r3, [pc, #132]	; (80019e0 <check_emergency_shutdown+0xa8>)
 800195a:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800195e:	f04f 0200 	mov.w	r2, #0
 8001962:	f04f 0300 	mov.w	r3, #0
 8001966:	f7ff f8d7 	bl	8000b18 <__aeabi_dcmpeq>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d013      	beq.n	8001998 <check_emergency_shutdown+0x60>
 8001970:	f002 f9c2 	bl	8003cf8 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	4b1c      	ldr	r3, [pc, #112]	; (80019e8 <check_emergency_shutdown+0xb0>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	1ad2      	subs	r2, r2, r3
 800197c:	4b1b      	ldr	r3, [pc, #108]	; (80019ec <check_emergency_shutdown+0xb4>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	429a      	cmp	r2, r3
 8001982:	d309      	bcc.n	8001998 <check_emergency_shutdown+0x60>
 8001984:	4b17      	ldr	r3, [pc, #92]	; (80019e4 <check_emergency_shutdown+0xac>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d105      	bne.n	8001998 <check_emergency_shutdown+0x60>
		active_state = EMERGENCY_SLEEP;
 800198c:	4b15      	ldr	r3, [pc, #84]	; (80019e4 <check_emergency_shutdown+0xac>)
 800198e:	2202      	movs	r2, #2
 8001990:	701a      	strb	r2, [r3, #0]
		beep_requested = 1;
 8001992:	4b17      	ldr	r3, [pc, #92]	; (80019f0 <check_emergency_shutdown+0xb8>)
 8001994:	2201      	movs	r2, #1
 8001996:	701a      	strb	r2, [r3, #0]
	}
	sensor_values.previous_state = active_state;
 8001998:	4b12      	ldr	r3, [pc, #72]	; (80019e4 <check_emergency_shutdown+0xac>)
 800199a:	781a      	ldrb	r2, [r3, #0]
 800199c:	4b10      	ldr	r3, [pc, #64]	; (80019e0 <check_emergency_shutdown+0xa8>)
 800199e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	/* Function to set state to EMERGENCY_SLEEP if iron is over 500 deg C */
	if((sensor_values.actual_temperature > EMERGENCY_shutdown_temperature) && (active_state == RUN)){
 80019a2:	4b0f      	ldr	r3, [pc, #60]	; (80019e0 <check_emergency_shutdown+0xa8>)
 80019a4:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80019a8:	4b12      	ldr	r3, [pc, #72]	; (80019f4 <check_emergency_shutdown+0xbc>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7fe fdd1 	bl	8000554 <__aeabi_ui2d>
 80019b2:	4602      	mov	r2, r0
 80019b4:	460b      	mov	r3, r1
 80019b6:	4620      	mov	r0, r4
 80019b8:	4629      	mov	r1, r5
 80019ba:	f7ff f8d5 	bl	8000b68 <__aeabi_dcmpgt>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d100      	bne.n	80019c6 <check_emergency_shutdown+0x8e>
		active_state = EMERGENCY_SLEEP;
		beep_requested = 1;
	}
}
 80019c4:	e009      	b.n	80019da <check_emergency_shutdown+0xa2>
	if((sensor_values.actual_temperature > EMERGENCY_shutdown_temperature) && (active_state == RUN)){
 80019c6:	4b07      	ldr	r3, [pc, #28]	; (80019e4 <check_emergency_shutdown+0xac>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d105      	bne.n	80019da <check_emergency_shutdown+0xa2>
		active_state = EMERGENCY_SLEEP;
 80019ce:	4b05      	ldr	r3, [pc, #20]	; (80019e4 <check_emergency_shutdown+0xac>)
 80019d0:	2202      	movs	r2, #2
 80019d2:	701a      	strb	r2, [r3, #0]
		beep_requested = 1;
 80019d4:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <check_emergency_shutdown+0xb8>)
 80019d6:	2201      	movs	r2, #1
 80019d8:	701a      	strb	r2, [r3, #0]
}
 80019da:	bf00      	nop
 80019dc:	bdb0      	pop	{r4, r5, r7, pc}
 80019de:	bf00      	nop
 80019e0:	20000020 	.word	0x20000020
 80019e4:	2000001c 	.word	0x2000001c
 80019e8:	200002c4 	.word	0x200002c4
 80019ec:	20000014 	.word	0x20000014
 80019f0:	200002ad 	.word	0x200002ad
 80019f4:	20000018 	.word	0x20000018

080019f8 <get_button_status>:

/* Function to toggle between RUN and HALTED at each press of the encoder button */
void get_button_status(){
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
	if ((sensor_values.button_pressed == 1) && (sensor_values.button_read == 0)){
 80019fc:	4b22      	ldr	r3, [pc, #136]	; (8001a88 <get_button_status+0x90>)
 80019fe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d127      	bne.n	8001a56 <get_button_status+0x5e>
 8001a06:	4b20      	ldr	r3, [pc, #128]	; (8001a88 <get_button_status+0x90>)
 8001a08:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d122      	bne.n	8001a56 <get_button_status+0x5e>
		sensor_values.button_read = 1;
 8001a10:	4b1d      	ldr	r3, [pc, #116]	; (8001a88 <get_button_status+0x90>)
 8001a12:	2201      	movs	r2, #1
 8001a14:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
		beep_requested = 1;
 8001a18:	4b1c      	ldr	r3, [pc, #112]	; (8001a8c <get_button_status+0x94>)
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	701a      	strb	r2, [r3, #0]
		// toggle between RUN and HALTED
		if (active_state == RUN){
 8001a1e:	4b1c      	ldr	r3, [pc, #112]	; (8001a90 <get_button_status+0x98>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d103      	bne.n	8001a2e <get_button_status+0x36>
			active_state = HALTED;
 8001a26:	4b1a      	ldr	r3, [pc, #104]	; (8001a90 <get_button_status+0x98>)
 8001a28:	2203      	movs	r2, #3
 8001a2a:	701a      	strb	r2, [r3, #0]
 8001a2c:	e00e      	b.n	8001a4c <get_button_status+0x54>
		}
		else if (active_state == HALTED){
 8001a2e:	4b18      	ldr	r3, [pc, #96]	; (8001a90 <get_button_status+0x98>)
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	2b03      	cmp	r3, #3
 8001a34:	d103      	bne.n	8001a3e <get_button_status+0x46>
			active_state = RUN;
 8001a36:	4b16      	ldr	r3, [pc, #88]	; (8001a90 <get_button_status+0x98>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	701a      	strb	r2, [r3, #0]
 8001a3c:	e006      	b.n	8001a4c <get_button_status+0x54>
		}
		else if (active_state == EMERGENCY_SLEEP){
 8001a3e:	4b14      	ldr	r3, [pc, #80]	; (8001a90 <get_button_status+0x98>)
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d102      	bne.n	8001a4c <get_button_status+0x54>
			active_state = RUN;
 8001a46:	4b12      	ldr	r3, [pc, #72]	; (8001a90 <get_button_status+0x98>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	701a      	strb	r2, [r3, #0]
		}
		previous_millis_heating_halted_update = HAL_GetTick();
 8001a4c:	f002 f954 	bl	8003cf8 <HAL_GetTick>
 8001a50:	4603      	mov	r3, r0
 8001a52:	4a10      	ldr	r2, [pc, #64]	; (8001a94 <get_button_status+0x9c>)
 8001a54:	6013      	str	r3, [r2, #0]
	}
	if ((sensor_values.button_read == 1) && (HAL_GetTick()-previous_millis_heating_halted_update >= interval_heating_halted_update)){
 8001a56:	4b0c      	ldr	r3, [pc, #48]	; (8001a88 <get_button_status+0x90>)
 8001a58:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d111      	bne.n	8001a84 <get_button_status+0x8c>
 8001a60:	f002 f94a 	bl	8003cf8 <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	4b0b      	ldr	r3, [pc, #44]	; (8001a94 <get_button_status+0x9c>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	1ad2      	subs	r2, r2, r3
 8001a6c:	4b0a      	ldr	r3, [pc, #40]	; (8001a98 <get_button_status+0xa0>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d307      	bcc.n	8001a84 <get_button_status+0x8c>
		sensor_values.button_pressed = 0;
 8001a74:	4b04      	ldr	r3, [pc, #16]	; (8001a88 <get_button_status+0x90>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		sensor_values.button_read = 0;
 8001a7c:	4b02      	ldr	r3, [pc, #8]	; (8001a88 <get_button_status+0x90>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	}
}
 8001a84:	bf00      	nop
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	20000020 	.word	0x20000020
 8001a8c:	200002ad 	.word	0x200002ad
 8001a90:	2000001c 	.word	0x2000001c
 8001a94:	200002c0 	.word	0x200002c0
 8001a98:	20000010 	.word	0x20000010

08001a9c <get_stand_status>:

/* Get the status of handle in/on stand to trigger SLEEP */
void get_stand_status(){
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
	uint8_t stand_status;
	if(HAL_GPIO_ReadPin (GPIOA, STAND_INP_Pin) == 0){
 8001aa2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001aa6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aaa:	f005 fb11 	bl	80070d0 <HAL_GPIO_ReadPin>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d102      	bne.n	8001aba <get_stand_status+0x1e>
		stand_status = 1;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	71fb      	strb	r3, [r7, #7]
 8001ab8:	e001      	b.n	8001abe <get_stand_status+0x22>
	}
	else{
		stand_status = 0;
 8001aba:	2300      	movs	r3, #0
 8001abc:	71fb      	strb	r3, [r7, #7]
	}
	sensor_values.in_stand = Moving_Average_Compute(stand_status, &stand_sense_filterStruct); /* Moving average filter */
 8001abe:	79fb      	ldrb	r3, [r7, #7]
 8001ac0:	4917      	ldr	r1, [pc, #92]	; (8001b20 <get_stand_status+0x84>)
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f001 f830 	bl	8002b28 <Moving_Average_Compute>
 8001ac8:	eeb0 7a40 	vmov.f32	s14, s0
 8001acc:	eef0 7a60 	vmov.f32	s15, s1
 8001ad0:	4b14      	ldr	r3, [pc, #80]	; (8001b24 <get_stand_status+0x88>)
 8001ad2:	ed83 7b08 	vstr	d7, [r3, #32]

	/* If handle is in stand set state to SLEEP */
	if(sensor_values.in_stand > 0.5){
 8001ad6:	4b13      	ldr	r3, [pc, #76]	; (8001b24 <get_stand_status+0x88>)
 8001ad8:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001adc:	f04f 0200 	mov.w	r2, #0
 8001ae0:	4b11      	ldr	r3, [pc, #68]	; (8001b28 <get_stand_status+0x8c>)
 8001ae2:	f7ff f841 	bl	8000b68 <__aeabi_dcmpgt>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d002      	beq.n	8001af2 <get_stand_status+0x56>
		active_state = SLEEP;
 8001aec:	4b0f      	ldr	r3, [pc, #60]	; (8001b2c <get_stand_status+0x90>)
 8001aee:	2201      	movs	r2, #1
 8001af0:	701a      	strb	r2, [r3, #0]
	}

	/* If handle is NOT in stand and state is SLEEP, change state to RUN */
	if((sensor_values.in_stand < 0.5) && (active_state == SLEEP)){
 8001af2:	4b0c      	ldr	r3, [pc, #48]	; (8001b24 <get_stand_status+0x88>)
 8001af4:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001af8:	f04f 0200 	mov.w	r2, #0
 8001afc:	4b0a      	ldr	r3, [pc, #40]	; (8001b28 <get_stand_status+0x8c>)
 8001afe:	f7ff f815 	bl	8000b2c <__aeabi_dcmplt>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d100      	bne.n	8001b0a <get_stand_status+0x6e>
		active_state = RUN;
	}
}
 8001b08:	e006      	b.n	8001b18 <get_stand_status+0x7c>
	if((sensor_values.in_stand < 0.5) && (active_state == SLEEP)){
 8001b0a:	4b08      	ldr	r3, [pc, #32]	; (8001b2c <get_stand_status+0x90>)
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d102      	bne.n	8001b18 <get_stand_status+0x7c>
		active_state = RUN;
 8001b12:	4b06      	ldr	r3, [pc, #24]	; (8001b2c <get_stand_status+0x90>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	701a      	strb	r2, [r3, #0]
}
 8001b18:	bf00      	nop
 8001b1a:	3708      	adds	r7, #8
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	20000ff4 	.word	0x20000ff4
 8001b24:	20000020 	.word	0x20000020
 8001b28:	3fe00000 	.word	0x3fe00000
 8001b2c:	2000001c 	.word	0x2000001c

08001b30 <get_handle_type>:

/* Automatically detect handle type, T210 or T245 based on HANDLE_DETECTION_Pin, which is connected to BLUE for T210.*/
void get_handle_type(){
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
	uint8_t handle_status;
	if(HAL_GPIO_ReadPin (GPIOA, HANDLE_INP_Pin) == 0){
 8001b36:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b3e:	f005 fac7 	bl	80070d0 <HAL_GPIO_ReadPin>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d102      	bne.n	8001b4e <get_handle_type+0x1e>
		handle_status = 1;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	71fb      	strb	r3, [r7, #7]
 8001b4c:	e001      	b.n	8001b52 <get_handle_type+0x22>
	}
	else{
		handle_status = 0;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	71fb      	strb	r3, [r7, #7]
	}
	sensor_values.handle_sense = Moving_Average_Compute(handle_status, &handle_sense_filterStruct); /* Moving average filter */
 8001b52:	79fb      	ldrb	r3, [r7, #7]
 8001b54:	4931      	ldr	r1, [pc, #196]	; (8001c1c <get_handle_type+0xec>)
 8001b56:	4618      	mov	r0, r3
 8001b58:	f000 ffe6 	bl	8002b28 <Moving_Average_Compute>
 8001b5c:	eeb0 7a40 	vmov.f32	s14, s0
 8001b60:	eef0 7a60 	vmov.f32	s15, s1
 8001b64:	4b2e      	ldr	r3, [pc, #184]	; (8001c20 <get_handle_type+0xf0>)
 8001b66:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28

	/* If the handle_sense is high -> T210 handle is detected */
	if(sensor_values.handle_sense > 0.5){
 8001b6a:	4b2d      	ldr	r3, [pc, #180]	; (8001c20 <get_handle_type+0xf0>)
 8001b6c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001b70:	f04f 0200 	mov.w	r2, #0
 8001b74:	4b2b      	ldr	r3, [pc, #172]	; (8001c24 <get_handle_type+0xf4>)
 8001b76:	f7fe fff7 	bl	8000b68 <__aeabi_dcmpgt>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d018      	beq.n	8001bb2 <get_handle_type+0x82>
		handle = T210;
 8001b80:	4b29      	ldr	r3, [pc, #164]	; (8001c28 <get_handle_type+0xf8>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	701a      	strb	r2, [r3, #0]
		max_power_watt = 60; //60W
 8001b86:	4b29      	ldr	r3, [pc, #164]	; (8001c2c <get_handle_type+0xfc>)
 8001b88:	4a29      	ldr	r2, [pc, #164]	; (8001c30 <get_handle_type+0x100>)
 8001b8a:	601a      	str	r2, [r3, #0]
		Kp = 20;
 8001b8c:	4929      	ldr	r1, [pc, #164]	; (8001c34 <get_handle_type+0x104>)
 8001b8e:	f04f 0200 	mov.w	r2, #0
 8001b92:	4b29      	ldr	r3, [pc, #164]	; (8001c38 <get_handle_type+0x108>)
 8001b94:	e9c1 2300 	strd	r2, r3, [r1]
		Ki = 60;
 8001b98:	4928      	ldr	r1, [pc, #160]	; (8001c3c <get_handle_type+0x10c>)
 8001b9a:	f04f 0200 	mov.w	r2, #0
 8001b9e:	4b28      	ldr	r3, [pc, #160]	; (8001c40 <get_handle_type+0x110>)
 8001ba0:	e9c1 2300 	strd	r2, r3, [r1]
		Kd = 0.5;
 8001ba4:	4927      	ldr	r1, [pc, #156]	; (8001c44 <get_handle_type+0x114>)
 8001ba6:	f04f 0200 	mov.w	r2, #0
 8001baa:	4b1e      	ldr	r3, [pc, #120]	; (8001c24 <get_handle_type+0xf4>)
 8001bac:	e9c1 2300 	strd	r2, r3, [r1]
 8001bb0:	e017      	b.n	8001be2 <get_handle_type+0xb2>
	}
	/* If the handle_sense is low -> T245 Handle */
	else{
		handle = T245;
 8001bb2:	4b1d      	ldr	r3, [pc, #116]	; (8001c28 <get_handle_type+0xf8>)
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	701a      	strb	r2, [r3, #0]
		max_power_watt = 120; //120W
 8001bb8:	4b1c      	ldr	r3, [pc, #112]	; (8001c2c <get_handle_type+0xfc>)
 8001bba:	4a23      	ldr	r2, [pc, #140]	; (8001c48 <get_handle_type+0x118>)
 8001bbc:	601a      	str	r2, [r3, #0]
		Kp = 30;
 8001bbe:	491d      	ldr	r1, [pc, #116]	; (8001c34 <get_handle_type+0x104>)
 8001bc0:	f04f 0200 	mov.w	r2, #0
 8001bc4:	4b21      	ldr	r3, [pc, #132]	; (8001c4c <get_handle_type+0x11c>)
 8001bc6:	e9c1 2300 	strd	r2, r3, [r1]
		Ki = 60;
 8001bca:	491c      	ldr	r1, [pc, #112]	; (8001c3c <get_handle_type+0x10c>)
 8001bcc:	f04f 0200 	mov.w	r2, #0
 8001bd0:	4b1b      	ldr	r3, [pc, #108]	; (8001c40 <get_handle_type+0x110>)
 8001bd2:	e9c1 2300 	strd	r2, r3, [r1]
		Kd = 1;
 8001bd6:	491b      	ldr	r1, [pc, #108]	; (8001c44 <get_handle_type+0x114>)
 8001bd8:	f04f 0200 	mov.w	r2, #0
 8001bdc:	4b1c      	ldr	r3, [pc, #112]	; (8001c50 <get_handle_type+0x120>)
 8001bde:	e9c1 2300 	strd	r2, r3, [r1]
	}
	PID_SetTunings(&TPID, Kp, Ki, Kd); // Update PID parameters based on handle type
 8001be2:	4b14      	ldr	r3, [pc, #80]	; (8001c34 <get_handle_type+0x104>)
 8001be4:	ed93 7b00 	vldr	d7, [r3]
 8001be8:	4b14      	ldr	r3, [pc, #80]	; (8001c3c <get_handle_type+0x10c>)
 8001bea:	ed93 6b00 	vldr	d6, [r3]
 8001bee:	4b15      	ldr	r3, [pc, #84]	; (8001c44 <get_handle_type+0x114>)
 8001bf0:	ed93 5b00 	vldr	d5, [r3]
 8001bf4:	eeb0 2a45 	vmov.f32	s4, s10
 8001bf8:	eef0 2a65 	vmov.f32	s5, s11
 8001bfc:	eeb0 1a46 	vmov.f32	s2, s12
 8001c00:	eef0 1a66 	vmov.f32	s3, s13
 8001c04:	eeb0 0a47 	vmov.f32	s0, s14
 8001c08:	eef0 0a67 	vmov.f32	s1, s15
 8001c0c:	4811      	ldr	r0, [pc, #68]	; (8001c54 <get_handle_type+0x124>)
 8001c0e:	f001 fa5e 	bl	80030ce <PID_SetTunings>
}
 8001c12:	bf00      	nop
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	20001320 	.word	0x20001320
 8001c20:	20000020 	.word	0x20000020
 8001c24:	3fe00000 	.word	0x3fe00000
 8001c28:	200002ac 	.word	0x200002ac
 8001c2c:	20000338 	.word	0x20000338
 8001c30:	42700000 	.word	0x42700000
 8001c34:	200002f8 	.word	0x200002f8
 8001c38:	40340000 	.word	0x40340000
 8001c3c:	20000300 	.word	0x20000300
 8001c40:	404e0000 	.word	0x404e0000
 8001c44:	20000308 	.word	0x20000308
 8001c48:	42f00000 	.word	0x42f00000
 8001c4c:	403e0000 	.word	0x403e0000
 8001c50:	3ff00000 	.word	0x3ff00000
 8001c54:	200019b0 	.word	0x200019b0

08001c58 <HAL_GPIO_EXTI_Callback>:
//void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
//    //HAL_GPIO_TogglePin(GPIOF, DEBUG_SIGNAL_A_Pin);
//}

/* Interrupts when encoder button is pressed */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	4603      	mov	r3, r0
 8001c60:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == ENC_BUTTON_Pin && !sensor_values.button_pressed){ // If The INT Source Is EXTI Line9 (A9 Pin)
 8001c62:	88fb      	ldrh	r3, [r7, #6]
 8001c64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c68:	d108      	bne.n	8001c7c <HAL_GPIO_EXTI_Callback+0x24>
 8001c6a:	4b07      	ldr	r3, [pc, #28]	; (8001c88 <HAL_GPIO_EXTI_Callback+0x30>)
 8001c6c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d103      	bne.n	8001c7c <HAL_GPIO_EXTI_Callback+0x24>
    	sensor_values.button_pressed = 1;
 8001c74:	4b04      	ldr	r3, [pc, #16]	; (8001c88 <HAL_GPIO_EXTI_Callback+0x30>)
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    }
}
 8001c7c:	bf00      	nop
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr
 8001c88:	20000020 	.word	0x20000020

08001c8c <HAL_TIM_IC_CaptureCallback>:

/* Interrupts at every encoder increment */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	7f1b      	ldrb	r3, [r3, #28]
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d102      	bne.n	8001ca2 <HAL_TIM_IC_CaptureCallback+0x16>
		beep_requested = 1;
 8001c9c:	4b04      	ldr	r3, [pc, #16]	; (8001cb0 <HAL_TIM_IC_CaptureCallback+0x24>)
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	701a      	strb	r2, [r3, #0]
	}
}
 8001ca2:	bf00      	nop
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	200002ad 	.word	0x200002ad

08001cb4 <set_heater_duty>:

/* Sets the duty cycle of timer controlling the heater */
void set_heater_duty(uint16_t dutycycle){
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	4603      	mov	r3, r0
 8001cbc:	80fb      	strh	r3, [r7, #6]
	TIM17->CCR1 = dutycycle;
 8001cbe:	4a04      	ldr	r2, [pc, #16]	; (8001cd0 <set_heater_duty+0x1c>)
 8001cc0:	88fb      	ldrh	r3, [r7, #6]
 8001cc2:	6353      	str	r3, [r2, #52]	; 0x34
}
 8001cc4:	bf00      	nop
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr
 8001cd0:	40014800 	.word	0x40014800
 8001cd4:	00000000 	.word	0x00000000

08001cd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cdc:	ed2d 8b08 	vpush	{d8-d11}
 8001ce0:	b090      	sub	sp, #64	; 0x40
 8001ce2:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ce4:	f001 ffa3 	bl	8003c2e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ce8:	f000 faae 	bl	8002248 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cec:	f000 fe4a 	bl	8002984 <MX_GPIO_Init>
  MX_DMA_Init();
 8001cf0:	f000 fe1e 	bl	8002930 <MX_DMA_Init>
  MX_TIM2_Init();
 8001cf4:	f000 fc62 	bl	80025bc <MX_TIM2_Init>
  MX_SPI1_Init();
 8001cf8:	f000 fc22 	bl	8002540 <MX_SPI1_Init>
  MX_ADC1_Init();
 8001cfc:	f000 faf0 	bl	80022e0 <MX_ADC1_Init>
  MX_TIM17_Init();
 8001d00:	f000 fd50 	bl	80027a4 <MX_TIM17_Init>
  MX_USART2_UART_Init();
 8001d04:	f000 fdc8 	bl	8002898 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001d08:	f000 fcce 	bl	80026a8 <MX_TIM3_Init>
  MX_TIM16_Init();
 8001d0c:	f000 fd22 	bl	8002754 <MX_TIM16_Init>
  MX_I2C1_Init();
 8001d10:	f000 fbd6 	bl	80024c0 <MX_I2C1_Init>
  MX_CRC_Init();
 8001d14:	f000 fbb2 	bl	800247c <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8001d18:	213c      	movs	r1, #60	; 0x3c
 8001d1a:	48a7      	ldr	r0, [pc, #668]	; (8001fb8 <main+0x2e0>)
 8001d1c:	f006 fe28 	bl	8008970 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8001d20:	2100      	movs	r1, #0
 8001d22:	48a6      	ldr	r0, [pc, #664]	; (8001fbc <main+0x2e4>)
 8001d24:	f006 fc7e 	bl	8008624 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001d28:	2100      	movs	r1, #0
 8001d2a:	48a5      	ldr	r0, [pc, #660]	; (8001fc0 <main+0x2e8>)
 8001d2c:	f006 fc7a 	bl	8008624 <HAL_TIM_PWM_Start>
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001d30:	217f      	movs	r1, #127	; 0x7f
 8001d32:	48a4      	ldr	r0, [pc, #656]	; (8001fc4 <main+0x2ec>)
 8001d34:	f003 ff74 	bl	8005c20 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_buffer, ADC_BUF_LEN);	//Start ADC DMA
 8001d38:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001d3c:	49a2      	ldr	r1, [pc, #648]	; (8001fc8 <main+0x2f0>)
 8001d3e:	48a1      	ldr	r0, [pc, #644]	; (8001fc4 <main+0x2ec>)
 8001d40:	f002 fcd4 	bl	80046ec <HAL_ADC_Start_DMA>

	Moving_Average_Init(&actual_temperature_filter_struct,5);
 8001d44:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8001d48:	48a0      	ldr	r0, [pc, #640]	; (8001fcc <main+0x2f4>)
 8001d4a:	f000 febc 	bl	8002ac6 <Moving_Average_Init>
	Moving_Average_Init(&ambient_temperature_filter_struct,200);
 8001d4e:	ed9f 0aa0 	vldr	s0, [pc, #640]	; 8001fd0 <main+0x2f8>
 8001d52:	48a0      	ldr	r0, [pc, #640]	; (8001fd4 <main+0x2fc>)
 8001d54:	f000 feb7 	bl	8002ac6 <Moving_Average_Init>
	Moving_Average_Init(&input_voltage_filterStruct,200);
 8001d58:	ed9f 0a9d 	vldr	s0, [pc, #628]	; 8001fd0 <main+0x2f8>
 8001d5c:	489e      	ldr	r0, [pc, #632]	; (8001fd8 <main+0x300>)
 8001d5e:	f000 feb2 	bl	8002ac6 <Moving_Average_Init>
	Moving_Average_Init(&stand_sense_filterStruct,200);
 8001d62:	ed9f 0a9b 	vldr	s0, [pc, #620]	; 8001fd0 <main+0x2f8>
 8001d66:	489d      	ldr	r0, [pc, #628]	; (8001fdc <main+0x304>)
 8001d68:	f000 fead 	bl	8002ac6 <Moving_Average_Init>
	Moving_Average_Init(&handle_sense_filterStruct,200);
 8001d6c:	ed9f 0a98 	vldr	s0, [pc, #608]	; 8001fd0 <main+0x2f8>
 8001d70:	489b      	ldr	r0, [pc, #620]	; (8001fe0 <main+0x308>)
 8001d72:	f000 fea8 	bl	8002ac6 <Moving_Average_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	Flash_Read_Data(FLASH_USER_FIRST_START_ADDR, flash_read_data_array, 5);
 8001d76:	2205      	movs	r2, #5
 8001d78:	499a      	ldr	r1, [pc, #616]	; (8001fe4 <main+0x30c>)
 8001d7a:	489b      	ldr	r0, [pc, #620]	; (8001fe8 <main+0x310>)
 8001d7c:	f7ff f938 	bl	8000ff0 <Flash_Read_Data>
	Flash_Write_Data(FLASH_USER_LAST_POWER_ADDR, (uint32_t *)flash_write_data_array, 1);
 8001d80:	2201      	movs	r2, #1
 8001d82:	499a      	ldr	r1, [pc, #616]	; (8001fec <main+0x314>)
 8001d84:	489a      	ldr	r0, [pc, #616]	; (8001ff0 <main+0x318>)
 8001d86:	f7ff f951 	bl	800102c <Flash_Write_Data>
	// Calculate the CRC of flash - Not used at the moment
	//crc = HAL_CRC_Accumulate(&hcrc, Flash_Rx_Data, 5);

	/* Init and fill filter structures with initial values */
	set_heater_duty(0);
 8001d8a:	2000      	movs	r0, #0
 8001d8c:	f7ff ff92 	bl	8001cb4 <set_heater_duty>
	for (int i = 0; i<200;i++){
 8001d90:	2300      	movs	r3, #0
 8001d92:	607b      	str	r3, [r7, #4]
 8001d94:	e00c      	b.n	8001db0 <main+0xd8>
		get_bus_voltage();
 8001d96:	f7ff f9f7 	bl	8001188 <get_bus_voltage>
		get_ambient_temp();
 8001d9a:	f7ff fb25 	bl	80013e8 <get_ambient_temp>
		get_actual_temperature();
 8001d9e:	f7ff fa1b 	bl	80011d8 <get_actual_temperature>
		get_handle_type();
 8001da2:	f7ff fec5 	bl	8001b30 <get_handle_type>
		get_stand_status();
 8001da6:	f7ff fe79 	bl	8001a9c <get_stand_status>
	for (int i = 0; i<200;i++){
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	3301      	adds	r3, #1
 8001dae:	607b      	str	r3, [r7, #4]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2bc7      	cmp	r3, #199	; 0xc7
 8001db4:	ddef      	ble.n	8001d96 <main+0xbe>
	}

	/* Start-up beep */
	beep_ms(10);
 8001db6:	200a      	movs	r0, #10
 8001db8:	f7ff fd98 	bl	80018ec <beep_ms>
	HAL_Delay(100);
 8001dbc:	2064      	movs	r0, #100	; 0x64
 8001dbe:	f001 ffa7 	bl	8003d10 <HAL_Delay>
	beep_ms(10);
 8001dc2:	200a      	movs	r0, #10
 8001dc4:	f7ff fd92 	bl	80018ec <beep_ms>

	/* Initiate OLED display */
	init_OLED();
 8001dc8:	f7ff fb70 	bl	80014ac <init_OLED>

	/* If button is pressed during startup - Show SETTINGS and allow to release button. */
	if (HAL_GPIO_ReadPin (GPIOA, ENC_BUTTON_Pin) == 0){
 8001dcc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001dd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dd4:	f005 f97c 	bl	80070d0 <HAL_GPIO_ReadPin>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d169      	bne.n	8001eb2 <main+0x1da>
		Paint_DrawString_EN(0, 0, " SETTINGS ", &Font16, 0x00, 0xff);
 8001dde:	23ff      	movs	r3, #255	; 0xff
 8001de0:	9301      	str	r3, [sp, #4]
 8001de2:	2300      	movs	r3, #0
 8001de4:	9300      	str	r3, [sp, #0]
 8001de6:	4b83      	ldr	r3, [pc, #524]	; (8001ff4 <main+0x31c>)
 8001de8:	4a83      	ldr	r2, [pc, #524]	; (8001ff8 <main+0x320>)
 8001dea:	2100      	movs	r1, #0
 8001dec:	2000      	movs	r0, #0
 8001dee:	f00a fb45 	bl	800c47c <Paint_DrawString_EN>
		Paint_DrawLine(0, 16, 127, 16, WHITE , 2, LINE_STYLE_SOLID);
 8001df2:	2300      	movs	r3, #0
 8001df4:	9302      	str	r3, [sp, #8]
 8001df6:	2302      	movs	r3, #2
 8001df8:	9301      	str	r3, [sp, #4]
 8001dfa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001dfe:	9300      	str	r3, [sp, #0]
 8001e00:	2310      	movs	r3, #16
 8001e02:	227f      	movs	r2, #127	; 0x7f
 8001e04:	2110      	movs	r1, #16
 8001e06:	2000      	movs	r0, #0
 8001e08:	f009 ffc4 	bl	800bd94 <Paint_DrawLine>
		OLED_1in5_Display(black_image);
 8001e0c:	4b7b      	ldr	r3, [pc, #492]	; (8001ffc <main+0x324>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f00a fcb6 	bl	800c782 <OLED_1in5_Display>
		Paint_Clear(BLACK);
 8001e16:	2000      	movs	r0, #0
 8001e18:	f009 fe66 	bl	800bae8 <Paint_Clear>
		HAL_Delay(1000);
 8001e1c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e20:	f001 ff76 	bl	8003d10 <HAL_Delay>

		while(HAL_GPIO_ReadPin (GPIOA, ENC_BUTTON_Pin) == 1){
 8001e24:	e03c      	b.n	8001ea0 <main+0x1c8>
			Paint_DrawString_EN(0, 0, " SETTINGS ", &Font16, 0x00, 0xff);
 8001e26:	23ff      	movs	r3, #255	; 0xff
 8001e28:	9301      	str	r3, [sp, #4]
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	9300      	str	r3, [sp, #0]
 8001e2e:	4b71      	ldr	r3, [pc, #452]	; (8001ff4 <main+0x31c>)
 8001e30:	4a71      	ldr	r2, [pc, #452]	; (8001ff8 <main+0x320>)
 8001e32:	2100      	movs	r1, #0
 8001e34:	2000      	movs	r0, #0
 8001e36:	f00a fb21 	bl	800c47c <Paint_DrawString_EN>
			Paint_DrawLine(0, 16, 127, 16, WHITE , 2, LINE_STYLE_SOLID);
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	9302      	str	r3, [sp, #8]
 8001e3e:	2302      	movs	r3, #2
 8001e40:	9301      	str	r3, [sp, #4]
 8001e42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e46:	9300      	str	r3, [sp, #0]
 8001e48:	2310      	movs	r3, #16
 8001e4a:	227f      	movs	r2, #127	; 0x7f
 8001e4c:	2110      	movs	r1, #16
 8001e4e:	2000      	movs	r0, #0
 8001e50:	f009 ffa0 	bl	800bd94 <Paint_DrawLine>

			Paint_DrawString_EN(3, 20, "Coming soon...", &Font12, 0x00, 0xff);
 8001e54:	23ff      	movs	r3, #255	; 0xff
 8001e56:	9301      	str	r3, [sp, #4]
 8001e58:	2300      	movs	r3, #0
 8001e5a:	9300      	str	r3, [sp, #0]
 8001e5c:	4b68      	ldr	r3, [pc, #416]	; (8002000 <main+0x328>)
 8001e5e:	4a69      	ldr	r2, [pc, #420]	; (8002004 <main+0x32c>)
 8001e60:	2114      	movs	r1, #20
 8001e62:	2003      	movs	r0, #3
 8001e64:	f00a fb0a 	bl	800c47c <Paint_DrawString_EN>
			Paint_DrawString_EN(0, 110, "Version: ", &Font12, 0x00, 0xff);
 8001e68:	23ff      	movs	r3, #255	; 0xff
 8001e6a:	9301      	str	r3, [sp, #4]
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	9300      	str	r3, [sp, #0]
 8001e70:	4b63      	ldr	r3, [pc, #396]	; (8002000 <main+0x328>)
 8001e72:	4a65      	ldr	r2, [pc, #404]	; (8002008 <main+0x330>)
 8001e74:	216e      	movs	r1, #110	; 0x6e
 8001e76:	2000      	movs	r0, #0
 8001e78:	f00a fb00 	bl	800c47c <Paint_DrawString_EN>
			Paint_DrawString_EN(60, 110, version, &Font12, 0x00, 0xff);
 8001e7c:	23ff      	movs	r3, #255	; 0xff
 8001e7e:	9301      	str	r3, [sp, #4]
 8001e80:	2300      	movs	r3, #0
 8001e82:	9300      	str	r3, [sp, #0]
 8001e84:	4b5e      	ldr	r3, [pc, #376]	; (8002000 <main+0x328>)
 8001e86:	4a61      	ldr	r2, [pc, #388]	; (800200c <main+0x334>)
 8001e88:	216e      	movs	r1, #110	; 0x6e
 8001e8a:	203c      	movs	r0, #60	; 0x3c
 8001e8c:	f00a faf6 	bl	800c47c <Paint_DrawString_EN>

			OLED_1in5_Display(black_image);
 8001e90:	4b5a      	ldr	r3, [pc, #360]	; (8001ffc <main+0x324>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f00a fc74 	bl	800c782 <OLED_1in5_Display>
			Paint_Clear(BLACK);
 8001e9a:	2000      	movs	r0, #0
 8001e9c:	f009 fe24 	bl	800bae8 <Paint_Clear>
		while(HAL_GPIO_ReadPin (GPIOA, ENC_BUTTON_Pin) == 1){
 8001ea0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ea4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ea8:	f005 f912 	bl	80070d0 <HAL_GPIO_ReadPin>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d0b9      	beq.n	8001e26 <main+0x14e>
		}
	}

	/* Set initial encoder timer value */
	TIM3->CNT = 330;
 8001eb2:	4b57      	ldr	r3, [pc, #348]	; (8002010 <main+0x338>)
 8001eb4:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8001eb8:	625a      	str	r2, [r3, #36]	; 0x24

	/* Startup beep */
	beep_ms(10);
 8001eba:	200a      	movs	r0, #10
 8001ebc:	f7ff fd16 	bl	80018ec <beep_ms>

	/* Initiate PID controller */
	PID(&TPID, &sensor_values.actual_temperature, &PID_output, &PID_setpoint, Kp, Ki, Kd, _PID_P_ON_E, _PID_CD_DIRECT);
 8001ec0:	4b54      	ldr	r3, [pc, #336]	; (8002014 <main+0x33c>)
 8001ec2:	ed93 7b00 	vldr	d7, [r3]
 8001ec6:	4b54      	ldr	r3, [pc, #336]	; (8002018 <main+0x340>)
 8001ec8:	ed93 6b00 	vldr	d6, [r3]
 8001ecc:	4b53      	ldr	r3, [pc, #332]	; (800201c <main+0x344>)
 8001ece:	ed93 5b00 	vldr	d5, [r3]
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	9301      	str	r3, [sp, #4]
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	9300      	str	r3, [sp, #0]
 8001eda:	eeb0 2a45 	vmov.f32	s4, s10
 8001ede:	eef0 2a65 	vmov.f32	s5, s11
 8001ee2:	eeb0 1a46 	vmov.f32	s2, s12
 8001ee6:	eef0 1a66 	vmov.f32	s3, s13
 8001eea:	eeb0 0a47 	vmov.f32	s0, s14
 8001eee:	eef0 0a67 	vmov.f32	s1, s15
 8001ef2:	4b4b      	ldr	r3, [pc, #300]	; (8002020 <main+0x348>)
 8001ef4:	4a4b      	ldr	r2, [pc, #300]	; (8002024 <main+0x34c>)
 8001ef6:	494c      	ldr	r1, [pc, #304]	; (8002028 <main+0x350>)
 8001ef8:	484c      	ldr	r0, [pc, #304]	; (800202c <main+0x354>)
 8001efa:	f000 fead 	bl	8002c58 <PID>
	PID_SetMode(&TPID, _PID_MODE_AUTOMATIC);
 8001efe:	2101      	movs	r1, #1
 8001f00:	484a      	ldr	r0, [pc, #296]	; (800202c <main+0x354>)
 8001f02:	f001 f838 	bl	8002f76 <PID_SetMode>
	PID_SetSampleTime(&TPID, 50);
 8001f06:	2132      	movs	r1, #50	; 0x32
 8001f08:	4848      	ldr	r0, [pc, #288]	; (800202c <main+0x354>)
 8001f0a:	f001 f9e3 	bl	80032d4 <PID_SetSampleTime>
	PID_SetOutputLimits(&TPID, 0, 1000); 	// Set max and min output limit
 8001f0e:	ed9f 1b22 	vldr	d1, [pc, #136]	; 8001f98 <main+0x2c0>
 8001f12:	ed9f 0b23 	vldr	d0, [pc, #140]	; 8001fa0 <main+0x2c8>
 8001f16:	4845      	ldr	r0, [pc, #276]	; (800202c <main+0x354>)
 8001f18:	f001 f84b 	bl	8002fb2 <PID_SetOutputLimits>
	PID_SetILimits(&TPID, -200, 200); 		// Set max and min I limit
 8001f1c:	ed9f 1b22 	vldr	d1, [pc, #136]	; 8001fa8 <main+0x2d0>
 8001f20:	ed9f 0b23 	vldr	d0, [pc, #140]	; 8001fb0 <main+0x2d8>
 8001f24:	4841      	ldr	r0, [pc, #260]	; (800202c <main+0x354>)
 8001f26:	f001 f8b2 	bl	800308e <PID_SetILimits>

	while (1){
		get_stand_status();
 8001f2a:	f7ff fdb7 	bl	8001a9c <get_stand_status>
		get_bus_voltage();
 8001f2e:	f7ff f92b 	bl	8001188 <get_bus_voltage>
		get_handle_type();
 8001f32:	f7ff fdfd 	bl	8001b30 <get_handle_type>
		get_button_status();
 8001f36:	f7ff fd5f 	bl	80019f8 <get_button_status>
		get_set_temperature();
 8001f3a:	f7ff fcb5 	bl	80018a8 <get_set_temperature>
		check_beep();
 8001f3e:	f7ff fceb 	bl	8001918 <check_beep>
		check_emergency_shutdown();
 8001f42:	f7ff fcf9 	bl	8001938 <check_emergency_shutdown>

		/* switch */
		switch (active_state) {
 8001f46:	4b3a      	ldr	r3, [pc, #232]	; (8002030 <main+0x358>)
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	2b03      	cmp	r3, #3
 8001f4c:	d87c      	bhi.n	8002048 <main+0x370>
 8001f4e:	a201      	add	r2, pc, #4	; (adr r2, 8001f54 <main+0x27c>)
 8001f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f54:	08001f75 	.word	0x08001f75
 8001f58:	08001f83 	.word	0x08001f83
 8001f5c:	08001f65 	.word	0x08001f65
 8001f60:	08002039 	.word	0x08002039
			case EMERGENCY_SLEEP: {
				PID_setpoint = 0;
 8001f64:	492e      	ldr	r1, [pc, #184]	; (8002020 <main+0x348>)
 8001f66:	f04f 0200 	mov.w	r2, #0
 8001f6a:	f04f 0300 	mov.w	r3, #0
 8001f6e:	e9c1 2300 	strd	r2, r3, [r1]
				break;
 8001f72:	e069      	b.n	8002048 <main+0x370>
			}
			case RUN: {
				PID_setpoint = sensor_values.set_temperature;
 8001f74:	4b2f      	ldr	r3, [pc, #188]	; (8002034 <main+0x35c>)
 8001f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f7a:	4929      	ldr	r1, [pc, #164]	; (8002020 <main+0x348>)
 8001f7c:	e9c1 2300 	strd	r2, r3, [r1]
				break;
 8001f80:	e062      	b.n	8002048 <main+0x370>
			}
			case SLEEP: {
				PID_setpoint = 0;
 8001f82:	4927      	ldr	r1, [pc, #156]	; (8002020 <main+0x348>)
 8001f84:	f04f 0200 	mov.w	r2, #0
 8001f88:	f04f 0300 	mov.w	r3, #0
 8001f8c:	e9c1 2300 	strd	r2, r3, [r1]
				break;
 8001f90:	e05a      	b.n	8002048 <main+0x370>
 8001f92:	bf00      	nop
 8001f94:	f3af 8000 	nop.w
 8001f98:	00000000 	.word	0x00000000
 8001f9c:	408f4000 	.word	0x408f4000
	...
 8001fac:	40690000 	.word	0x40690000
 8001fb0:	00000000 	.word	0x00000000
 8001fb4:	c0690000 	.word	0xc0690000
 8001fb8:	20001838 	.word	0x20001838
 8001fbc:	200018d0 	.word	0x200018d0
 8001fc0:	200017ec 	.word	0x200017ec
 8001fc4:	2000164c 	.word	0x2000164c
 8001fc8:	20000340 	.word	0x20000340
 8001fcc:	20000670 	.word	0x20000670
 8001fd0:	43480000 	.word	0x43480000
 8001fd4:	2000099c 	.word	0x2000099c
 8001fd8:	20000cc8 	.word	0x20000cc8
 8001fdc:	20000ff4 	.word	0x20000ff4
 8001fe0:	20001320 	.word	0x20001320
 8001fe4:	200002e0 	.word	0x200002e0
 8001fe8:	0801e800 	.word	0x0801e800
 8001fec:	200002c8 	.word	0x200002c8
 8001ff0:	0801f800 	.word	0x0801f800
 8001ff4:	2000008c 	.word	0x2000008c
 8001ff8:	080104d0 	.word	0x080104d0
 8001ffc:	200002b0 	.word	0x200002b0
 8002000:	20000084 	.word	0x20000084
 8002004:	080104dc 	.word	0x080104dc
 8002008:	080104ec 	.word	0x080104ec
 800200c:	080104f8 	.word	0x080104f8
 8002010:	40000400 	.word	0x40000400
 8002014:	200002f8 	.word	0x200002f8
 8002018:	20000300 	.word	0x20000300
 800201c:	20000308 	.word	0x20000308
 8002020:	20000668 	.word	0x20000668
 8002024:	20000660 	.word	0x20000660
 8002028:	20000028 	.word	0x20000028
 800202c:	200019b0 	.word	0x200019b0
 8002030:	2000001c 	.word	0x2000001c
 8002034:	20000020 	.word	0x20000020
			}
			case HALTED: {
				PID_setpoint = 0;
 8002038:	4973      	ldr	r1, [pc, #460]	; (8002208 <main+0x530>)
 800203a:	f04f 0200 	mov.w	r2, #0
 800203e:	f04f 0300 	mov.w	r3, #0
 8002042:	e9c1 2300 	strd	r2, r3, [r1]
				break;
 8002046:	bf00      	nop
			}
		}

		if(HAL_GetTick() - previous_millis_PID_update >= interval_PID_update){
 8002048:	f001 fe56 	bl	8003cf8 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	4b6f      	ldr	r3, [pc, #444]	; (800220c <main+0x534>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	1ad2      	subs	r2, r2, r3
 8002054:	4b6e      	ldr	r3, [pc, #440]	; (8002210 <main+0x538>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	429a      	cmp	r2, r3
 800205a:	d30c      	bcc.n	8002076 <main+0x39e>
			set_heater_duty(0);
 800205c:	2000      	movs	r0, #0
 800205e:	f7ff fe29 	bl	8001cb4 <set_heater_duty>
			HAL_Delay(10); // Wait to let the thermocouple voltage stabilize before taking measurement
 8002062:	200a      	movs	r0, #10
 8002064:	f001 fe54 	bl	8003d10 <HAL_Delay>
			get_actual_temperature();
 8002068:	f7ff f8b6 	bl	80011d8 <get_actual_temperature>
			previous_millis_PID_update = HAL_GetTick();
 800206c:	f001 fe44 	bl	8003cf8 <HAL_GetTick>
 8002070:	4603      	mov	r3, r0
 8002072:	4a66      	ldr	r2, [pc, #408]	; (800220c <main+0x534>)
 8002074:	6013      	str	r3, [r2, #0]
		//PID_SetTunings(&TPID, Kp_custom, Ki_custom, Kd_custom);
		//sensor_values.set_temperature = temperature_custom;
		// ----------------------------------------------

		/* Compute PID and set duty cycle */
		PID_Compute(&TPID);
 8002076:	4867      	ldr	r0, [pc, #412]	; (8002214 <main+0x53c>)
 8002078:	f000 fe3a 	bl	8002cf0 <PID_Compute>
		set_heater_duty(PID_output*(max_power_watt*POWER_REDUCTION_FACTOR/sensor_values.bus_voltage));
 800207c:	4b66      	ldr	r3, [pc, #408]	; (8002218 <main+0x540>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4618      	mov	r0, r3
 8002082:	f7fe fa89 	bl	8000598 <__aeabi_f2d>
 8002086:	a35e      	add	r3, pc, #376	; (adr r3, 8002200 <main+0x528>)
 8002088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800208c:	f7fe fadc 	bl	8000648 <__aeabi_dmul>
 8002090:	4602      	mov	r2, r0
 8002092:	460b      	mov	r3, r1
 8002094:	4614      	mov	r4, r2
 8002096:	461d      	mov	r5, r3
 8002098:	4b60      	ldr	r3, [pc, #384]	; (800221c <main+0x544>)
 800209a:	691b      	ldr	r3, [r3, #16]
 800209c:	4618      	mov	r0, r3
 800209e:	f7fe fa7b 	bl	8000598 <__aeabi_f2d>
 80020a2:	4602      	mov	r2, r0
 80020a4:	460b      	mov	r3, r1
 80020a6:	4620      	mov	r0, r4
 80020a8:	4629      	mov	r1, r5
 80020aa:	f7fe fbf7 	bl	800089c <__aeabi_ddiv>
 80020ae:	4602      	mov	r2, r0
 80020b0:	460b      	mov	r3, r1
 80020b2:	4610      	mov	r0, r2
 80020b4:	4619      	mov	r1, r3
 80020b6:	4b5a      	ldr	r3, [pc, #360]	; (8002220 <main+0x548>)
 80020b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020bc:	f7fe fac4 	bl	8000648 <__aeabi_dmul>
 80020c0:	4602      	mov	r2, r0
 80020c2:	460b      	mov	r3, r1
 80020c4:	4610      	mov	r0, r2
 80020c6:	4619      	mov	r1, r3
 80020c8:	f7fe fd96 	bl	8000bf8 <__aeabi_d2uiz>
 80020cc:	4603      	mov	r3, r0
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7ff fdef 	bl	8001cb4 <set_heater_duty>

		/* Send debug information over serial */
		if(HAL_GetTick() - previous_millis_debug >= interval_debug){
 80020d6:	f001 fe0f 	bl	8003cf8 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	4b51      	ldr	r3, [pc, #324]	; (8002224 <main+0x54c>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	1ad2      	subs	r2, r2, r3
 80020e2:	4b51      	ldr	r3, [pc, #324]	; (8002228 <main+0x550>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d373      	bcc.n	80021d2 <main+0x4fa>
			memset(&buffer, '\0', sizeof(buffer));
 80020ea:	2228      	movs	r2, #40	; 0x28
 80020ec:	2100      	movs	r1, #0
 80020ee:	484f      	ldr	r0, [pc, #316]	; (800222c <main+0x554>)
 80020f0:	f00b fab8 	bl	800d664 <memset>
			sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\n",
 80020f4:	4b49      	ldr	r3, [pc, #292]	; (800221c <main+0x544>)
 80020f6:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
 80020fa:	4b48      	ldr	r3, [pc, #288]	; (800221c <main+0x544>)
 80020fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002100:	4b47      	ldr	r3, [pc, #284]	; (8002220 <main+0x548>)
 8002102:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002106:	f04f 0200 	mov.w	r2, #0
 800210a:	4b49      	ldr	r3, [pc, #292]	; (8002230 <main+0x558>)
 800210c:	f7fe fbc6 	bl	800089c <__aeabi_ddiv>
 8002110:	4602      	mov	r2, r0
 8002112:	460b      	mov	r3, r1
 8002114:	ec43 2b1a 	vmov	d10, r2, r3
					sensor_values.actual_temperature, sensor_values.set_temperature,
					PID_output/10, PID_GetPpart(&TPID)/10, PID_GetIpart(&TPID)/10, PID_GetDpart(&TPID)/10,
 8002118:	483e      	ldr	r0, [pc, #248]	; (8002214 <main+0x53c>)
 800211a:	f001 f916 	bl	800334a <PID_GetPpart>
 800211e:	ec51 0b10 	vmov	r0, r1, d0
			sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\n",
 8002122:	f04f 0200 	mov.w	r2, #0
 8002126:	4b42      	ldr	r3, [pc, #264]	; (8002230 <main+0x558>)
 8002128:	f7fe fbb8 	bl	800089c <__aeabi_ddiv>
 800212c:	4602      	mov	r2, r0
 800212e:	460b      	mov	r3, r1
 8002130:	ec43 2b1b 	vmov	d11, r2, r3
					PID_output/10, PID_GetPpart(&TPID)/10, PID_GetIpart(&TPID)/10, PID_GetDpart(&TPID)/10,
 8002134:	4837      	ldr	r0, [pc, #220]	; (8002214 <main+0x53c>)
 8002136:	f001 f91a 	bl	800336e <PID_GetIpart>
 800213a:	ec51 0b10 	vmov	r0, r1, d0
			sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\n",
 800213e:	f04f 0200 	mov.w	r2, #0
 8002142:	4b3b      	ldr	r3, [pc, #236]	; (8002230 <main+0x558>)
 8002144:	f7fe fbaa 	bl	800089c <__aeabi_ddiv>
 8002148:	4602      	mov	r2, r0
 800214a:	460b      	mov	r3, r1
 800214c:	ec43 2b19 	vmov	d9, r2, r3
					PID_output/10, PID_GetPpart(&TPID)/10, PID_GetIpart(&TPID)/10, PID_GetDpart(&TPID)/10,
 8002150:	4830      	ldr	r0, [pc, #192]	; (8002214 <main+0x53c>)
 8002152:	f001 f91e 	bl	8003392 <PID_GetDpart>
 8002156:	ec51 0b10 	vmov	r0, r1, d0
			sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\n",
 800215a:	f04f 0200 	mov.w	r2, #0
 800215e:	4b34      	ldr	r3, [pc, #208]	; (8002230 <main+0x558>)
 8002160:	f7fe fb9c 	bl	800089c <__aeabi_ddiv>
 8002164:	4602      	mov	r2, r0
 8002166:	460b      	mov	r3, r1
 8002168:	ec43 2b18 	vmov	d8, r2, r3
					sensor_values.in_stand*50, sensor_values.handle_sense*50)
 800216c:	4b2b      	ldr	r3, [pc, #172]	; (800221c <main+0x544>)
 800216e:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
			sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\n",
 8002172:	f04f 0200 	mov.w	r2, #0
 8002176:	4b2f      	ldr	r3, [pc, #188]	; (8002234 <main+0x55c>)
 8002178:	f7fe fa66 	bl	8000648 <__aeabi_dmul>
 800217c:	4602      	mov	r2, r0
 800217e:	460b      	mov	r3, r1
 8002180:	4614      	mov	r4, r2
 8002182:	461d      	mov	r5, r3
					sensor_values.in_stand*50, sensor_values.handle_sense*50)
 8002184:	4b25      	ldr	r3, [pc, #148]	; (800221c <main+0x544>)
 8002186:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
			sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\n",
 800218a:	f04f 0200 	mov.w	r2, #0
 800218e:	4b29      	ldr	r3, [pc, #164]	; (8002234 <main+0x55c>)
 8002190:	f7fe fa5a 	bl	8000648 <__aeabi_dmul>
 8002194:	4602      	mov	r2, r0
 8002196:	460b      	mov	r3, r1
 8002198:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800219c:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 80021a0:	ed8d 8b08 	vstr	d8, [sp, #32]
 80021a4:	ed8d 9b06 	vstr	d9, [sp, #24]
 80021a8:	ed8d bb04 	vstr	d11, [sp, #16]
 80021ac:	ed8d ab02 	vstr	d10, [sp, #8]
 80021b0:	e9cd 8900 	strd	r8, r9, [sp]
 80021b4:	4652      	mov	r2, sl
 80021b6:	465b      	mov	r3, fp
 80021b8:	491f      	ldr	r1, [pc, #124]	; (8002238 <main+0x560>)
 80021ba:	481c      	ldr	r0, [pc, #112]	; (800222c <main+0x554>)
 80021bc:	f00b f95a 	bl	800d474 <siprintf>
					;
			debugPrint(&huart2,buffer);
 80021c0:	491a      	ldr	r1, [pc, #104]	; (800222c <main+0x554>)
 80021c2:	481e      	ldr	r0, [pc, #120]	; (800223c <main+0x564>)
 80021c4:	f7ff f954 	bl	8001470 <debugPrint>
			previous_millis_debug = HAL_GetTick();
 80021c8:	f001 fd96 	bl	8003cf8 <HAL_GetTick>
 80021cc:	4603      	mov	r3, r0
 80021ce:	4a15      	ldr	r2, [pc, #84]	; (8002224 <main+0x54c>)
 80021d0:	6013      	str	r3, [r2, #0]
		}

		/* Update display */
		if(HAL_GetTick() - previous_millis_display >= interval_display){
 80021d2:	f001 fd91 	bl	8003cf8 <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	4b19      	ldr	r3, [pc, #100]	; (8002240 <main+0x568>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	1ad2      	subs	r2, r2, r3
 80021de:	4b19      	ldr	r3, [pc, #100]	; (8002244 <main+0x56c>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	f4ff aea1 	bcc.w	8001f2a <main+0x252>
			get_ambient_temp();
 80021e8:	f7ff f8fe 	bl	80013e8 <get_ambient_temp>
			update_OLED();
 80021ec:	f7ff f996 	bl	800151c <update_OLED>
			previous_millis_display = HAL_GetTick();
 80021f0:	f001 fd82 	bl	8003cf8 <HAL_GetTick>
 80021f4:	4603      	mov	r3, r0
 80021f6:	4a12      	ldr	r2, [pc, #72]	; (8002240 <main+0x568>)
 80021f8:	6013      	str	r3, [r2, #0]
		get_stand_status();
 80021fa:	e696      	b.n	8001f2a <main+0x252>
 80021fc:	f3af 8000 	nop.w
 8002200:	eb851eb8 	.word	0xeb851eb8
 8002204:	3fbeb851 	.word	0x3fbeb851
 8002208:	20000668 	.word	0x20000668
 800220c:	200002bc 	.word	0x200002bc
 8002210:	2000000c 	.word	0x2000000c
 8002214:	200019b0 	.word	0x200019b0
 8002218:	20000338 	.word	0x20000338
 800221c:	20000020 	.word	0x20000020
 8002220:	20000660 	.word	0x20000660
 8002224:	200002b8 	.word	0x200002b8
 8002228:	20000008 	.word	0x20000008
 800222c:	20000310 	.word	0x20000310
 8002230:	40240000 	.word	0x40240000
 8002234:	40490000 	.word	0x40490000
 8002238:	08010500 	.word	0x08010500
 800223c:	2000191c 	.word	0x2000191c
 8002240:	200002b4 	.word	0x200002b4
 8002244:	20000004 	.word	0x20000004

08002248 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b094      	sub	sp, #80	; 0x50
 800224c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800224e:	f107 0318 	add.w	r3, r7, #24
 8002252:	2238      	movs	r2, #56	; 0x38
 8002254:	2100      	movs	r1, #0
 8002256:	4618      	mov	r0, r3
 8002258:	f00b fa04 	bl	800d664 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800225c:	1d3b      	adds	r3, r7, #4
 800225e:	2200      	movs	r2, #0
 8002260:	601a      	str	r2, [r3, #0]
 8002262:	605a      	str	r2, [r3, #4]
 8002264:	609a      	str	r2, [r3, #8]
 8002266:	60da      	str	r2, [r3, #12]
 8002268:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800226a:	2000      	movs	r0, #0
 800226c:	f005 f89e 	bl	80073ac <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002270:	2302      	movs	r3, #2
 8002272:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002274:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002278:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800227a:	2340      	movs	r3, #64	; 0x40
 800227c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800227e:	2302      	movs	r3, #2
 8002280:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002282:	2302      	movs	r3, #2
 8002284:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8002286:	2304      	movs	r3, #4
 8002288:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800228a:	2355      	movs	r3, #85	; 0x55
 800228c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800228e:	2302      	movs	r3, #2
 8002290:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002292:	2302      	movs	r3, #2
 8002294:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002296:	2302      	movs	r3, #2
 8002298:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800229a:	f107 0318 	add.w	r3, r7, #24
 800229e:	4618      	mov	r0, r3
 80022a0:	f005 f938 	bl	8007514 <HAL_RCC_OscConfig>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <SystemClock_Config+0x66>
  {
    Error_Handler();
 80022aa:	f000 fc07 	bl	8002abc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022ae:	230f      	movs	r3, #15
 80022b0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022b2:	2303      	movs	r3, #3
 80022b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022b6:	2300      	movs	r3, #0
 80022b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80022ba:	2300      	movs	r3, #0
 80022bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022be:	2300      	movs	r3, #0
 80022c0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80022c2:	1d3b      	adds	r3, r7, #4
 80022c4:	2104      	movs	r1, #4
 80022c6:	4618      	mov	r0, r3
 80022c8:	f005 fc3c 	bl	8007b44 <HAL_RCC_ClockConfig>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80022d2:	f000 fbf3 	bl	8002abc <Error_Handler>
  }
}
 80022d6:	bf00      	nop
 80022d8:	3750      	adds	r7, #80	; 0x50
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
	...

080022e0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b092      	sub	sp, #72	; 0x48
 80022e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80022e6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80022ea:	2200      	movs	r2, #0
 80022ec:	601a      	str	r2, [r3, #0]
 80022ee:	605a      	str	r2, [r3, #4]
 80022f0:	609a      	str	r2, [r3, #8]
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 80022f2:	f107 0320 	add.w	r3, r7, #32
 80022f6:	2200      	movs	r2, #0
 80022f8:	601a      	str	r2, [r3, #0]
 80022fa:	605a      	str	r2, [r3, #4]
 80022fc:	609a      	str	r2, [r3, #8]
 80022fe:	60da      	str	r2, [r3, #12]
 8002300:	611a      	str	r2, [r3, #16]
 8002302:	615a      	str	r2, [r3, #20]
 8002304:	619a      	str	r2, [r3, #24]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002306:	463b      	mov	r3, r7
 8002308:	2220      	movs	r2, #32
 800230a:	2100      	movs	r1, #0
 800230c:	4618      	mov	r0, r3
 800230e:	f00b f9a9 	bl	800d664 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002312:	4b54      	ldr	r3, [pc, #336]	; (8002464 <MX_ADC1_Init+0x184>)
 8002314:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002318:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800231a:	4b52      	ldr	r3, [pc, #328]	; (8002464 <MX_ADC1_Init+0x184>)
 800231c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002320:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002322:	4b50      	ldr	r3, [pc, #320]	; (8002464 <MX_ADC1_Init+0x184>)
 8002324:	2200      	movs	r2, #0
 8002326:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002328:	4b4e      	ldr	r3, [pc, #312]	; (8002464 <MX_ADC1_Init+0x184>)
 800232a:	2200      	movs	r2, #0
 800232c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800232e:	4b4d      	ldr	r3, [pc, #308]	; (8002464 <MX_ADC1_Init+0x184>)
 8002330:	2200      	movs	r2, #0
 8002332:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002334:	4b4b      	ldr	r3, [pc, #300]	; (8002464 <MX_ADC1_Init+0x184>)
 8002336:	2201      	movs	r2, #1
 8002338:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800233a:	4b4a      	ldr	r3, [pc, #296]	; (8002464 <MX_ADC1_Init+0x184>)
 800233c:	2204      	movs	r2, #4
 800233e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002340:	4b48      	ldr	r3, [pc, #288]	; (8002464 <MX_ADC1_Init+0x184>)
 8002342:	2200      	movs	r2, #0
 8002344:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002346:	4b47      	ldr	r3, [pc, #284]	; (8002464 <MX_ADC1_Init+0x184>)
 8002348:	2201      	movs	r2, #1
 800234a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 4;
 800234c:	4b45      	ldr	r3, [pc, #276]	; (8002464 <MX_ADC1_Init+0x184>)
 800234e:	2204      	movs	r2, #4
 8002350:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002352:	4b44      	ldr	r3, [pc, #272]	; (8002464 <MX_ADC1_Init+0x184>)
 8002354:	2200      	movs	r2, #0
 8002356:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800235a:	4b42      	ldr	r3, [pc, #264]	; (8002464 <MX_ADC1_Init+0x184>)
 800235c:	2200      	movs	r2, #0
 800235e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002360:	4b40      	ldr	r3, [pc, #256]	; (8002464 <MX_ADC1_Init+0x184>)
 8002362:	2200      	movs	r2, #0
 8002364:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002366:	4b3f      	ldr	r3, [pc, #252]	; (8002464 <MX_ADC1_Init+0x184>)
 8002368:	2201      	movs	r2, #1
 800236a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800236e:	4b3d      	ldr	r3, [pc, #244]	; (8002464 <MX_ADC1_Init+0x184>)
 8002370:	2200      	movs	r2, #0
 8002372:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8002374:	4b3b      	ldr	r3, [pc, #236]	; (8002464 <MX_ADC1_Init+0x184>)
 8002376:	2200      	movs	r2, #0
 8002378:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800237c:	4839      	ldr	r0, [pc, #228]	; (8002464 <MX_ADC1_Init+0x184>)
 800237e:	f002 f82b 	bl	80043d8 <HAL_ADC_Init>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d001      	beq.n	800238c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8002388:	f000 fb98 	bl	8002abc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800238c:	2300      	movs	r3, #0
 800238e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002390:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002394:	4619      	mov	r1, r3
 8002396:	4833      	ldr	r0, [pc, #204]	; (8002464 <MX_ADC1_Init+0x184>)
 8002398:	f003 fcd6 	bl	8005d48 <HAL_ADCEx_MultiModeConfigChannel>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 80023a2:	f000 fb8b 	bl	8002abc <Error_Handler>
  }

  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 80023a6:	4b30      	ldr	r3, [pc, #192]	; (8002468 <MX_ADC1_Init+0x188>)
 80023a8:	623b      	str	r3, [r7, #32]
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 80023aa:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
 80023ae:	627b      	str	r3, [r7, #36]	; 0x24
  AnalogWDGConfig.Channel = ADC_CHANNEL_2;
 80023b0:	4b2e      	ldr	r3, [pc, #184]	; (800246c <MX_ADC1_Init+0x18c>)
 80023b2:	62bb      	str	r3, [r7, #40]	; 0x28
  AnalogWDGConfig.ITMode = ENABLE;
 80023b4:	2301      	movs	r3, #1
 80023b6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  AnalogWDGConfig.HighThreshold = 100;
 80023ba:	2364      	movs	r3, #100	; 0x64
 80023bc:	633b      	str	r3, [r7, #48]	; 0x30
  AnalogWDGConfig.LowThreshold = 0;
 80023be:	2300      	movs	r3, #0
 80023c0:	637b      	str	r3, [r7, #52]	; 0x34
  AnalogWDGConfig.FilteringConfig = ADC_AWD_FILTERING_NONE;
 80023c2:	2300      	movs	r3, #0
 80023c4:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 80023c6:	f107 0320 	add.w	r3, r7, #32
 80023ca:	4619      	mov	r1, r3
 80023cc:	4825      	ldr	r0, [pc, #148]	; (8002464 <MX_ADC1_Init+0x184>)
 80023ce:	f003 f873 	bl	80054b8 <HAL_ADC_AnalogWDGConfig>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d001      	beq.n	80023dc <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 80023d8:	f000 fb70 	bl	8002abc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80023dc:	4b24      	ldr	r3, [pc, #144]	; (8002470 <MX_ADC1_Init+0x190>)
 80023de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80023e0:	2306      	movs	r3, #6
 80023e2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 80023e4:	2304      	movs	r3, #4
 80023e6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80023e8:	237f      	movs	r3, #127	; 0x7f
 80023ea:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80023ec:	2304      	movs	r3, #4
 80023ee:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80023f0:	2300      	movs	r3, #0
 80023f2:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023f4:	463b      	mov	r3, r7
 80023f6:	4619      	mov	r1, r3
 80023f8:	481a      	ldr	r0, [pc, #104]	; (8002464 <MX_ADC1_Init+0x184>)
 80023fa:	f002 fc6d 	bl	8004cd8 <HAL_ADC_ConfigChannel>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <MX_ADC1_Init+0x128>
  {
    Error_Handler();
 8002404:	f000 fb5a 	bl	8002abc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002408:	4b18      	ldr	r3, [pc, #96]	; (800246c <MX_ADC1_Init+0x18c>)
 800240a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800240c:	230c      	movs	r3, #12
 800240e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002410:	463b      	mov	r3, r7
 8002412:	4619      	mov	r1, r3
 8002414:	4813      	ldr	r0, [pc, #76]	; (8002464 <MX_ADC1_Init+0x184>)
 8002416:	f002 fc5f 	bl	8004cd8 <HAL_ADC_ConfigChannel>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d001      	beq.n	8002424 <MX_ADC1_Init+0x144>
  {
    Error_Handler();
 8002420:	f000 fb4c 	bl	8002abc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002424:	4b13      	ldr	r3, [pc, #76]	; (8002474 <MX_ADC1_Init+0x194>)
 8002426:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002428:	2312      	movs	r3, #18
 800242a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800242c:	463b      	mov	r3, r7
 800242e:	4619      	mov	r1, r3
 8002430:	480c      	ldr	r0, [pc, #48]	; (8002464 <MX_ADC1_Init+0x184>)
 8002432:	f002 fc51 	bl	8004cd8 <HAL_ADC_ConfigChannel>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d001      	beq.n	8002440 <MX_ADC1_Init+0x160>
  {
    Error_Handler();
 800243c:	f000 fb3e 	bl	8002abc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8002440:	4b0d      	ldr	r3, [pc, #52]	; (8002478 <MX_ADC1_Init+0x198>)
 8002442:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002444:	2318      	movs	r3, #24
 8002446:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002448:	463b      	mov	r3, r7
 800244a:	4619      	mov	r1, r3
 800244c:	4805      	ldr	r0, [pc, #20]	; (8002464 <MX_ADC1_Init+0x184>)
 800244e:	f002 fc43 	bl	8004cd8 <HAL_ADC_ConfigChannel>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d001      	beq.n	800245c <MX_ADC1_Init+0x17c>
  {
    Error_Handler();
 8002458:	f000 fb30 	bl	8002abc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800245c:	bf00      	nop
 800245e:	3748      	adds	r7, #72	; 0x48
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	2000164c 	.word	0x2000164c
 8002468:	7dc00000 	.word	0x7dc00000
 800246c:	08600004 	.word	0x08600004
 8002470:	04300002 	.word	0x04300002
 8002474:	10c00010 	.word	0x10c00010
 8002478:	3ef08000 	.word	0x3ef08000

0800247c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002480:	4b0d      	ldr	r3, [pc, #52]	; (80024b8 <MX_CRC_Init+0x3c>)
 8002482:	4a0e      	ldr	r2, [pc, #56]	; (80024bc <MX_CRC_Init+0x40>)
 8002484:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8002486:	4b0c      	ldr	r3, [pc, #48]	; (80024b8 <MX_CRC_Init+0x3c>)
 8002488:	2200      	movs	r2, #0
 800248a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800248c:	4b0a      	ldr	r3, [pc, #40]	; (80024b8 <MX_CRC_Init+0x3c>)
 800248e:	2200      	movs	r2, #0
 8002490:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8002492:	4b09      	ldr	r3, [pc, #36]	; (80024b8 <MX_CRC_Init+0x3c>)
 8002494:	2200      	movs	r2, #0
 8002496:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8002498:	4b07      	ldr	r3, [pc, #28]	; (80024b8 <MX_CRC_Init+0x3c>)
 800249a:	2200      	movs	r2, #0
 800249c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800249e:	4b06      	ldr	r3, [pc, #24]	; (80024b8 <MX_CRC_Init+0x3c>)
 80024a0:	2201      	movs	r2, #1
 80024a2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80024a4:	4804      	ldr	r0, [pc, #16]	; (80024b8 <MX_CRC_Init+0x3c>)
 80024a6:	f003 fe03 	bl	80060b0 <HAL_CRC_Init>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80024b0:	f000 fb04 	bl	8002abc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80024b4:	bf00      	nop
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	20001718 	.word	0x20001718
 80024bc:	40023000 	.word	0x40023000

080024c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80024c4:	4b1b      	ldr	r3, [pc, #108]	; (8002534 <MX_I2C1_Init+0x74>)
 80024c6:	4a1c      	ldr	r2, [pc, #112]	; (8002538 <MX_I2C1_Init+0x78>)
 80024c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 80024ca:	4b1a      	ldr	r3, [pc, #104]	; (8002534 <MX_I2C1_Init+0x74>)
 80024cc:	4a1b      	ldr	r2, [pc, #108]	; (800253c <MX_I2C1_Init+0x7c>)
 80024ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80024d0:	4b18      	ldr	r3, [pc, #96]	; (8002534 <MX_I2C1_Init+0x74>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024d6:	4b17      	ldr	r3, [pc, #92]	; (8002534 <MX_I2C1_Init+0x74>)
 80024d8:	2201      	movs	r2, #1
 80024da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024dc:	4b15      	ldr	r3, [pc, #84]	; (8002534 <MX_I2C1_Init+0x74>)
 80024de:	2200      	movs	r2, #0
 80024e0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80024e2:	4b14      	ldr	r3, [pc, #80]	; (8002534 <MX_I2C1_Init+0x74>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80024e8:	4b12      	ldr	r3, [pc, #72]	; (8002534 <MX_I2C1_Init+0x74>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024ee:	4b11      	ldr	r3, [pc, #68]	; (8002534 <MX_I2C1_Init+0x74>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024f4:	4b0f      	ldr	r3, [pc, #60]	; (8002534 <MX_I2C1_Init+0x74>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80024fa:	480e      	ldr	r0, [pc, #56]	; (8002534 <MX_I2C1_Init+0x74>)
 80024fc:	f004 fe30 	bl	8007160 <HAL_I2C_Init>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002506:	f000 fad9 	bl	8002abc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800250a:	2100      	movs	r1, #0
 800250c:	4809      	ldr	r0, [pc, #36]	; (8002534 <MX_I2C1_Init+0x74>)
 800250e:	f004 feb6 	bl	800727e <HAL_I2CEx_ConfigAnalogFilter>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002518:	f000 fad0 	bl	8002abc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800251c:	2100      	movs	r1, #0
 800251e:	4805      	ldr	r0, [pc, #20]	; (8002534 <MX_I2C1_Init+0x74>)
 8002520:	f004 fef8 	bl	8007314 <HAL_I2CEx_ConfigDigitalFilter>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d001      	beq.n	800252e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800252a:	f000 fac7 	bl	8002abc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800252e:	bf00      	nop
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	2000173c 	.word	0x2000173c
 8002538:	40005400 	.word	0x40005400
 800253c:	30a0a7fb 	.word	0x30a0a7fb

08002540 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002544:	4b1b      	ldr	r3, [pc, #108]	; (80025b4 <MX_SPI1_Init+0x74>)
 8002546:	4a1c      	ldr	r2, [pc, #112]	; (80025b8 <MX_SPI1_Init+0x78>)
 8002548:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800254a:	4b1a      	ldr	r3, [pc, #104]	; (80025b4 <MX_SPI1_Init+0x74>)
 800254c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002550:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002552:	4b18      	ldr	r3, [pc, #96]	; (80025b4 <MX_SPI1_Init+0x74>)
 8002554:	2200      	movs	r2, #0
 8002556:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002558:	4b16      	ldr	r3, [pc, #88]	; (80025b4 <MX_SPI1_Init+0x74>)
 800255a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800255e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002560:	4b14      	ldr	r3, [pc, #80]	; (80025b4 <MX_SPI1_Init+0x74>)
 8002562:	2202      	movs	r2, #2
 8002564:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002566:	4b13      	ldr	r3, [pc, #76]	; (80025b4 <MX_SPI1_Init+0x74>)
 8002568:	2201      	movs	r2, #1
 800256a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800256c:	4b11      	ldr	r3, [pc, #68]	; (80025b4 <MX_SPI1_Init+0x74>)
 800256e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002572:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002574:	4b0f      	ldr	r3, [pc, #60]	; (80025b4 <MX_SPI1_Init+0x74>)
 8002576:	2218      	movs	r2, #24
 8002578:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800257a:	4b0e      	ldr	r3, [pc, #56]	; (80025b4 <MX_SPI1_Init+0x74>)
 800257c:	2200      	movs	r2, #0
 800257e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002580:	4b0c      	ldr	r3, [pc, #48]	; (80025b4 <MX_SPI1_Init+0x74>)
 8002582:	2200      	movs	r2, #0
 8002584:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002586:	4b0b      	ldr	r3, [pc, #44]	; (80025b4 <MX_SPI1_Init+0x74>)
 8002588:	2200      	movs	r2, #0
 800258a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800258c:	4b09      	ldr	r3, [pc, #36]	; (80025b4 <MX_SPI1_Init+0x74>)
 800258e:	2207      	movs	r2, #7
 8002590:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002592:	4b08      	ldr	r3, [pc, #32]	; (80025b4 <MX_SPI1_Init+0x74>)
 8002594:	2200      	movs	r2, #0
 8002596:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002598:	4b06      	ldr	r3, [pc, #24]	; (80025b4 <MX_SPI1_Init+0x74>)
 800259a:	2200      	movs	r2, #0
 800259c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800259e:	4805      	ldr	r0, [pc, #20]	; (80025b4 <MX_SPI1_Init+0x74>)
 80025a0:	f005 fedc 	bl	800835c <HAL_SPI_Init>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d001      	beq.n	80025ae <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80025aa:	f000 fa87 	bl	8002abc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80025ae:	bf00      	nop
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	20001788 	.word	0x20001788
 80025b8:	40013000 	.word	0x40013000

080025bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b08e      	sub	sp, #56	; 0x38
 80025c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025c6:	2200      	movs	r2, #0
 80025c8:	601a      	str	r2, [r3, #0]
 80025ca:	605a      	str	r2, [r3, #4]
 80025cc:	609a      	str	r2, [r3, #8]
 80025ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025d0:	f107 031c 	add.w	r3, r7, #28
 80025d4:	2200      	movs	r2, #0
 80025d6:	601a      	str	r2, [r3, #0]
 80025d8:	605a      	str	r2, [r3, #4]
 80025da:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025dc:	463b      	mov	r3, r7
 80025de:	2200      	movs	r2, #0
 80025e0:	601a      	str	r2, [r3, #0]
 80025e2:	605a      	str	r2, [r3, #4]
 80025e4:	609a      	str	r2, [r3, #8]
 80025e6:	60da      	str	r2, [r3, #12]
 80025e8:	611a      	str	r2, [r3, #16]
 80025ea:	615a      	str	r2, [r3, #20]
 80025ec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80025ee:	4b2d      	ldr	r3, [pc, #180]	; (80026a4 <MX_TIM2_Init+0xe8>)
 80025f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80025f4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 800-1;
 80025f6:	4b2b      	ldr	r3, [pc, #172]	; (80026a4 <MX_TIM2_Init+0xe8>)
 80025f8:	f240 321f 	movw	r2, #799	; 0x31f
 80025fc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025fe:	4b29      	ldr	r3, [pc, #164]	; (80026a4 <MX_TIM2_Init+0xe8>)
 8002600:	2200      	movs	r2, #0
 8002602:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8002604:	4b27      	ldr	r3, [pc, #156]	; (80026a4 <MX_TIM2_Init+0xe8>)
 8002606:	2264      	movs	r2, #100	; 0x64
 8002608:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800260a:	4b26      	ldr	r3, [pc, #152]	; (80026a4 <MX_TIM2_Init+0xe8>)
 800260c:	2200      	movs	r2, #0
 800260e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002610:	4b24      	ldr	r3, [pc, #144]	; (80026a4 <MX_TIM2_Init+0xe8>)
 8002612:	2280      	movs	r2, #128	; 0x80
 8002614:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002616:	4823      	ldr	r0, [pc, #140]	; (80026a4 <MX_TIM2_Init+0xe8>)
 8002618:	f005 ff4b 	bl	80084b2 <HAL_TIM_Base_Init>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002622:	f000 fa4b 	bl	8002abc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002626:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800262a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800262c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002630:	4619      	mov	r1, r3
 8002632:	481c      	ldr	r0, [pc, #112]	; (80026a4 <MX_TIM2_Init+0xe8>)
 8002634:	f006 fcde 	bl	8008ff4 <HAL_TIM_ConfigClockSource>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800263e:	f000 fa3d 	bl	8002abc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002642:	4818      	ldr	r0, [pc, #96]	; (80026a4 <MX_TIM2_Init+0xe8>)
 8002644:	f005 ff8c 	bl	8008560 <HAL_TIM_PWM_Init>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800264e:	f000 fa35 	bl	8002abc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002652:	2300      	movs	r3, #0
 8002654:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002656:	2300      	movs	r3, #0
 8002658:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800265a:	f107 031c 	add.w	r3, r7, #28
 800265e:	4619      	mov	r1, r3
 8002660:	4810      	ldr	r0, [pc, #64]	; (80026a4 <MX_TIM2_Init+0xe8>)
 8002662:	f007 fa31 	bl	8009ac8 <HAL_TIMEx_MasterConfigSynchronization>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d001      	beq.n	8002670 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800266c:	f000 fa26 	bl	8002abc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002670:	2360      	movs	r3, #96	; 0x60
 8002672:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002674:	2300      	movs	r3, #0
 8002676:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002678:	2300      	movs	r3, #0
 800267a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800267c:	2300      	movs	r3, #0
 800267e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002680:	463b      	mov	r3, r7
 8002682:	2200      	movs	r2, #0
 8002684:	4619      	mov	r1, r3
 8002686:	4807      	ldr	r0, [pc, #28]	; (80026a4 <MX_TIM2_Init+0xe8>)
 8002688:	f006 fba0 	bl	8008dcc <HAL_TIM_PWM_ConfigChannel>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002692:	f000 fa13 	bl	8002abc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002696:	4803      	ldr	r0, [pc, #12]	; (80026a4 <MX_TIM2_Init+0xe8>)
 8002698:	f001 f8aa 	bl	80037f0 <HAL_TIM_MspPostInit>

}
 800269c:	bf00      	nop
 800269e:	3738      	adds	r7, #56	; 0x38
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	200017ec 	.word	0x200017ec

080026a8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b08c      	sub	sp, #48	; 0x30
 80026ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80026ae:	f107 030c 	add.w	r3, r7, #12
 80026b2:	2224      	movs	r2, #36	; 0x24
 80026b4:	2100      	movs	r1, #0
 80026b6:	4618      	mov	r0, r3
 80026b8:	f00a ffd4 	bl	800d664 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026bc:	463b      	mov	r3, r7
 80026be:	2200      	movs	r2, #0
 80026c0:	601a      	str	r2, [r3, #0]
 80026c2:	605a      	str	r2, [r3, #4]
 80026c4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80026c6:	4b21      	ldr	r3, [pc, #132]	; (800274c <MX_TIM3_Init+0xa4>)
 80026c8:	4a21      	ldr	r2, [pc, #132]	; (8002750 <MX_TIM3_Init+0xa8>)
 80026ca:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80026cc:	4b1f      	ldr	r3, [pc, #124]	; (800274c <MX_TIM3_Init+0xa4>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026d2:	4b1e      	ldr	r3, [pc, #120]	; (800274c <MX_TIM3_Init+0xa4>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80026d8:	4b1c      	ldr	r3, [pc, #112]	; (800274c <MX_TIM3_Init+0xa4>)
 80026da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026de:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026e0:	4b1a      	ldr	r3, [pc, #104]	; (800274c <MX_TIM3_Init+0xa4>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80026e6:	4b19      	ldr	r3, [pc, #100]	; (800274c <MX_TIM3_Init+0xa4>)
 80026e8:	2280      	movs	r2, #128	; 0x80
 80026ea:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80026ec:	2301      	movs	r3, #1
 80026ee:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80026f0:	2300      	movs	r3, #0
 80026f2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80026f4:	2301      	movs	r3, #1
 80026f6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80026f8:	2300      	movs	r3, #0
 80026fa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80026fc:	230a      	movs	r3, #10
 80026fe:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002700:	2300      	movs	r3, #0
 8002702:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002704:	2301      	movs	r3, #1
 8002706:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002708:	2300      	movs	r3, #0
 800270a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 800270c:	230a      	movs	r3, #10
 800270e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002710:	f107 030c 	add.w	r3, r7, #12
 8002714:	4619      	mov	r1, r3
 8002716:	480d      	ldr	r0, [pc, #52]	; (800274c <MX_TIM3_Init+0xa4>)
 8002718:	f006 f884 	bl	8008824 <HAL_TIM_Encoder_Init>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8002722:	f000 f9cb 	bl	8002abc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002726:	2300      	movs	r3, #0
 8002728:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800272a:	2300      	movs	r3, #0
 800272c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800272e:	463b      	mov	r3, r7
 8002730:	4619      	mov	r1, r3
 8002732:	4806      	ldr	r0, [pc, #24]	; (800274c <MX_TIM3_Init+0xa4>)
 8002734:	f007 f9c8 	bl	8009ac8 <HAL_TIMEx_MasterConfigSynchronization>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800273e:	f000 f9bd 	bl	8002abc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002742:	bf00      	nop
 8002744:	3730      	adds	r7, #48	; 0x30
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	20001838 	.word	0x20001838
 8002750:	40000400 	.word	0x40000400

08002754 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002758:	4b10      	ldr	r3, [pc, #64]	; (800279c <MX_TIM16_Init+0x48>)
 800275a:	4a11      	ldr	r2, [pc, #68]	; (80027a0 <MX_TIM16_Init+0x4c>)
 800275c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 16000-1;
 800275e:	4b0f      	ldr	r3, [pc, #60]	; (800279c <MX_TIM16_Init+0x48>)
 8002760:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8002764:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002766:	4b0d      	ldr	r3, [pc, #52]	; (800279c <MX_TIM16_Init+0x48>)
 8002768:	2200      	movs	r2, #0
 800276a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000;
 800276c:	4b0b      	ldr	r3, [pc, #44]	; (800279c <MX_TIM16_Init+0x48>)
 800276e:	f242 7210 	movw	r2, #10000	; 0x2710
 8002772:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002774:	4b09      	ldr	r3, [pc, #36]	; (800279c <MX_TIM16_Init+0x48>)
 8002776:	2200      	movs	r2, #0
 8002778:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800277a:	4b08      	ldr	r3, [pc, #32]	; (800279c <MX_TIM16_Init+0x48>)
 800277c:	2200      	movs	r2, #0
 800277e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002780:	4b06      	ldr	r3, [pc, #24]	; (800279c <MX_TIM16_Init+0x48>)
 8002782:	2280      	movs	r2, #128	; 0x80
 8002784:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002786:	4805      	ldr	r0, [pc, #20]	; (800279c <MX_TIM16_Init+0x48>)
 8002788:	f005 fe93 	bl	80084b2 <HAL_TIM_Base_Init>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8002792:	f000 f993 	bl	8002abc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8002796:	bf00      	nop
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	20001884 	.word	0x20001884
 80027a0:	40014400 	.word	0x40014400

080027a4 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b094      	sub	sp, #80	; 0x50
 80027a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80027aa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80027ae:	2200      	movs	r2, #0
 80027b0:	601a      	str	r2, [r3, #0]
 80027b2:	605a      	str	r2, [r3, #4]
 80027b4:	609a      	str	r2, [r3, #8]
 80027b6:	60da      	str	r2, [r3, #12]
 80027b8:	611a      	str	r2, [r3, #16]
 80027ba:	615a      	str	r2, [r3, #20]
 80027bc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80027be:	463b      	mov	r3, r7
 80027c0:	2234      	movs	r2, #52	; 0x34
 80027c2:	2100      	movs	r1, #0
 80027c4:	4618      	mov	r0, r3
 80027c6:	f00a ff4d 	bl	800d664 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80027ca:	4b31      	ldr	r3, [pc, #196]	; (8002890 <MX_TIM17_Init+0xec>)
 80027cc:	4a31      	ldr	r2, [pc, #196]	; (8002894 <MX_TIM17_Init+0xf0>)
 80027ce:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 9-1;
 80027d0:	4b2f      	ldr	r3, [pc, #188]	; (8002890 <MX_TIM17_Init+0xec>)
 80027d2:	2208      	movs	r2, #8
 80027d4:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027d6:	4b2e      	ldr	r3, [pc, #184]	; (8002890 <MX_TIM17_Init+0xec>)
 80027d8:	2200      	movs	r2, #0
 80027da:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1000;
 80027dc:	4b2c      	ldr	r3, [pc, #176]	; (8002890 <MX_TIM17_Init+0xec>)
 80027de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80027e2:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027e4:	4b2a      	ldr	r3, [pc, #168]	; (8002890 <MX_TIM17_Init+0xec>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80027ea:	4b29      	ldr	r3, [pc, #164]	; (8002890 <MX_TIM17_Init+0xec>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80027f0:	4b27      	ldr	r3, [pc, #156]	; (8002890 <MX_TIM17_Init+0xec>)
 80027f2:	2280      	movs	r2, #128	; 0x80
 80027f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80027f6:	4826      	ldr	r0, [pc, #152]	; (8002890 <MX_TIM17_Init+0xec>)
 80027f8:	f005 fe5b 	bl	80084b2 <HAL_TIM_Base_Init>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d001      	beq.n	8002806 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8002802:	f000 f95b 	bl	8002abc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8002806:	4822      	ldr	r0, [pc, #136]	; (8002890 <MX_TIM17_Init+0xec>)
 8002808:	f005 feaa 	bl	8008560 <HAL_TIM_PWM_Init>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8002812:	f000 f953 	bl	8002abc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002816:	2360      	movs	r3, #96	; 0x60
 8002818:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 800281a:	2300      	movs	r3, #0
 800281c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800281e:	2300      	movs	r3, #0
 8002820:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002822:	2300      	movs	r3, #0
 8002824:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002826:	2300      	movs	r3, #0
 8002828:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800282a:	2300      	movs	r3, #0
 800282c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800282e:	2300      	movs	r3, #0
 8002830:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002832:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002836:	2200      	movs	r2, #0
 8002838:	4619      	mov	r1, r3
 800283a:	4815      	ldr	r0, [pc, #84]	; (8002890 <MX_TIM17_Init+0xec>)
 800283c:	f006 fac6 	bl	8008dcc <HAL_TIM_PWM_ConfigChannel>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8002846:	f000 f939 	bl	8002abc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800284a:	2300      	movs	r3, #0
 800284c:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800284e:	2300      	movs	r3, #0
 8002850:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002852:	2300      	movs	r3, #0
 8002854:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002856:	2300      	movs	r3, #0
 8002858:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800285a:	2300      	movs	r3, #0
 800285c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800285e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002862:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002864:	2300      	movs	r3, #0
 8002866:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002868:	2300      	movs	r3, #0
 800286a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 800286c:	463b      	mov	r3, r7
 800286e:	4619      	mov	r1, r3
 8002870:	4807      	ldr	r0, [pc, #28]	; (8002890 <MX_TIM17_Init+0xec>)
 8002872:	f007 f9ab 	bl	8009bcc <HAL_TIMEx_ConfigBreakDeadTime>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d001      	beq.n	8002880 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 800287c:	f000 f91e 	bl	8002abc <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8002880:	4803      	ldr	r0, [pc, #12]	; (8002890 <MX_TIM17_Init+0xec>)
 8002882:	f000 ffb5 	bl	80037f0 <HAL_TIM_MspPostInit>

}
 8002886:	bf00      	nop
 8002888:	3750      	adds	r7, #80	; 0x50
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	200018d0 	.word	0x200018d0
 8002894:	40014800 	.word	0x40014800

08002898 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800289c:	4b22      	ldr	r3, [pc, #136]	; (8002928 <MX_USART2_UART_Init+0x90>)
 800289e:	4a23      	ldr	r2, [pc, #140]	; (800292c <MX_USART2_UART_Init+0x94>)
 80028a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80028a2:	4b21      	ldr	r3, [pc, #132]	; (8002928 <MX_USART2_UART_Init+0x90>)
 80028a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80028a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80028aa:	4b1f      	ldr	r3, [pc, #124]	; (8002928 <MX_USART2_UART_Init+0x90>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80028b0:	4b1d      	ldr	r3, [pc, #116]	; (8002928 <MX_USART2_UART_Init+0x90>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80028b6:	4b1c      	ldr	r3, [pc, #112]	; (8002928 <MX_USART2_UART_Init+0x90>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80028bc:	4b1a      	ldr	r3, [pc, #104]	; (8002928 <MX_USART2_UART_Init+0x90>)
 80028be:	220c      	movs	r2, #12
 80028c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028c2:	4b19      	ldr	r3, [pc, #100]	; (8002928 <MX_USART2_UART_Init+0x90>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80028c8:	4b17      	ldr	r3, [pc, #92]	; (8002928 <MX_USART2_UART_Init+0x90>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80028ce:	4b16      	ldr	r3, [pc, #88]	; (8002928 <MX_USART2_UART_Init+0x90>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80028d4:	4b14      	ldr	r3, [pc, #80]	; (8002928 <MX_USART2_UART_Init+0x90>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80028da:	4b13      	ldr	r3, [pc, #76]	; (8002928 <MX_USART2_UART_Init+0x90>)
 80028dc:	2200      	movs	r2, #0
 80028de:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80028e0:	4811      	ldr	r0, [pc, #68]	; (8002928 <MX_USART2_UART_Init+0x90>)
 80028e2:	f007 fa59 	bl	8009d98 <HAL_UART_Init>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80028ec:	f000 f8e6 	bl	8002abc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028f0:	2100      	movs	r1, #0
 80028f2:	480d      	ldr	r0, [pc, #52]	; (8002928 <MX_USART2_UART_Init+0x90>)
 80028f4:	f008 fd97 	bl	800b426 <HAL_UARTEx_SetTxFifoThreshold>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80028fe:	f000 f8dd 	bl	8002abc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002902:	2100      	movs	r1, #0
 8002904:	4808      	ldr	r0, [pc, #32]	; (8002928 <MX_USART2_UART_Init+0x90>)
 8002906:	f008 fdcc 	bl	800b4a2 <HAL_UARTEx_SetRxFifoThreshold>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d001      	beq.n	8002914 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002910:	f000 f8d4 	bl	8002abc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002914:	4804      	ldr	r0, [pc, #16]	; (8002928 <MX_USART2_UART_Init+0x90>)
 8002916:	f008 fd4d 	bl	800b3b4 <HAL_UARTEx_DisableFifoMode>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d001      	beq.n	8002924 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002920:	f000 f8cc 	bl	8002abc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002924:	bf00      	nop
 8002926:	bd80      	pop	{r7, pc}
 8002928:	2000191c 	.word	0x2000191c
 800292c:	40004400 	.word	0x40004400

08002930 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002936:	4b12      	ldr	r3, [pc, #72]	; (8002980 <MX_DMA_Init+0x50>)
 8002938:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800293a:	4a11      	ldr	r2, [pc, #68]	; (8002980 <MX_DMA_Init+0x50>)
 800293c:	f043 0304 	orr.w	r3, r3, #4
 8002940:	6493      	str	r3, [r2, #72]	; 0x48
 8002942:	4b0f      	ldr	r3, [pc, #60]	; (8002980 <MX_DMA_Init+0x50>)
 8002944:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002946:	f003 0304 	and.w	r3, r3, #4
 800294a:	607b      	str	r3, [r7, #4]
 800294c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800294e:	4b0c      	ldr	r3, [pc, #48]	; (8002980 <MX_DMA_Init+0x50>)
 8002950:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002952:	4a0b      	ldr	r2, [pc, #44]	; (8002980 <MX_DMA_Init+0x50>)
 8002954:	f043 0301 	orr.w	r3, r3, #1
 8002958:	6493      	str	r3, [r2, #72]	; 0x48
 800295a:	4b09      	ldr	r3, [pc, #36]	; (8002980 <MX_DMA_Init+0x50>)
 800295c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	603b      	str	r3, [r7, #0]
 8002964:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002966:	2200      	movs	r2, #0
 8002968:	2100      	movs	r1, #0
 800296a:	200b      	movs	r0, #11
 800296c:	f003 fb6b 	bl	8006046 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002970:	200b      	movs	r0, #11
 8002972:	f003 fb82 	bl	800607a <HAL_NVIC_EnableIRQ>

}
 8002976:	bf00      	nop
 8002978:	3708      	adds	r7, #8
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	40021000 	.word	0x40021000

08002984 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b088      	sub	sp, #32
 8002988:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800298a:	f107 030c 	add.w	r3, r7, #12
 800298e:	2200      	movs	r2, #0
 8002990:	601a      	str	r2, [r3, #0]
 8002992:	605a      	str	r2, [r3, #4]
 8002994:	609a      	str	r2, [r3, #8]
 8002996:	60da      	str	r2, [r3, #12]
 8002998:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800299a:	4b45      	ldr	r3, [pc, #276]	; (8002ab0 <MX_GPIO_Init+0x12c>)
 800299c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800299e:	4a44      	ldr	r2, [pc, #272]	; (8002ab0 <MX_GPIO_Init+0x12c>)
 80029a0:	f043 0320 	orr.w	r3, r3, #32
 80029a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029a6:	4b42      	ldr	r3, [pc, #264]	; (8002ab0 <MX_GPIO_Init+0x12c>)
 80029a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029aa:	f003 0320 	and.w	r3, r3, #32
 80029ae:	60bb      	str	r3, [r7, #8]
 80029b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029b2:	4b3f      	ldr	r3, [pc, #252]	; (8002ab0 <MX_GPIO_Init+0x12c>)
 80029b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029b6:	4a3e      	ldr	r2, [pc, #248]	; (8002ab0 <MX_GPIO_Init+0x12c>)
 80029b8:	f043 0301 	orr.w	r3, r3, #1
 80029bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029be:	4b3c      	ldr	r3, [pc, #240]	; (8002ab0 <MX_GPIO_Init+0x12c>)
 80029c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029c2:	f003 0301 	and.w	r3, r3, #1
 80029c6:	607b      	str	r3, [r7, #4]
 80029c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029ca:	4b39      	ldr	r3, [pc, #228]	; (8002ab0 <MX_GPIO_Init+0x12c>)
 80029cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ce:	4a38      	ldr	r2, [pc, #224]	; (8002ab0 <MX_GPIO_Init+0x12c>)
 80029d0:	f043 0302 	orr.w	r3, r3, #2
 80029d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029d6:	4b36      	ldr	r3, [pc, #216]	; (8002ab0 <MX_GPIO_Init+0x12c>)
 80029d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	603b      	str	r3, [r7, #0]
 80029e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, DEBUG_SIGNAL_A_Pin|DEBUG_SIGNAL_B_Pin, GPIO_PIN_RESET);
 80029e2:	2200      	movs	r2, #0
 80029e4:	2103      	movs	r1, #3
 80029e6:	4833      	ldr	r0, [pc, #204]	; (8002ab4 <MX_GPIO_Init+0x130>)
 80029e8:	f004 fb8a 	bl	8007100 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_DC_GPIO_Port, SPI_DC_Pin, GPIO_PIN_RESET);
 80029ec:	2200      	movs	r2, #0
 80029ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80029f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029f6:	f004 fb83 	bl	8007100 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI_RST_Pin|SPI_CS_Pin, GPIO_PIN_RESET);
 80029fa:	2200      	movs	r2, #0
 80029fc:	2150      	movs	r1, #80	; 0x50
 80029fe:	482e      	ldr	r0, [pc, #184]	; (8002ab8 <MX_GPIO_Init+0x134>)
 8002a00:	f004 fb7e 	bl	8007100 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DEBUG_SIGNAL_A_Pin DEBUG_SIGNAL_B_Pin */
  GPIO_InitStruct.Pin = DEBUG_SIGNAL_A_Pin|DEBUG_SIGNAL_B_Pin;
 8002a04:	2303      	movs	r3, #3
 8002a06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a10:	2300      	movs	r3, #0
 8002a12:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002a14:	f107 030c 	add.w	r3, r7, #12
 8002a18:	4619      	mov	r1, r3
 8002a1a:	4826      	ldr	r0, [pc, #152]	; (8002ab4 <MX_GPIO_Init+0x130>)
 8002a1c:	f004 f9d6 	bl	8006dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC_BUTTON_Pin */
  GPIO_InitStruct.Pin = ENC_BUTTON_Pin;
 8002a20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a24:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002a26:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002a2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ENC_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8002a30:	f107 030c 	add.w	r3, r7, #12
 8002a34:	4619      	mov	r1, r3
 8002a36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a3a:	f004 f9c7 	bl	8006dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : HANDLE_INP_Pin STAND_INP_Pin */
  GPIO_InitStruct.Pin = HANDLE_INP_Pin|STAND_INP_Pin;
 8002a3e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002a42:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a44:	2300      	movs	r3, #0
 8002a46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a4c:	f107 030c 	add.w	r3, r7, #12
 8002a50:	4619      	mov	r1, r3
 8002a52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a56:	f004 f9b9 	bl	8006dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_DC_Pin */
  GPIO_InitStruct.Pin = SPI_DC_Pin;
 8002a5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a60:	2301      	movs	r3, #1
 8002a62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a64:	2300      	movs	r3, #0
 8002a66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI_DC_GPIO_Port, &GPIO_InitStruct);
 8002a6c:	f107 030c 	add.w	r3, r7, #12
 8002a70:	4619      	mov	r1, r3
 8002a72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a76:	f004 f9a9 	bl	8006dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_RST_Pin SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_RST_Pin|SPI_CS_Pin;
 8002a7a:	2350      	movs	r3, #80	; 0x50
 8002a7c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a82:	2300      	movs	r3, #0
 8002a84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a86:	2300      	movs	r3, #0
 8002a88:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a8a:	f107 030c 	add.w	r3, r7, #12
 8002a8e:	4619      	mov	r1, r3
 8002a90:	4809      	ldr	r0, [pc, #36]	; (8002ab8 <MX_GPIO_Init+0x134>)
 8002a92:	f004 f99b 	bl	8006dcc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002a96:	2200      	movs	r2, #0
 8002a98:	2100      	movs	r1, #0
 8002a9a:	2017      	movs	r0, #23
 8002a9c:	f003 fad3 	bl	8006046 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002aa0:	2017      	movs	r0, #23
 8002aa2:	f003 faea 	bl	800607a <HAL_NVIC_EnableIRQ>

}
 8002aa6:	bf00      	nop
 8002aa8:	3720      	adds	r7, #32
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	40021000 	.word	0x40021000
 8002ab4:	48001400 	.word	0x48001400
 8002ab8:	48000400 	.word	0x48000400

08002abc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ac0:	b672      	cpsid	i
}
 8002ac2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ac4:	e7fe      	b.n	8002ac4 <Error_Handler+0x8>

08002ac6 <Moving_Average_Init>:
  * @brief  This function initializes filter's data structure.
	* @param  filter_struct : Data structure
  * @retval None.
  */
void Moving_Average_Init(FilterTypeDef* filter_struct, float window_length)
{
 8002ac6:	b480      	push	{r7}
 8002ac8:	b085      	sub	sp, #20
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
 8002ace:	ed87 0a00 	vstr	s0, [r7]
	filter_struct->WindowLength = window_length;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	683a      	ldr	r2, [r7, #0]
 8002ad6:	601a      	str	r2, [r3, #0]

	filter_struct->Sum = 0;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f8c3 2324 	str.w	r2, [r3, #804]	; 0x324
	filter_struct->WindowPointer = 0;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328

	for(uint32_t i=0; i<filter_struct->WindowLength; i++)
 8002ae8:	2300      	movs	r3, #0
 8002aea:	60fb      	str	r3, [r7, #12]
 8002aec:	e008      	b.n	8002b00 <Moving_Average_Init+0x3a>
	{
		filter_struct->History[i] = 0;
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	4413      	add	r3, r2
 8002af6:	2200      	movs	r2, #0
 8002af8:	605a      	str	r2, [r3, #4]
	for(uint32_t i=0; i<filter_struct->WindowLength; i++)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	3301      	adds	r3, #1
 8002afe:	60fb      	str	r3, [r7, #12]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	ee07 3a90 	vmov	s15, r3
 8002b06:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	edd3 7a00 	vldr	s15, [r3]
 8002b10:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b18:	d4e9      	bmi.n	8002aee <Moving_Average_Init+0x28>
	}
}
 8002b1a:	bf00      	nop
 8002b1c:	bf00      	nop
 8002b1e:	3714      	adds	r7, #20
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <Moving_Average_Compute>:
	* @param  raw_data : input raw sensor data.
	* @param  filter_struct : Data structure
  * @retval Filtered value.
  */
double Moving_Average_Compute(uint32_t raw_data, FilterTypeDef* filter_struct)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
	filter_struct->Sum += raw_data;
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	f8d3 2324 	ldr.w	r2, [r3, #804]	; 0x324
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	441a      	add	r2, r3
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	f8c3 2324 	str.w	r2, [r3, #804]	; 0x324
	filter_struct->Sum -= filter_struct->History[filter_struct->WindowPointer];
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	f8d3 2324 	ldr.w	r2, [r3, #804]	; 0x324
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 8002b4e:	6839      	ldr	r1, [r7, #0]
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	440b      	add	r3, r1
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	1ad2      	subs	r2, r2, r3
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	f8c3 2324 	str.w	r2, [r3, #804]	; 0x324
	filter_struct->History[filter_struct->WindowPointer] = raw_data;
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 8002b64:	683a      	ldr	r2, [r7, #0]
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	4413      	add	r3, r2
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	605a      	str	r2, [r3, #4]
	if(filter_struct->WindowPointer < filter_struct->WindowLength - 1)
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 8002b74:	ee07 3a90 	vmov	s15, r3
 8002b78:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	edd3 7a00 	vldr	s15, [r3]
 8002b82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002b86:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002b8a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b92:	d507      	bpl.n	8002ba4 <Moving_Average_Compute+0x7c>
	{
		filter_struct->WindowPointer += 1;
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 8002b9a:	1c5a      	adds	r2, r3, #1
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328
 8002ba2:	e003      	b.n	8002bac <Moving_Average_Compute+0x84>
	}
	else
	{
		filter_struct->WindowPointer = 0;
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328
	}
	return filter_struct->Sum/filter_struct->WindowLength;
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
 8002bb2:	ee07 3a90 	vmov	s15, r3
 8002bb6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	edd3 7a00 	vldr	s15, [r3]
 8002bc0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002bc4:	ee16 0a90 	vmov	r0, s13
 8002bc8:	f7fd fce6 	bl	8000598 <__aeabi_f2d>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	460b      	mov	r3, r1
 8002bd0:	ec43 2b17 	vmov	d7, r2, r3
}
 8002bd4:	eeb0 0a47 	vmov.f32	s0, s14
 8002bd8:	eef0 0a67 	vmov.f32	s1, s15
 8002bdc:	3708      	adds	r7, #8
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <PID_Init>:
#include "pid.h"

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b082      	sub	sp, #8
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bf2:	6879      	ldr	r1, [r7, #4]
 8002bf4:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	uPID->LastInput = *uPID->MyInput;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c00:	6879      	ldr	r1, [r7, #4]
 8002c02:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70

	if (uPID->OutputSum > uPID->OutMax)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8002c12:	f7fd ffa9 	bl	8000b68 <__aeabi_dcmpgt>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d006      	beq.n	8002c2a <PID_Init+0x48>
	{
		uPID->OutputSum = uPID->OutMax;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8002c22:	6879      	ldr	r1, [r7, #4]
 8002c24:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }

}
 8002c28:	e011      	b.n	8002c4e <PID_Init+0x6c>
	else if (uPID->OutputSum < uPID->OutMin)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8002c36:	f7fd ff79 	bl	8000b2c <__aeabi_dcmplt>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d100      	bne.n	8002c42 <PID_Init+0x60>
}
 8002c40:	e005      	b.n	8002c4e <PID_Init+0x6c>
		uPID->OutputSum = uPID->OutMin;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8002c48:	6879      	ldr	r1, [r7, #4]
 8002c4a:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
}
 8002c4e:	bf00      	nop
 8002c50:	3708      	adds	r7, #8
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
	...

08002c58 <PID>:

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b08a      	sub	sp, #40	; 0x28
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6278      	str	r0, [r7, #36]	; 0x24
 8002c60:	6239      	str	r1, [r7, #32]
 8002c62:	61fa      	str	r2, [r7, #28]
 8002c64:	61bb      	str	r3, [r7, #24]
 8002c66:	ed87 0b04 	vstr	d0, [r7, #16]
 8002c6a:	ed87 1b02 	vstr	d1, [r7, #8]
 8002c6e:	ed87 2b00 	vstr	d2, [r7]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->MyOutput   = Output;
 8002c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c74:	69fa      	ldr	r2, [r7, #28]
 8002c76:	65da      	str	r2, [r3, #92]	; 0x5c
	uPID->MyInput    = Input;
 8002c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7a:	6a3a      	ldr	r2, [r7, #32]
 8002c7c:	659a      	str	r2, [r3, #88]	; 0x58
	uPID->MySetpoint = Setpoint;
 8002c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	661a      	str	r2, [r3, #96]	; 0x60
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 8002c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c86:	2200      	movs	r2, #0
 8002c88:	705a      	strb	r2, [r3, #1]

	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 8002c8a:	ed9f 1b15 	vldr	d1, [pc, #84]	; 8002ce0 <PID+0x88>
 8002c8e:	ed9f 0b16 	vldr	d0, [pc, #88]	; 8002ce8 <PID+0x90>
 8002c92:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c94:	f000 f98d 	bl	8002fb2 <PID_SetOutputLimits>

	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 8002c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9a:	2264      	movs	r2, #100	; 0x64
 8002c9c:	609a      	str	r2, [r3, #8]

	PID_SetControllerDirection(uPID, ControllerDirection);
 8002c9e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002ca6:	f000 fad5 	bl	8003254 <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 8002caa:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002cae:	4619      	mov	r1, r3
 8002cb0:	ed97 2b00 	vldr	d2, [r7]
 8002cb4:	ed97 1b02 	vldr	d1, [r7, #8]
 8002cb8:	ed97 0b04 	vldr	d0, [r7, #16]
 8002cbc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002cbe:	f000 fa21 	bl	8003104 <PID_SetTunings2>

	uPID->LastTime = GetTime() - uPID->SampleTime;
 8002cc2:	f001 f819 	bl	8003cf8 <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	1ad2      	subs	r2, r2, r3
 8002cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd0:	605a      	str	r2, [r3, #4]

}
 8002cd2:	bf00      	nop
 8002cd4:	3728      	adds	r7, #40	; 0x28
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	f3af 8000 	nop.w
 8002ce0:	00000000 	.word	0x00000000
 8002ce4:	406fe000 	.word	0x406fe000
	...

08002cf0 <PID_Compute>:
	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
}

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID_Compute(PID_TypeDef *uPID)
{
 8002cf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cf4:	b08c      	sub	sp, #48	; 0x30
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
	double error;
	double dInput;
	double output;

	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!uPID->InAuto)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	785b      	ldrb	r3, [r3, #1]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d101      	bne.n	8002d06 <PID_Compute+0x16>
	{
		return _FALSE;
 8002d02:	2300      	movs	r3, #0
 8002d04:	e132      	b.n	8002f6c <PID_Compute+0x27c>
	}

	/* ~~~~~~~~~~ Calculate time ~~~~~~~~~~ */
	now        = GetTime();
 8002d06:	f000 fff7 	bl	8003cf8 <HAL_GetTick>
 8002d0a:	6278      	str	r0, [r7, #36]	; 0x24
	timeChange = (now - uPID->LastTime);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	623b      	str	r3, [r7, #32]

	if (timeChange >= uPID->SampleTime)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	6a3a      	ldr	r2, [r7, #32]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	f0c0 8124 	bcc.w	8002f6a <PID_Compute+0x27a>
	{
		/* ..... Compute all the working error variables ..... */
		input   = *uPID->MyInput;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d2a:	e9c7 2306 	strd	r2, r3, [r7, #24]
		error   = *uPID->MySetpoint - input;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d32:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d36:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d3a:	f7fd facd 	bl	80002d8 <__aeabi_dsub>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	460b      	mov	r3, r1
 8002d42:	e9c7 2304 	strd	r2, r3, [r7, #16]
		dInput  = (input - uPID->LastInput);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8002d4c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002d50:	f7fd fac2 	bl	80002d8 <__aeabi_dsub>
 8002d54:	4602      	mov	r2, r0
 8002d56:	460b      	mov	r3, r1
 8002d58:	e9c7 2302 	strd	r2, r3, [r7, #8]





		uPID->OutputSum     += (uPID->Ki * error);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	e9d3 ab1a 	ldrd	sl, fp, [r3, #104]	; 0x68
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8002d68:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002d6c:	f7fd fc6c 	bl	8000648 <__aeabi_dmul>
 8002d70:	4602      	mov	r2, r0
 8002d72:	460b      	mov	r3, r1
 8002d74:	4650      	mov	r0, sl
 8002d76:	4659      	mov	r1, fp
 8002d78:	f7fd fab0 	bl	80002dc <__adddf3>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	460b      	mov	r3, r1
 8002d80:	6879      	ldr	r1, [r7, #4]
 8002d82:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

		if (uPID->OutputSum > uPID->IMax)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8002d92:	f7fd fee9 	bl	8000b68 <__aeabi_dcmpgt>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d006      	beq.n	8002daa <PID_Compute+0xba>
				{
					uPID->OutputSum = uPID->IMax;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8002da2:	6879      	ldr	r1, [r7, #4]
 8002da4:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8002da8:	e010      	b.n	8002dcc <PID_Compute+0xdc>
				}
		else if (uPID->OutputSum < uPID->IMin)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8002db6:	f7fd feb9 	bl	8000b2c <__aeabi_dcmplt>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d005      	beq.n	8002dcc <PID_Compute+0xdc>
		{
			uPID->OutputSum = uPID->IMin;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8002dc6:	6879      	ldr	r1, [r7, #4]
 8002dc8:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68





		uPID->DispKi_part = uPID->OutputSum;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002dd2:	6879      	ldr	r1, [r7, #4]
 8002dd4:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
		/* ..... Add Proportional on Measurement, if P_ON_M is specified ..... */
		if (!uPID->POnE)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d114      	bne.n	8002e0a <PID_Compute+0x11a>
		{
			uPID->OutputSum -= uPID->Kp * dInput;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	e9d3 ab1a 	ldrd	sl, fp, [r3, #104]	; 0x68
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002dec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002df0:	f7fd fc2a 	bl	8000648 <__aeabi_dmul>
 8002df4:	4602      	mov	r2, r0
 8002df6:	460b      	mov	r3, r1
 8002df8:	4650      	mov	r0, sl
 8002dfa:	4659      	mov	r1, fp
 8002dfc:	f7fd fa6c 	bl	80002d8 <__aeabi_dsub>
 8002e00:	4602      	mov	r2, r0
 8002e02:	460b      	mov	r3, r1
 8002e04:	6879      	ldr	r1, [r7, #4]
 8002e06:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		}

		if (uPID->OutputSum > uPID->OutMax)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8002e16:	f7fd fea7 	bl	8000b68 <__aeabi_dcmpgt>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d006      	beq.n	8002e2e <PID_Compute+0x13e>
		{
			uPID->OutputSum = uPID->OutMax;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8002e26:	6879      	ldr	r1, [r7, #4]
 8002e28:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8002e2c:	e010      	b.n	8002e50 <PID_Compute+0x160>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8002e3a:	f7fd fe77 	bl	8000b2c <__aeabi_dcmplt>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d005      	beq.n	8002e50 <PID_Compute+0x160>
		{
			uPID->OutputSum = uPID->OutMin;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8002e4a:	6879      	ldr	r1, [r7, #4]
 8002e4c:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		}
		else { }
		uPID->DispKp_part = - uPID->Kp * dInput;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002e56:	4690      	mov	r8, r2
 8002e58:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8002e5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e60:	4640      	mov	r0, r8
 8002e62:	4649      	mov	r1, r9
 8002e64:	f7fd fbf0 	bl	8000648 <__aeabi_dmul>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	460b      	mov	r3, r1
 8002e6c:	6879      	ldr	r1, [r7, #4]
 8002e6e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40


		/* ..... Add Proportional on Error, if P_ON_E is specified ..... */
		if (uPID->POnE)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d017      	beq.n	8002eaa <PID_Compute+0x1ba>
		{
			output = uPID->Kp * error;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002e80:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002e84:	f7fd fbe0 	bl	8000648 <__aeabi_dmul>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			uPID->DispKp_part = uPID->Kp * error;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002e96:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002e9a:	f7fd fbd5 	bl	8000648 <__aeabi_dmul>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	6879      	ldr	r1, [r7, #4]
 8002ea4:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 8002ea8:	e005      	b.n	8002eb6 <PID_Compute+0x1c6>
		}
		else
		{
			output = 0;
 8002eaa:	f04f 0200 	mov.w	r2, #0
 8002eae:	f04f 0300 	mov.w	r3, #0
 8002eb2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}

		/* ..... Compute Rest of PID Output ..... */
		output += uPID->OutputSum - uPID->Kd * dInput;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	e9d3 891a 	ldrd	r8, r9, [r3, #104]	; 0x68
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002ec2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ec6:	f7fd fbbf 	bl	8000648 <__aeabi_dmul>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	460b      	mov	r3, r1
 8002ece:	4640      	mov	r0, r8
 8002ed0:	4649      	mov	r1, r9
 8002ed2:	f7fd fa01 	bl	80002d8 <__aeabi_dsub>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	460b      	mov	r3, r1
 8002eda:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002ede:	f7fd f9fd 	bl	80002dc <__adddf3>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	460b      	mov	r3, r1
 8002ee6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

		if (output > uPID->OutMax)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8002ef0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002ef4:	f7fd fe38 	bl	8000b68 <__aeabi_dcmpgt>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d005      	beq.n	8002f0a <PID_Compute+0x21a>
		{
			output = uPID->OutMax;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8002f04:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8002f08:	e00e      	b.n	8002f28 <PID_Compute+0x238>
		}
		else if (output < uPID->OutMin)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8002f10:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002f14:	f7fd fe0a 	bl	8000b2c <__aeabi_dcmplt>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d004      	beq.n	8002f28 <PID_Compute+0x238>
		{
			output = uPID->OutMin;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8002f24:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		else { }
		uPID->DispKd_part = - uPID->Kd * dInput;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002f2e:	4614      	mov	r4, r2
 8002f30:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002f34:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f38:	4620      	mov	r0, r4
 8002f3a:	4629      	mov	r1, r5
 8002f3c:	f7fd fb84 	bl	8000648 <__aeabi_dmul>
 8002f40:	4602      	mov	r2, r0
 8002f42:	460b      	mov	r3, r1
 8002f44:	6879      	ldr	r1, [r7, #4]
 8002f46:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50

		*uPID->MyOutput = output;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8002f4e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f52:	e9c1 2300 	strd	r2, r3, [r1]


		/* ..... Remember some variables for next time ..... */
		uPID->LastInput = input;
 8002f56:	6879      	ldr	r1, [r7, #4]
 8002f58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f5c:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
		uPID->LastTime = now;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f64:	605a      	str	r2, [r3, #4]

		return _TRUE;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e000      	b.n	8002f6c <PID_Compute+0x27c>

	}
	else
	{
		return _FALSE;
 8002f6a:	2300      	movs	r3, #0
	}

}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3730      	adds	r7, #48	; 0x30
 8002f70:	46bd      	mov	sp, r7
 8002f72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002f76 <PID_SetMode>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
 8002f76:	b580      	push	{r7, lr}
 8002f78:	b084      	sub	sp, #16
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	6078      	str	r0, [r7, #4]
 8002f7e:	460b      	mov	r3, r1
 8002f80:	70fb      	strb	r3, [r7, #3]

	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 8002f82:	78fb      	ldrb	r3, [r7, #3]
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	bf0c      	ite	eq
 8002f88:	2301      	moveq	r3, #1
 8002f8a:	2300      	movne	r3, #0
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	73fb      	strb	r3, [r7, #15]

	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 8002f90:	7bfb      	ldrb	r3, [r7, #15]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d006      	beq.n	8002fa4 <PID_SetMode+0x2e>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	785b      	ldrb	r3, [r3, #1]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d102      	bne.n	8002fa4 <PID_SetMode+0x2e>
	{
		PID_Init(uPID);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f7ff fe1f 	bl	8002be2 <PID_Init>
	}

	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	7bfa      	ldrb	r2, [r7, #15]
 8002fa8:	705a      	strb	r2, [r3, #1]

}
 8002faa:	bf00      	nop
 8002fac:	3710      	adds	r7, #16
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}

08002fb2 <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b086      	sub	sp, #24
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6178      	str	r0, [r7, #20]
 8002fba:	ed87 0b02 	vstr	d0, [r7, #8]
 8002fbe:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 8002fc2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002fc6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002fca:	f7fd fdc3 	bl	8000b54 <__aeabi_dcmpge>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d158      	bne.n	8003086 <PID_SetOutputLimits+0xd4>
	{
		return;
	}

	uPID->OutMin = Min;
 8002fd4:	6979      	ldr	r1, [r7, #20]
 8002fd6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002fda:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	uPID->OutMax = Max;
 8002fde:	6979      	ldr	r1, [r7, #20]
 8002fe0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002fe4:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80

	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	785b      	ldrb	r3, [r3, #1]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d04b      	beq.n	8003088 <PID_SetOutputLimits+0xd6>
	{

		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ff4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8002ffe:	f7fd fdb3 	bl	8000b68 <__aeabi_dcmpgt>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d007      	beq.n	8003018 <PID_SetOutputLimits+0x66>
		{
			*uPID->MyOutput = uPID->OutMax;
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8003012:	e9c1 2300 	strd	r2, r3, [r1]
 8003016:	e012      	b.n	800303e <PID_SetOutputLimits+0x8c>
		}
		else if (*uPID->MyOutput < uPID->OutMin)
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800301c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8003026:	f7fd fd81 	bl	8000b2c <__aeabi_dcmplt>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d006      	beq.n	800303e <PID_SetOutputLimits+0x8c>
		{
			*uPID->MyOutput = uPID->OutMin;
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 800303a:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }

		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 800304a:	f7fd fd8d 	bl	8000b68 <__aeabi_dcmpgt>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d006      	beq.n	8003062 <PID_SetOutputLimits+0xb0>
		{
			uPID->OutputSum = uPID->OutMax;
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 800305a:	6979      	ldr	r1, [r7, #20]
 800305c:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8003060:	e012      	b.n	8003088 <PID_SetOutputLimits+0xd6>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 800306e:	f7fd fd5d 	bl	8000b2c <__aeabi_dcmplt>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d007      	beq.n	8003088 <PID_SetOutputLimits+0xd6>
		{
			uPID->OutputSum = uPID->OutMin;
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 800307e:	6979      	ldr	r1, [r7, #20]
 8003080:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8003084:	e000      	b.n	8003088 <PID_SetOutputLimits+0xd6>
		return;
 8003086:	bf00      	nop
		}
		else { }

	}

}
 8003088:	3718      	adds	r7, #24
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <PID_SetILimits>:


/* ~~~~~~~~~~~~~~~~ PID I-windup Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetILimits(PID_TypeDef *uPID, double Min, double Max)
{
 800308e:	b580      	push	{r7, lr}
 8003090:	b086      	sub	sp, #24
 8003092:	af00      	add	r7, sp, #0
 8003094:	6178      	str	r0, [r7, #20]
 8003096:	ed87 0b02 	vstr	d0, [r7, #8]
 800309a:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 800309e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80030a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80030a6:	f7fd fd55 	bl	8000b54 <__aeabi_dcmpge>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d10a      	bne.n	80030c6 <PID_SetILimits+0x38>
	{
		return;
	}

	uPID->IMin = Min;
 80030b0:	6979      	ldr	r1, [r7, #20]
 80030b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80030b6:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
	uPID->IMax = Max;
 80030ba:	6979      	ldr	r1, [r7, #20]
 80030bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80030c0:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
 80030c4:	e000      	b.n	80030c8 <PID_SetILimits+0x3a>
		return;
 80030c6:	bf00      	nop
}
 80030c8:	3718      	adds	r7, #24
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}

080030ce <PID_SetTunings>:


/* ~~~~~~~~~~~~~~~~ PID Tunings ~~~~~~~~~~~~~~~~ */
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
 80030ce:	b580      	push	{r7, lr}
 80030d0:	b088      	sub	sp, #32
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	61f8      	str	r0, [r7, #28]
 80030d6:	ed87 0b04 	vstr	d0, [r7, #16]
 80030da:	ed87 1b02 	vstr	d1, [r7, #8]
 80030de:	ed87 2b00 	vstr	d2, [r7]
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	789b      	ldrb	r3, [r3, #2]
 80030e6:	4619      	mov	r1, r3
 80030e8:	ed97 2b00 	vldr	d2, [r7]
 80030ec:	ed97 1b02 	vldr	d1, [r7, #8]
 80030f0:	ed97 0b04 	vldr	d0, [r7, #16]
 80030f4:	69f8      	ldr	r0, [r7, #28]
 80030f6:	f000 f805 	bl	8003104 <PID_SetTunings2>
}
 80030fa:	bf00      	nop
 80030fc:	3720      	adds	r7, #32
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
	...

08003104 <PID_SetTunings2>:
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b08a      	sub	sp, #40	; 0x28
 8003108:	af00      	add	r7, sp, #0
 800310a:	61f8      	str	r0, [r7, #28]
 800310c:	ed87 0b04 	vstr	d0, [r7, #16]
 8003110:	ed87 1b02 	vstr	d1, [r7, #8]
 8003114:	ed87 2b00 	vstr	d2, [r7]
 8003118:	460b      	mov	r3, r1
 800311a:	76fb      	strb	r3, [r7, #27]

	double SampleTimeInSec;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 800311c:	f04f 0200 	mov.w	r2, #0
 8003120:	f04f 0300 	mov.w	r3, #0
 8003124:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003128:	f7fd fd00 	bl	8000b2c <__aeabi_dcmplt>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	f040 8089 	bne.w	8003246 <PID_SetTunings2+0x142>
 8003134:	f04f 0200 	mov.w	r2, #0
 8003138:	f04f 0300 	mov.w	r3, #0
 800313c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003140:	f7fd fcf4 	bl	8000b2c <__aeabi_dcmplt>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d17d      	bne.n	8003246 <PID_SetTunings2+0x142>
 800314a:	f04f 0200 	mov.w	r2, #0
 800314e:	f04f 0300 	mov.w	r3, #0
 8003152:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003156:	f7fd fce9 	bl	8000b2c <__aeabi_dcmplt>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d172      	bne.n	8003246 <PID_SetTunings2+0x142>
	{
		return;
	}

	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	7efa      	ldrb	r2, [r7, #27]
 8003164:	709a      	strb	r2, [r3, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 8003166:	7efb      	ldrb	r3, [r7, #27]
 8003168:	2b01      	cmp	r3, #1
 800316a:	bf0c      	ite	eq
 800316c:	2301      	moveq	r3, #1
 800316e:	2300      	movne	r3, #0
 8003170:	b2db      	uxtb	r3, r3
 8003172:	461a      	mov	r2, r3
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	701a      	strb	r2, [r3, #0]

	uPID->DispKp = Kp;
 8003178:	69f9      	ldr	r1, [r7, #28]
 800317a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800317e:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uPID->DispKi = Ki;
 8003182:	69f9      	ldr	r1, [r7, #28]
 8003184:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003188:	e9c1 2306 	strd	r2, r3, [r1, #24]
	uPID->DispKd = Kd;
 800318c:	69f9      	ldr	r1, [r7, #28]
 800318e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003192:	e9c1 2308 	strd	r2, r3, [r1, #32]

	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	4618      	mov	r0, r3
 800319c:	f7fd f9da 	bl	8000554 <__aeabi_ui2d>
 80031a0:	f04f 0200 	mov.w	r2, #0
 80031a4:	4b2a      	ldr	r3, [pc, #168]	; (8003250 <PID_SetTunings2+0x14c>)
 80031a6:	f7fd fb79 	bl	800089c <__aeabi_ddiv>
 80031aa:	4602      	mov	r2, r0
 80031ac:	460b      	mov	r3, r1
 80031ae:	e9c7 2308 	strd	r2, r3, [r7, #32]

	uPID->Kp = Kp;
 80031b2:	69f9      	ldr	r1, [r7, #28]
 80031b4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80031b8:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 80031bc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80031c0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80031c4:	f7fd fa40 	bl	8000648 <__aeabi_dmul>
 80031c8:	4602      	mov	r2, r0
 80031ca:	460b      	mov	r3, r1
 80031cc:	69f9      	ldr	r1, [r7, #28]
 80031ce:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 80031d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80031d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80031da:	f7fd fb5f 	bl	800089c <__aeabi_ddiv>
 80031de:	4602      	mov	r2, r0
 80031e0:	460b      	mov	r3, r1
 80031e2:	69f9      	ldr	r1, [r7, #28]
 80031e4:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	78db      	ldrb	r3, [r3, #3]
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d12b      	bne.n	8003248 <PID_SetTunings2+0x144>
	{

		uPID->Kp = (0 - uPID->Kp);
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80031f6:	f04f 0000 	mov.w	r0, #0
 80031fa:	f04f 0100 	mov.w	r1, #0
 80031fe:	f7fd f86b 	bl	80002d8 <__aeabi_dsub>
 8003202:	4602      	mov	r2, r0
 8003204:	460b      	mov	r3, r1
 8003206:	69f9      	ldr	r1, [r7, #28]
 8003208:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003212:	f04f 0000 	mov.w	r0, #0
 8003216:	f04f 0100 	mov.w	r1, #0
 800321a:	f7fd f85d 	bl	80002d8 <__aeabi_dsub>
 800321e:	4602      	mov	r2, r0
 8003220:	460b      	mov	r3, r1
 8003222:	69f9      	ldr	r1, [r7, #28]
 8003224:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800322e:	f04f 0000 	mov.w	r0, #0
 8003232:	f04f 0100 	mov.w	r1, #0
 8003236:	f7fd f84f 	bl	80002d8 <__aeabi_dsub>
 800323a:	4602      	mov	r2, r0
 800323c:	460b      	mov	r3, r1
 800323e:	69f9      	ldr	r1, [r7, #28]
 8003240:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8003244:	e000      	b.n	8003248 <PID_SetTunings2+0x144>
		return;
 8003246:	bf00      	nop

	}

}
 8003248:	3728      	adds	r7, #40	; 0x28
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	408f4000 	.word	0x408f4000

08003254 <PID_SetControllerDirection>:


/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	460b      	mov	r3, r1
 800325e:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	785b      	ldrb	r3, [r3, #1]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d02e      	beq.n	80032c6 <PID_SetControllerDirection+0x72>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	78db      	ldrb	r3, [r3, #3]
 800326c:	78fa      	ldrb	r2, [r7, #3]
 800326e:	429a      	cmp	r2, r3
 8003270:	d029      	beq.n	80032c6 <PID_SetControllerDirection+0x72>
	{

		uPID->Kp = (0 - uPID->Kp);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003278:	f04f 0000 	mov.w	r0, #0
 800327c:	f04f 0100 	mov.w	r1, #0
 8003280:	f7fd f82a 	bl	80002d8 <__aeabi_dsub>
 8003284:	4602      	mov	r2, r0
 8003286:	460b      	mov	r3, r1
 8003288:	6879      	ldr	r1, [r7, #4]
 800328a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003294:	f04f 0000 	mov.w	r0, #0
 8003298:	f04f 0100 	mov.w	r1, #0
 800329c:	f7fd f81c 	bl	80002d8 <__aeabi_dsub>
 80032a0:	4602      	mov	r2, r0
 80032a2:	460b      	mov	r3, r1
 80032a4:	6879      	ldr	r1, [r7, #4]
 80032a6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80032b0:	f04f 0000 	mov.w	r0, #0
 80032b4:	f04f 0100 	mov.w	r1, #0
 80032b8:	f7fd f80e 	bl	80002d8 <__aeabi_dsub>
 80032bc:	4602      	mov	r2, r0
 80032be:	460b      	mov	r3, r1
 80032c0:	6879      	ldr	r1, [r7, #4]
 80032c2:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	}

	uPID->ControllerDirection = Direction;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	78fa      	ldrb	r2, [r7, #3]
 80032ca:	70da      	strb	r2, [r3, #3]

}
 80032cc:	bf00      	nop
 80032ce:	3708      	adds	r7, #8
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}

080032d4 <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime)
{
 80032d4:	b5b0      	push	{r4, r5, r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]

	double ratio;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	dd2e      	ble.n	8003342 <PID_SetSampleTime+0x6e>
	{

		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 80032e4:	6838      	ldr	r0, [r7, #0]
 80032e6:	f7fd f945 	bl	8000574 <__aeabi_i2d>
 80032ea:	4604      	mov	r4, r0
 80032ec:	460d      	mov	r5, r1
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	4618      	mov	r0, r3
 80032f4:	f7fd f92e 	bl	8000554 <__aeabi_ui2d>
 80032f8:	4602      	mov	r2, r0
 80032fa:	460b      	mov	r3, r1
 80032fc:	4620      	mov	r0, r4
 80032fe:	4629      	mov	r1, r5
 8003300:	f7fd facc 	bl	800089c <__aeabi_ddiv>
 8003304:	4602      	mov	r2, r0
 8003306:	460b      	mov	r3, r1
 8003308:	e9c7 2302 	strd	r2, r3, [r7, #8]

		uPID->Ki *= ratio;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8003312:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003316:	f7fd f997 	bl	8000648 <__aeabi_dmul>
 800331a:	4602      	mov	r2, r0
 800331c:	460b      	mov	r3, r1
 800331e:	6879      	ldr	r1, [r7, #4]
 8003320:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd /= ratio;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800332a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800332e:	f7fd fab5 	bl	800089c <__aeabi_ddiv>
 8003332:	4602      	mov	r2, r0
 8003334:	460b      	mov	r3, r1
 8003336:	6879      	ldr	r1, [r7, #4]
 8003338:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 800333c:	683a      	ldr	r2, [r7, #0]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	609a      	str	r2, [r3, #8]

	}

}
 8003342:	bf00      	nop
 8003344:	3710      	adds	r7, #16
 8003346:	46bd      	mov	sp, r7
 8003348:	bdb0      	pop	{r4, r5, r7, pc}

0800334a <PID_GetPpart>:
{
	return uPID->DispKd;
}

double PID_GetPpart(PID_TypeDef *uPID)
{
 800334a:	b480      	push	{r7}
 800334c:	b083      	sub	sp, #12
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]
	return uPID->DispKp_part;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8003358:	ec43 2b17 	vmov	d7, r2, r3
}
 800335c:	eeb0 0a47 	vmov.f32	s0, s14
 8003360:	eef0 0a67 	vmov.f32	s1, s15
 8003364:	370c      	adds	r7, #12
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr

0800336e <PID_GetIpart>:
double PID_GetIpart(PID_TypeDef *uPID)
{
 800336e:	b480      	push	{r7}
 8003370:	b083      	sub	sp, #12
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
	return uPID->DispKi_part;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800337c:	ec43 2b17 	vmov	d7, r2, r3
}
 8003380:	eeb0 0a47 	vmov.f32	s0, s14
 8003384:	eef0 0a67 	vmov.f32	s1, s15
 8003388:	370c      	adds	r7, #12
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr

08003392 <PID_GetDpart>:
double PID_GetDpart(PID_TypeDef *uPID)
{
 8003392:	b480      	push	{r7}
 8003394:	b083      	sub	sp, #12
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
	return uPID->DispKd_part;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80033a0:	ec43 2b17 	vmov	d7, r2, r3
}
 80033a4:	eeb0 0a47 	vmov.f32	s0, s14
 80033a8:	eef0 0a67 	vmov.f32	s1, s15
 80033ac:	370c      	adds	r7, #12
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
	...

080033b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033be:	4b0f      	ldr	r3, [pc, #60]	; (80033fc <HAL_MspInit+0x44>)
 80033c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033c2:	4a0e      	ldr	r2, [pc, #56]	; (80033fc <HAL_MspInit+0x44>)
 80033c4:	f043 0301 	orr.w	r3, r3, #1
 80033c8:	6613      	str	r3, [r2, #96]	; 0x60
 80033ca:	4b0c      	ldr	r3, [pc, #48]	; (80033fc <HAL_MspInit+0x44>)
 80033cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033ce:	f003 0301 	and.w	r3, r3, #1
 80033d2:	607b      	str	r3, [r7, #4]
 80033d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80033d6:	4b09      	ldr	r3, [pc, #36]	; (80033fc <HAL_MspInit+0x44>)
 80033d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033da:	4a08      	ldr	r2, [pc, #32]	; (80033fc <HAL_MspInit+0x44>)
 80033dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033e0:	6593      	str	r3, [r2, #88]	; 0x58
 80033e2:	4b06      	ldr	r3, [pc, #24]	; (80033fc <HAL_MspInit+0x44>)
 80033e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ea:	603b      	str	r3, [r7, #0]
 80033ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80033ee:	f004 f881 	bl	80074f4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033f2:	bf00      	nop
 80033f4:	3708      	adds	r7, #8
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	40021000 	.word	0x40021000

08003400 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b09c      	sub	sp, #112	; 0x70
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003408:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800340c:	2200      	movs	r2, #0
 800340e:	601a      	str	r2, [r3, #0]
 8003410:	605a      	str	r2, [r3, #4]
 8003412:	609a      	str	r2, [r3, #8]
 8003414:	60da      	str	r2, [r3, #12]
 8003416:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003418:	f107 0318 	add.w	r3, r7, #24
 800341c:	2244      	movs	r2, #68	; 0x44
 800341e:	2100      	movs	r1, #0
 8003420:	4618      	mov	r0, r3
 8003422:	f00a f91f 	bl	800d664 <memset>
  if(hadc->Instance==ADC1)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800342e:	d17f      	bne.n	8003530 <HAL_ADC_MspInit+0x130>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003430:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003434:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8003436:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800343a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800343c:	f107 0318 	add.w	r3, r7, #24
 8003440:	4618      	mov	r0, r3
 8003442:	f004 fd9b 	bl	8007f7c <HAL_RCCEx_PeriphCLKConfig>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d001      	beq.n	8003450 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800344c:	f7ff fb36 	bl	8002abc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003450:	4b39      	ldr	r3, [pc, #228]	; (8003538 <HAL_ADC_MspInit+0x138>)
 8003452:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003454:	4a38      	ldr	r2, [pc, #224]	; (8003538 <HAL_ADC_MspInit+0x138>)
 8003456:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800345a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800345c:	4b36      	ldr	r3, [pc, #216]	; (8003538 <HAL_ADC_MspInit+0x138>)
 800345e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003460:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003464:	617b      	str	r3, [r7, #20]
 8003466:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003468:	4b33      	ldr	r3, [pc, #204]	; (8003538 <HAL_ADC_MspInit+0x138>)
 800346a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800346c:	4a32      	ldr	r2, [pc, #200]	; (8003538 <HAL_ADC_MspInit+0x138>)
 800346e:	f043 0301 	orr.w	r3, r3, #1
 8003472:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003474:	4b30      	ldr	r3, [pc, #192]	; (8003538 <HAL_ADC_MspInit+0x138>)
 8003476:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003478:	f003 0301 	and.w	r3, r3, #1
 800347c:	613b      	str	r3, [r7, #16]
 800347e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003480:	4b2d      	ldr	r3, [pc, #180]	; (8003538 <HAL_ADC_MspInit+0x138>)
 8003482:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003484:	4a2c      	ldr	r2, [pc, #176]	; (8003538 <HAL_ADC_MspInit+0x138>)
 8003486:	f043 0302 	orr.w	r3, r3, #2
 800348a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800348c:	4b2a      	ldr	r3, [pc, #168]	; (8003538 <HAL_ADC_MspInit+0x138>)
 800348e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003490:	f003 0302 	and.w	r3, r3, #2
 8003494:	60fb      	str	r3, [r7, #12]
 8003496:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA3     ------> ADC1_IN4
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = THERMOCOUPLE_Pin|CURRENT_Pin|AMBIENT_TEMP_Pin;
 8003498:	230b      	movs	r3, #11
 800349a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800349c:	2303      	movs	r3, #3
 800349e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a0:	2300      	movs	r3, #0
 80034a2:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034a4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80034a8:	4619      	mov	r1, r3
 80034aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034ae:	f003 fc8d 	bl	8006dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUSVOLTAGE_Pin;
 80034b2:	2301      	movs	r3, #1
 80034b4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034b6:	2303      	movs	r3, #3
 80034b8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ba:	2300      	movs	r3, #0
 80034bc:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(BUSVOLTAGE_GPIO_Port, &GPIO_InitStruct);
 80034be:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80034c2:	4619      	mov	r1, r3
 80034c4:	481d      	ldr	r0, [pc, #116]	; (800353c <HAL_ADC_MspInit+0x13c>)
 80034c6:	f003 fc81 	bl	8006dcc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80034ca:	4b1d      	ldr	r3, [pc, #116]	; (8003540 <HAL_ADC_MspInit+0x140>)
 80034cc:	4a1d      	ldr	r2, [pc, #116]	; (8003544 <HAL_ADC_MspInit+0x144>)
 80034ce:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80034d0:	4b1b      	ldr	r3, [pc, #108]	; (8003540 <HAL_ADC_MspInit+0x140>)
 80034d2:	2205      	movs	r2, #5
 80034d4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80034d6:	4b1a      	ldr	r3, [pc, #104]	; (8003540 <HAL_ADC_MspInit+0x140>)
 80034d8:	2200      	movs	r2, #0
 80034da:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80034dc:	4b18      	ldr	r3, [pc, #96]	; (8003540 <HAL_ADC_MspInit+0x140>)
 80034de:	2200      	movs	r2, #0
 80034e0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80034e2:	4b17      	ldr	r3, [pc, #92]	; (8003540 <HAL_ADC_MspInit+0x140>)
 80034e4:	2280      	movs	r2, #128	; 0x80
 80034e6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80034e8:	4b15      	ldr	r3, [pc, #84]	; (8003540 <HAL_ADC_MspInit+0x140>)
 80034ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034ee:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80034f0:	4b13      	ldr	r3, [pc, #76]	; (8003540 <HAL_ADC_MspInit+0x140>)
 80034f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034f6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80034f8:	4b11      	ldr	r3, [pc, #68]	; (8003540 <HAL_ADC_MspInit+0x140>)
 80034fa:	2220      	movs	r2, #32
 80034fc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80034fe:	4b10      	ldr	r3, [pc, #64]	; (8003540 <HAL_ADC_MspInit+0x140>)
 8003500:	2200      	movs	r2, #0
 8003502:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003504:	480e      	ldr	r0, [pc, #56]	; (8003540 <HAL_ADC_MspInit+0x140>)
 8003506:	f002 febd 	bl	8006284 <HAL_DMA_Init>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d001      	beq.n	8003514 <HAL_ADC_MspInit+0x114>
    {
      Error_Handler();
 8003510:	f7ff fad4 	bl	8002abc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4a0a      	ldr	r2, [pc, #40]	; (8003540 <HAL_ADC_MspInit+0x140>)
 8003518:	655a      	str	r2, [r3, #84]	; 0x54
 800351a:	4a09      	ldr	r2, [pc, #36]	; (8003540 <HAL_ADC_MspInit+0x140>)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8003520:	2200      	movs	r2, #0
 8003522:	2100      	movs	r1, #0
 8003524:	2012      	movs	r0, #18
 8003526:	f002 fd8e 	bl	8006046 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800352a:	2012      	movs	r0, #18
 800352c:	f002 fda5 	bl	800607a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003530:	bf00      	nop
 8003532:	3770      	adds	r7, #112	; 0x70
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	40021000 	.word	0x40021000
 800353c:	48000400 	.word	0x48000400
 8003540:	200016b8 	.word	0x200016b8
 8003544:	40020008 	.word	0x40020008

08003548 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8003548:	b480      	push	{r7}
 800354a:	b085      	sub	sp, #20
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a0a      	ldr	r2, [pc, #40]	; (8003580 <HAL_CRC_MspInit+0x38>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d10b      	bne.n	8003572 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800355a:	4b0a      	ldr	r3, [pc, #40]	; (8003584 <HAL_CRC_MspInit+0x3c>)
 800355c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800355e:	4a09      	ldr	r2, [pc, #36]	; (8003584 <HAL_CRC_MspInit+0x3c>)
 8003560:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003564:	6493      	str	r3, [r2, #72]	; 0x48
 8003566:	4b07      	ldr	r3, [pc, #28]	; (8003584 <HAL_CRC_MspInit+0x3c>)
 8003568:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800356a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800356e:	60fb      	str	r3, [r7, #12]
 8003570:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8003572:	bf00      	nop
 8003574:	3714      	adds	r7, #20
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
 800357e:	bf00      	nop
 8003580:	40023000 	.word	0x40023000
 8003584:	40021000 	.word	0x40021000

08003588 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b09a      	sub	sp, #104	; 0x68
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003590:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003594:	2200      	movs	r2, #0
 8003596:	601a      	str	r2, [r3, #0]
 8003598:	605a      	str	r2, [r3, #4]
 800359a:	609a      	str	r2, [r3, #8]
 800359c:	60da      	str	r2, [r3, #12]
 800359e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80035a0:	f107 0310 	add.w	r3, r7, #16
 80035a4:	2244      	movs	r2, #68	; 0x44
 80035a6:	2100      	movs	r1, #0
 80035a8:	4618      	mov	r0, r3
 80035aa:	f00a f85b 	bl	800d664 <memset>
  if(hi2c->Instance==I2C1)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a1f      	ldr	r2, [pc, #124]	; (8003630 <HAL_I2C_MspInit+0xa8>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d136      	bne.n	8003626 <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80035b8:	2340      	movs	r3, #64	; 0x40
 80035ba:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80035bc:	2300      	movs	r3, #0
 80035be:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80035c0:	f107 0310 	add.w	r3, r7, #16
 80035c4:	4618      	mov	r0, r3
 80035c6:	f004 fcd9 	bl	8007f7c <HAL_RCCEx_PeriphCLKConfig>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d001      	beq.n	80035d4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80035d0:	f7ff fa74 	bl	8002abc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035d4:	4b17      	ldr	r3, [pc, #92]	; (8003634 <HAL_I2C_MspInit+0xac>)
 80035d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035d8:	4a16      	ldr	r2, [pc, #88]	; (8003634 <HAL_I2C_MspInit+0xac>)
 80035da:	f043 0302 	orr.w	r3, r3, #2
 80035de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80035e0:	4b14      	ldr	r3, [pc, #80]	; (8003634 <HAL_I2C_MspInit+0xac>)
 80035e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035e4:	f003 0302 	and.w	r3, r3, #2
 80035e8:	60fb      	str	r3, [r7, #12]
 80035ea:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8-BOOT0     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80035ec:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80035f0:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80035f2:	2312      	movs	r3, #18
 80035f4:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f6:	2300      	movs	r3, #0
 80035f8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035fa:	2300      	movs	r3, #0
 80035fc:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80035fe:	2304      	movs	r3, #4
 8003600:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003602:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003606:	4619      	mov	r1, r3
 8003608:	480b      	ldr	r0, [pc, #44]	; (8003638 <HAL_I2C_MspInit+0xb0>)
 800360a:	f003 fbdf 	bl	8006dcc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800360e:	4b09      	ldr	r3, [pc, #36]	; (8003634 <HAL_I2C_MspInit+0xac>)
 8003610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003612:	4a08      	ldr	r2, [pc, #32]	; (8003634 <HAL_I2C_MspInit+0xac>)
 8003614:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003618:	6593      	str	r3, [r2, #88]	; 0x58
 800361a:	4b06      	ldr	r3, [pc, #24]	; (8003634 <HAL_I2C_MspInit+0xac>)
 800361c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800361e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003622:	60bb      	str	r3, [r7, #8]
 8003624:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003626:	bf00      	nop
 8003628:	3768      	adds	r7, #104	; 0x68
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	40005400 	.word	0x40005400
 8003634:	40021000 	.word	0x40021000
 8003638:	48000400 	.word	0x48000400

0800363c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b08a      	sub	sp, #40	; 0x28
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003644:	f107 0314 	add.w	r3, r7, #20
 8003648:	2200      	movs	r2, #0
 800364a:	601a      	str	r2, [r3, #0]
 800364c:	605a      	str	r2, [r3, #4]
 800364e:	609a      	str	r2, [r3, #8]
 8003650:	60da      	str	r2, [r3, #12]
 8003652:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a17      	ldr	r2, [pc, #92]	; (80036b8 <HAL_SPI_MspInit+0x7c>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d127      	bne.n	80036ae <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800365e:	4b17      	ldr	r3, [pc, #92]	; (80036bc <HAL_SPI_MspInit+0x80>)
 8003660:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003662:	4a16      	ldr	r2, [pc, #88]	; (80036bc <HAL_SPI_MspInit+0x80>)
 8003664:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003668:	6613      	str	r3, [r2, #96]	; 0x60
 800366a:	4b14      	ldr	r3, [pc, #80]	; (80036bc <HAL_SPI_MspInit+0x80>)
 800366c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800366e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003672:	613b      	str	r3, [r7, #16]
 8003674:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003676:	4b11      	ldr	r3, [pc, #68]	; (80036bc <HAL_SPI_MspInit+0x80>)
 8003678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800367a:	4a10      	ldr	r2, [pc, #64]	; (80036bc <HAL_SPI_MspInit+0x80>)
 800367c:	f043 0302 	orr.w	r3, r3, #2
 8003680:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003682:	4b0e      	ldr	r3, [pc, #56]	; (80036bc <HAL_SPI_MspInit+0x80>)
 8003684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003686:	f003 0302 	and.w	r3, r3, #2
 800368a:	60fb      	str	r3, [r7, #12]
 800368c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800368e:	2328      	movs	r3, #40	; 0x28
 8003690:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003692:	2302      	movs	r3, #2
 8003694:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003696:	2300      	movs	r3, #0
 8003698:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800369a:	2300      	movs	r3, #0
 800369c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800369e:	2305      	movs	r3, #5
 80036a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036a2:	f107 0314 	add.w	r3, r7, #20
 80036a6:	4619      	mov	r1, r3
 80036a8:	4805      	ldr	r0, [pc, #20]	; (80036c0 <HAL_SPI_MspInit+0x84>)
 80036aa:	f003 fb8f 	bl	8006dcc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80036ae:	bf00      	nop
 80036b0:	3728      	adds	r7, #40	; 0x28
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	40013000 	.word	0x40013000
 80036bc:	40021000 	.word	0x40021000
 80036c0:	48000400 	.word	0x48000400

080036c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b086      	sub	sp, #24
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036d4:	d10c      	bne.n	80036f0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80036d6:	4b1e      	ldr	r3, [pc, #120]	; (8003750 <HAL_TIM_Base_MspInit+0x8c>)
 80036d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036da:	4a1d      	ldr	r2, [pc, #116]	; (8003750 <HAL_TIM_Base_MspInit+0x8c>)
 80036dc:	f043 0301 	orr.w	r3, r3, #1
 80036e0:	6593      	str	r3, [r2, #88]	; 0x58
 80036e2:	4b1b      	ldr	r3, [pc, #108]	; (8003750 <HAL_TIM_Base_MspInit+0x8c>)
 80036e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e6:	f003 0301 	and.w	r3, r3, #1
 80036ea:	617b      	str	r3, [r7, #20]
 80036ec:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80036ee:	e02a      	b.n	8003746 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM16)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a17      	ldr	r2, [pc, #92]	; (8003754 <HAL_TIM_Base_MspInit+0x90>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d114      	bne.n	8003724 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80036fa:	4b15      	ldr	r3, [pc, #84]	; (8003750 <HAL_TIM_Base_MspInit+0x8c>)
 80036fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036fe:	4a14      	ldr	r2, [pc, #80]	; (8003750 <HAL_TIM_Base_MspInit+0x8c>)
 8003700:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003704:	6613      	str	r3, [r2, #96]	; 0x60
 8003706:	4b12      	ldr	r3, [pc, #72]	; (8003750 <HAL_TIM_Base_MspInit+0x8c>)
 8003708:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800370a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800370e:	613b      	str	r3, [r7, #16]
 8003710:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8003712:	2200      	movs	r2, #0
 8003714:	2100      	movs	r1, #0
 8003716:	2019      	movs	r0, #25
 8003718:	f002 fc95 	bl	8006046 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800371c:	2019      	movs	r0, #25
 800371e:	f002 fcac 	bl	800607a <HAL_NVIC_EnableIRQ>
}
 8003722:	e010      	b.n	8003746 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM17)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a0b      	ldr	r2, [pc, #44]	; (8003758 <HAL_TIM_Base_MspInit+0x94>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d10b      	bne.n	8003746 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800372e:	4b08      	ldr	r3, [pc, #32]	; (8003750 <HAL_TIM_Base_MspInit+0x8c>)
 8003730:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003732:	4a07      	ldr	r2, [pc, #28]	; (8003750 <HAL_TIM_Base_MspInit+0x8c>)
 8003734:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003738:	6613      	str	r3, [r2, #96]	; 0x60
 800373a:	4b05      	ldr	r3, [pc, #20]	; (8003750 <HAL_TIM_Base_MspInit+0x8c>)
 800373c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800373e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003742:	60fb      	str	r3, [r7, #12]
 8003744:	68fb      	ldr	r3, [r7, #12]
}
 8003746:	bf00      	nop
 8003748:	3718      	adds	r7, #24
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	40021000 	.word	0x40021000
 8003754:	40014400 	.word	0x40014400
 8003758:	40014800 	.word	0x40014800

0800375c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b08a      	sub	sp, #40	; 0x28
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003764:	f107 0314 	add.w	r3, r7, #20
 8003768:	2200      	movs	r2, #0
 800376a:	601a      	str	r2, [r3, #0]
 800376c:	605a      	str	r2, [r3, #4]
 800376e:	609a      	str	r2, [r3, #8]
 8003770:	60da      	str	r2, [r3, #12]
 8003772:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a1b      	ldr	r2, [pc, #108]	; (80037e8 <HAL_TIM_Encoder_MspInit+0x8c>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d130      	bne.n	80037e0 <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800377e:	4b1b      	ldr	r3, [pc, #108]	; (80037ec <HAL_TIM_Encoder_MspInit+0x90>)
 8003780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003782:	4a1a      	ldr	r2, [pc, #104]	; (80037ec <HAL_TIM_Encoder_MspInit+0x90>)
 8003784:	f043 0302 	orr.w	r3, r3, #2
 8003788:	6593      	str	r3, [r2, #88]	; 0x58
 800378a:	4b18      	ldr	r3, [pc, #96]	; (80037ec <HAL_TIM_Encoder_MspInit+0x90>)
 800378c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800378e:	f003 0302 	and.w	r3, r3, #2
 8003792:	613b      	str	r3, [r7, #16]
 8003794:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003796:	4b15      	ldr	r3, [pc, #84]	; (80037ec <HAL_TIM_Encoder_MspInit+0x90>)
 8003798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800379a:	4a14      	ldr	r2, [pc, #80]	; (80037ec <HAL_TIM_Encoder_MspInit+0x90>)
 800379c:	f043 0301 	orr.w	r3, r3, #1
 80037a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80037a2:	4b12      	ldr	r3, [pc, #72]	; (80037ec <HAL_TIM_Encoder_MspInit+0x90>)
 80037a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037a6:	f003 0301 	and.w	r3, r3, #1
 80037aa:	60fb      	str	r3, [r7, #12]
 80037ac:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80037ae:	2350      	movs	r3, #80	; 0x50
 80037b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037b2:	2302      	movs	r3, #2
 80037b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037b6:	2300      	movs	r3, #0
 80037b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037ba:	2300      	movs	r3, #0
 80037bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80037be:	2302      	movs	r3, #2
 80037c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037c2:	f107 0314 	add.w	r3, r7, #20
 80037c6:	4619      	mov	r1, r3
 80037c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037cc:	f003 fafe 	bl	8006dcc <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80037d0:	2200      	movs	r2, #0
 80037d2:	2100      	movs	r1, #0
 80037d4:	201d      	movs	r0, #29
 80037d6:	f002 fc36 	bl	8006046 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80037da:	201d      	movs	r0, #29
 80037dc:	f002 fc4d 	bl	800607a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80037e0:	bf00      	nop
 80037e2:	3728      	adds	r7, #40	; 0x28
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	40000400 	.word	0x40000400
 80037ec:	40021000 	.word	0x40021000

080037f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b08a      	sub	sp, #40	; 0x28
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037f8:	f107 0314 	add.w	r3, r7, #20
 80037fc:	2200      	movs	r2, #0
 80037fe:	601a      	str	r2, [r3, #0]
 8003800:	605a      	str	r2, [r3, #4]
 8003802:	609a      	str	r2, [r3, #8]
 8003804:	60da      	str	r2, [r3, #12]
 8003806:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003810:	d11d      	bne.n	800384e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003812:	4b22      	ldr	r3, [pc, #136]	; (800389c <HAL_TIM_MspPostInit+0xac>)
 8003814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003816:	4a21      	ldr	r2, [pc, #132]	; (800389c <HAL_TIM_MspPostInit+0xac>)
 8003818:	f043 0301 	orr.w	r3, r3, #1
 800381c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800381e:	4b1f      	ldr	r3, [pc, #124]	; (800389c <HAL_TIM_MspPostInit+0xac>)
 8003820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003822:	f003 0301 	and.w	r3, r3, #1
 8003826:	613b      	str	r3, [r7, #16]
 8003828:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = BUZZER_Pin;
 800382a:	2320      	movs	r3, #32
 800382c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800382e:	2302      	movs	r3, #2
 8003830:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003832:	2300      	movs	r3, #0
 8003834:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003836:	2300      	movs	r3, #0
 8003838:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800383a:	2301      	movs	r3, #1
 800383c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 800383e:	f107 0314 	add.w	r3, r7, #20
 8003842:	4619      	mov	r1, r3
 8003844:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003848:	f003 fac0 	bl	8006dcc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 800384c:	e021      	b.n	8003892 <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM17)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a13      	ldr	r2, [pc, #76]	; (80038a0 <HAL_TIM_MspPostInit+0xb0>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d11c      	bne.n	8003892 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003858:	4b10      	ldr	r3, [pc, #64]	; (800389c <HAL_TIM_MspPostInit+0xac>)
 800385a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800385c:	4a0f      	ldr	r2, [pc, #60]	; (800389c <HAL_TIM_MspPostInit+0xac>)
 800385e:	f043 0301 	orr.w	r3, r3, #1
 8003862:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003864:	4b0d      	ldr	r3, [pc, #52]	; (800389c <HAL_TIM_MspPostInit+0xac>)
 8003866:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003868:	f003 0301 	and.w	r3, r3, #1
 800386c:	60fb      	str	r3, [r7, #12]
 800386e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = HEATER_Pin;
 8003870:	2380      	movs	r3, #128	; 0x80
 8003872:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003874:	2302      	movs	r3, #2
 8003876:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003878:	2300      	movs	r3, #0
 800387a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800387c:	2300      	movs	r3, #0
 800387e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8003880:	2301      	movs	r3, #1
 8003882:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(HEATER_GPIO_Port, &GPIO_InitStruct);
 8003884:	f107 0314 	add.w	r3, r7, #20
 8003888:	4619      	mov	r1, r3
 800388a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800388e:	f003 fa9d 	bl	8006dcc <HAL_GPIO_Init>
}
 8003892:	bf00      	nop
 8003894:	3728      	adds	r7, #40	; 0x28
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	40021000 	.word	0x40021000
 80038a0:	40014800 	.word	0x40014800

080038a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b09a      	sub	sp, #104	; 0x68
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038ac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80038b0:	2200      	movs	r2, #0
 80038b2:	601a      	str	r2, [r3, #0]
 80038b4:	605a      	str	r2, [r3, #4]
 80038b6:	609a      	str	r2, [r3, #8]
 80038b8:	60da      	str	r2, [r3, #12]
 80038ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80038bc:	f107 0310 	add.w	r3, r7, #16
 80038c0:	2244      	movs	r2, #68	; 0x44
 80038c2:	2100      	movs	r1, #0
 80038c4:	4618      	mov	r0, r3
 80038c6:	f009 fecd 	bl	800d664 <memset>
  if(huart->Instance==USART2)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a23      	ldr	r2, [pc, #140]	; (800395c <HAL_UART_MspInit+0xb8>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d13f      	bne.n	8003954 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80038d4:	2302      	movs	r3, #2
 80038d6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80038d8:	2300      	movs	r3, #0
 80038da:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80038dc:	f107 0310 	add.w	r3, r7, #16
 80038e0:	4618      	mov	r0, r3
 80038e2:	f004 fb4b 	bl	8007f7c <HAL_RCCEx_PeriphCLKConfig>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d001      	beq.n	80038f0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80038ec:	f7ff f8e6 	bl	8002abc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80038f0:	4b1b      	ldr	r3, [pc, #108]	; (8003960 <HAL_UART_MspInit+0xbc>)
 80038f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f4:	4a1a      	ldr	r2, [pc, #104]	; (8003960 <HAL_UART_MspInit+0xbc>)
 80038f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038fa:	6593      	str	r3, [r2, #88]	; 0x58
 80038fc:	4b18      	ldr	r3, [pc, #96]	; (8003960 <HAL_UART_MspInit+0xbc>)
 80038fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003900:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003904:	60fb      	str	r3, [r7, #12]
 8003906:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003908:	4b15      	ldr	r3, [pc, #84]	; (8003960 <HAL_UART_MspInit+0xbc>)
 800390a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800390c:	4a14      	ldr	r2, [pc, #80]	; (8003960 <HAL_UART_MspInit+0xbc>)
 800390e:	f043 0301 	orr.w	r3, r3, #1
 8003912:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003914:	4b12      	ldr	r3, [pc, #72]	; (8003960 <HAL_UART_MspInit+0xbc>)
 8003916:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003918:	f003 0301 	and.w	r3, r3, #1
 800391c:	60bb      	str	r3, [r7, #8]
 800391e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8003920:	f248 0304 	movw	r3, #32772	; 0x8004
 8003924:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003926:	2302      	movs	r3, #2
 8003928:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800392a:	2300      	movs	r3, #0
 800392c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800392e:	2303      	movs	r3, #3
 8003930:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003932:	2307      	movs	r3, #7
 8003934:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003936:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800393a:	4619      	mov	r1, r3
 800393c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003940:	f003 fa44 	bl	8006dcc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003944:	2200      	movs	r2, #0
 8003946:	2100      	movs	r1, #0
 8003948:	2026      	movs	r0, #38	; 0x26
 800394a:	f002 fb7c 	bl	8006046 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800394e:	2026      	movs	r0, #38	; 0x26
 8003950:	f002 fb93 	bl	800607a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003954:	bf00      	nop
 8003956:	3768      	adds	r7, #104	; 0x68
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}
 800395c:	40004400 	.word	0x40004400
 8003960:	40021000 	.word	0x40021000

08003964 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003964:	b480      	push	{r7}
 8003966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003968:	e7fe      	b.n	8003968 <NMI_Handler+0x4>

0800396a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800396a:	b480      	push	{r7}
 800396c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800396e:	e7fe      	b.n	800396e <HardFault_Handler+0x4>

08003970 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003970:	b480      	push	{r7}
 8003972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003974:	e7fe      	b.n	8003974 <MemManage_Handler+0x4>

08003976 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003976:	b480      	push	{r7}
 8003978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800397a:	e7fe      	b.n	800397a <BusFault_Handler+0x4>

0800397c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800397c:	b480      	push	{r7}
 800397e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003980:	e7fe      	b.n	8003980 <UsageFault_Handler+0x4>

08003982 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003982:	b480      	push	{r7}
 8003984:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003986:	bf00      	nop
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003990:	b480      	push	{r7}
 8003992:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003994:	bf00      	nop
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr

0800399e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800399e:	b480      	push	{r7}
 80039a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80039a2:	bf00      	nop
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80039b0:	f000 f990 	bl	8003cd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80039b4:	bf00      	nop
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80039bc:	4802      	ldr	r0, [pc, #8]	; (80039c8 <DMA1_Channel1_IRQHandler+0x10>)
 80039be:	f002 fe44 	bl	800664a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80039c2:	bf00      	nop
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	200016b8 	.word	0x200016b8

080039cc <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80039d0:	4802      	ldr	r0, [pc, #8]	; (80039dc <ADC1_2_IRQHandler+0x10>)
 80039d2:	f000 ff3f 	bl	8004854 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80039d6:	bf00      	nop
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	2000164c 	.word	0x2000164c

080039e0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC_BUTTON_Pin);
 80039e4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80039e8:	f003 fba2 	bl	8007130 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80039ec:	bf00      	nop
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80039f4:	4802      	ldr	r0, [pc, #8]	; (8003a00 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80039f6:	f005 f869 	bl	8008acc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80039fa:	bf00      	nop
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	20001884 	.word	0x20001884

08003a04 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003a08:	4802      	ldr	r0, [pc, #8]	; (8003a14 <TIM3_IRQHandler+0x10>)
 8003a0a:	f005 f85f 	bl	8008acc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003a0e:	bf00      	nop
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	20001838 	.word	0x20001838

08003a18 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003a1c:	4802      	ldr	r0, [pc, #8]	; (8003a28 <USART2_IRQHandler+0x10>)
 8003a1e:	f006 fab3 	bl	8009f88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003a22:	bf00      	nop
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	2000191c 	.word	0x2000191c

08003a2c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	af00      	add	r7, sp, #0
	return 1;
 8003a30:	2301      	movs	r3, #1
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <_kill>:

int _kill(int pid, int sig)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003a46:	f009 fe6f 	bl	800d728 <__errno>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2216      	movs	r2, #22
 8003a4e:	601a      	str	r2, [r3, #0]
	return -1;
 8003a50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3708      	adds	r7, #8
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <_exit>:

void _exit (int status)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b082      	sub	sp, #8
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003a64:	f04f 31ff 	mov.w	r1, #4294967295
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f7ff ffe7 	bl	8003a3c <_kill>
	while (1) {}		/* Make sure we hang here */
 8003a6e:	e7fe      	b.n	8003a6e <_exit+0x12>

08003a70 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b086      	sub	sp, #24
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	60f8      	str	r0, [r7, #12]
 8003a78:	60b9      	str	r1, [r7, #8]
 8003a7a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	617b      	str	r3, [r7, #20]
 8003a80:	e00a      	b.n	8003a98 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003a82:	f3af 8000 	nop.w
 8003a86:	4601      	mov	r1, r0
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	1c5a      	adds	r2, r3, #1
 8003a8c:	60ba      	str	r2, [r7, #8]
 8003a8e:	b2ca      	uxtb	r2, r1
 8003a90:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	3301      	adds	r3, #1
 8003a96:	617b      	str	r3, [r7, #20]
 8003a98:	697a      	ldr	r2, [r7, #20]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	dbf0      	blt.n	8003a82 <_read+0x12>
	}

return len;
 8003aa0:	687b      	ldr	r3, [r7, #4]
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3718      	adds	r7, #24
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}

08003aaa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003aaa:	b580      	push	{r7, lr}
 8003aac:	b086      	sub	sp, #24
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	60f8      	str	r0, [r7, #12]
 8003ab2:	60b9      	str	r1, [r7, #8]
 8003ab4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	617b      	str	r3, [r7, #20]
 8003aba:	e009      	b.n	8003ad0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	1c5a      	adds	r2, r3, #1
 8003ac0:	60ba      	str	r2, [r7, #8]
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	3301      	adds	r3, #1
 8003ace:	617b      	str	r3, [r7, #20]
 8003ad0:	697a      	ldr	r2, [r7, #20]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	dbf1      	blt.n	8003abc <_write+0x12>
	}
	return len;
 8003ad8:	687b      	ldr	r3, [r7, #4]
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3718      	adds	r7, #24
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}

08003ae2 <_close>:

int _close(int file)
{
 8003ae2:	b480      	push	{r7}
 8003ae4:	b083      	sub	sp, #12
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	6078      	str	r0, [r7, #4]
	return -1;
 8003aea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	370c      	adds	r7, #12
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr

08003afa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003afa:	b480      	push	{r7}
 8003afc:	b083      	sub	sp, #12
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
 8003b02:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003b0a:	605a      	str	r2, [r3, #4]
	return 0;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	370c      	adds	r7, #12
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr

08003b1a <_isatty>:

int _isatty(int file)
{
 8003b1a:	b480      	push	{r7}
 8003b1c:	b083      	sub	sp, #12
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
	return 1;
 8003b22:	2301      	movs	r3, #1
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	370c      	adds	r7, #12
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr

08003b30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b085      	sub	sp, #20
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	607a      	str	r2, [r7, #4]
	return 0;
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3714      	adds	r7, #20
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr
	...

08003b4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b086      	sub	sp, #24
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003b54:	4a14      	ldr	r2, [pc, #80]	; (8003ba8 <_sbrk+0x5c>)
 8003b56:	4b15      	ldr	r3, [pc, #84]	; (8003bac <_sbrk+0x60>)
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003b60:	4b13      	ldr	r3, [pc, #76]	; (8003bb0 <_sbrk+0x64>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d102      	bne.n	8003b6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003b68:	4b11      	ldr	r3, [pc, #68]	; (8003bb0 <_sbrk+0x64>)
 8003b6a:	4a12      	ldr	r2, [pc, #72]	; (8003bb4 <_sbrk+0x68>)
 8003b6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003b6e:	4b10      	ldr	r3, [pc, #64]	; (8003bb0 <_sbrk+0x64>)
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4413      	add	r3, r2
 8003b76:	693a      	ldr	r2, [r7, #16]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d207      	bcs.n	8003b8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003b7c:	f009 fdd4 	bl	800d728 <__errno>
 8003b80:	4603      	mov	r3, r0
 8003b82:	220c      	movs	r2, #12
 8003b84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003b86:	f04f 33ff 	mov.w	r3, #4294967295
 8003b8a:	e009      	b.n	8003ba0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003b8c:	4b08      	ldr	r3, [pc, #32]	; (8003bb0 <_sbrk+0x64>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003b92:	4b07      	ldr	r3, [pc, #28]	; (8003bb0 <_sbrk+0x64>)
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4413      	add	r3, r2
 8003b9a:	4a05      	ldr	r2, [pc, #20]	; (8003bb0 <_sbrk+0x64>)
 8003b9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
	}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3718      	adds	r7, #24
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	20008000 	.word	0x20008000
 8003bac:	00000400 	.word	0x00000400
 8003bb0:	20001a48 	.word	0x20001a48
 8003bb4:	20001bb8 	.word	0x20001bb8

08003bb8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003bbc:	4b06      	ldr	r3, [pc, #24]	; (8003bd8 <SystemInit+0x20>)
 8003bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bc2:	4a05      	ldr	r2, [pc, #20]	; (8003bd8 <SystemInit+0x20>)
 8003bc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003bc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003bcc:	bf00      	nop
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop
 8003bd8:	e000ed00 	.word	0xe000ed00

08003bdc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
	  ldr   r0, =_estack
 8003bdc:	480d      	ldr	r0, [pc, #52]	; (8003c14 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003bde:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003be0:	480d      	ldr	r0, [pc, #52]	; (8003c18 <LoopForever+0x6>)
  ldr r1, =_edata
 8003be2:	490e      	ldr	r1, [pc, #56]	; (8003c1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003be4:	4a0e      	ldr	r2, [pc, #56]	; (8003c20 <LoopForever+0xe>)
  movs r3, #0
 8003be6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003be8:	e002      	b.n	8003bf0 <LoopCopyDataInit>

08003bea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003bea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003bec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003bee:	3304      	adds	r3, #4

08003bf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003bf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003bf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003bf4:	d3f9      	bcc.n	8003bea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003bf6:	4a0b      	ldr	r2, [pc, #44]	; (8003c24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003bf8:	4c0b      	ldr	r4, [pc, #44]	; (8003c28 <LoopForever+0x16>)
  movs r3, #0
 8003bfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003bfc:	e001      	b.n	8003c02 <LoopFillZerobss>

08003bfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003bfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c00:	3204      	adds	r2, #4

08003c02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c04:	d3fb      	bcc.n	8003bfe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003c06:	f7ff ffd7 	bl	8003bb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003c0a:	f009 fd93 	bl	800d734 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003c0e:	f7fe f863 	bl	8001cd8 <main>

08003c12 <LoopForever>:

LoopForever:
    b LoopForever
 8003c12:	e7fe      	b.n	8003c12 <LoopForever>
	  ldr   r0, =_estack
 8003c14:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003c18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c1c:	20000280 	.word	0x20000280
  ldr r2, =_sidata
 8003c20:	08013a88 	.word	0x08013a88
  ldr r2, =_sbss
 8003c24:	20000280 	.word	0x20000280
  ldr r4, =_ebss
 8003c28:	20001bb4 	.word	0x20001bb4

08003c2c <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003c2c:	e7fe      	b.n	8003c2c <COMP1_2_3_IRQHandler>

08003c2e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c2e:	b580      	push	{r7, lr}
 8003c30:	b082      	sub	sp, #8
 8003c32:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003c34:	2300      	movs	r3, #0
 8003c36:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c38:	2003      	movs	r0, #3
 8003c3a:	f002 f9f9 	bl	8006030 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003c3e:	2000      	movs	r0, #0
 8003c40:	f000 f80e 	bl	8003c60 <HAL_InitTick>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d002      	beq.n	8003c50 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	71fb      	strb	r3, [r7, #7]
 8003c4e:	e001      	b.n	8003c54 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003c50:	f7ff fbb2 	bl	80033b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003c54:	79fb      	ldrb	r3, [r7, #7]

}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3708      	adds	r7, #8
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
	...

08003c60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003c6c:	4b16      	ldr	r3, [pc, #88]	; (8003cc8 <HAL_InitTick+0x68>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d022      	beq.n	8003cba <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003c74:	4b15      	ldr	r3, [pc, #84]	; (8003ccc <HAL_InitTick+0x6c>)
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	4b13      	ldr	r3, [pc, #76]	; (8003cc8 <HAL_InitTick+0x68>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003c80:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f002 fa04 	bl	8006096 <HAL_SYSTICK_Config>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d10f      	bne.n	8003cb4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2b0f      	cmp	r3, #15
 8003c98:	d809      	bhi.n	8003cae <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	6879      	ldr	r1, [r7, #4]
 8003c9e:	f04f 30ff 	mov.w	r0, #4294967295
 8003ca2:	f002 f9d0 	bl	8006046 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003ca6:	4a0a      	ldr	r2, [pc, #40]	; (8003cd0 <HAL_InitTick+0x70>)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6013      	str	r3, [r2, #0]
 8003cac:	e007      	b.n	8003cbe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	73fb      	strb	r3, [r7, #15]
 8003cb2:	e004      	b.n	8003cbe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	73fb      	strb	r3, [r7, #15]
 8003cb8:	e001      	b.n	8003cbe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3710      	adds	r7, #16
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	20000060 	.word	0x20000060
 8003ccc:	20000058 	.word	0x20000058
 8003cd0:	2000005c 	.word	0x2000005c

08003cd4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003cd8:	4b05      	ldr	r3, [pc, #20]	; (8003cf0 <HAL_IncTick+0x1c>)
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	4b05      	ldr	r3, [pc, #20]	; (8003cf4 <HAL_IncTick+0x20>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4413      	add	r3, r2
 8003ce2:	4a03      	ldr	r2, [pc, #12]	; (8003cf0 <HAL_IncTick+0x1c>)
 8003ce4:	6013      	str	r3, [r2, #0]
}
 8003ce6:	bf00      	nop
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr
 8003cf0:	20001a4c 	.word	0x20001a4c
 8003cf4:	20000060 	.word	0x20000060

08003cf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	af00      	add	r7, sp, #0
  return uwTick;
 8003cfc:	4b03      	ldr	r3, [pc, #12]	; (8003d0c <HAL_GetTick+0x14>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	20001a4c 	.word	0x20001a4c

08003d10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d18:	f7ff ffee 	bl	8003cf8 <HAL_GetTick>
 8003d1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d28:	d004      	beq.n	8003d34 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d2a:	4b09      	ldr	r3, [pc, #36]	; (8003d50 <HAL_Delay+0x40>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	68fa      	ldr	r2, [r7, #12]
 8003d30:	4413      	add	r3, r2
 8003d32:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003d34:	bf00      	nop
 8003d36:	f7ff ffdf 	bl	8003cf8 <HAL_GetTick>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	68fa      	ldr	r2, [r7, #12]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d8f7      	bhi.n	8003d36 <HAL_Delay+0x26>
  {
  }
}
 8003d46:	bf00      	nop
 8003d48:	bf00      	nop
 8003d4a:	3710      	adds	r7, #16
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	20000060 	.word	0x20000060

08003d54 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	431a      	orrs	r2, r3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	609a      	str	r2, [r3, #8]
}
 8003d6e:	bf00      	nop
 8003d70:	370c      	adds	r7, #12
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr

08003d7a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003d7a:	b480      	push	{r7}
 8003d7c:	b083      	sub	sp, #12
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
 8003d82:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	431a      	orrs	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	609a      	str	r2, [r3, #8]
}
 8003d94:	bf00      	nop
 8003d96:	370c      	adds	r7, #12
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr

08003da0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	370c      	adds	r7, #12
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b087      	sub	sp, #28
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	60b9      	str	r1, [r7, #8]
 8003dc6:	607a      	str	r2, [r7, #4]
 8003dc8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	3360      	adds	r3, #96	; 0x60
 8003dce:	461a      	mov	r2, r3
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	4413      	add	r3, r2
 8003dd6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	4b08      	ldr	r3, [pc, #32]	; (8003e00 <LL_ADC_SetOffset+0x44>)
 8003dde:	4013      	ands	r3, r2
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003de6:	683a      	ldr	r2, [r7, #0]
 8003de8:	430a      	orrs	r2, r1
 8003dea:	4313      	orrs	r3, r2
 8003dec:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003df4:	bf00      	nop
 8003df6:	371c      	adds	r7, #28
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr
 8003e00:	03fff000 	.word	0x03fff000

08003e04 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b085      	sub	sp, #20
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	3360      	adds	r3, #96	; 0x60
 8003e12:	461a      	mov	r2, r3
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	4413      	add	r3, r2
 8003e1a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3714      	adds	r7, #20
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b087      	sub	sp, #28
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	3360      	adds	r3, #96	; 0x60
 8003e40:	461a      	mov	r2, r3
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	009b      	lsls	r3, r3, #2
 8003e46:	4413      	add	r3, r2
 8003e48:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	431a      	orrs	r2, r3
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003e5a:	bf00      	nop
 8003e5c:	371c      	adds	r7, #28
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr

08003e66 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003e66:	b480      	push	{r7}
 8003e68:	b087      	sub	sp, #28
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	60f8      	str	r0, [r7, #12]
 8003e6e:	60b9      	str	r1, [r7, #8]
 8003e70:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	3360      	adds	r3, #96	; 0x60
 8003e76:	461a      	mov	r2, r3
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	4413      	add	r3, r2
 8003e7e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	431a      	orrs	r2, r3
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003e90:	bf00      	nop
 8003e92:	371c      	adds	r7, #28
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b087      	sub	sp, #28
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	3360      	adds	r3, #96	; 0x60
 8003eac:	461a      	mov	r2, r3
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	4413      	add	r3, r2
 8003eb4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	431a      	orrs	r2, r3
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003ec6:	bf00      	nop
 8003ec8:	371c      	adds	r7, #28
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr

08003ed2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003ed2:	b480      	push	{r7}
 8003ed4:	b083      	sub	sp, #12
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
 8003eda:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	695b      	ldr	r3, [r3, #20]
 8003ee0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	431a      	orrs	r2, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	615a      	str	r2, [r3, #20]
}
 8003eec:	bf00      	nop
 8003eee:	370c      	adds	r7, #12
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d101      	bne.n	8003f10 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e000      	b.n	8003f12 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	370c      	adds	r7, #12
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr

08003f1e <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003f1e:	b480      	push	{r7}
 8003f20:	b087      	sub	sp, #28
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	60f8      	str	r0, [r7, #12]
 8003f26:	60b9      	str	r1, [r7, #8]
 8003f28:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	3330      	adds	r3, #48	; 0x30
 8003f2e:	461a      	mov	r2, r3
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	0a1b      	lsrs	r3, r3, #8
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	f003 030c 	and.w	r3, r3, #12
 8003f3a:	4413      	add	r3, r2
 8003f3c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	f003 031f 	and.w	r3, r3, #31
 8003f48:	211f      	movs	r1, #31
 8003f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f4e:	43db      	mvns	r3, r3
 8003f50:	401a      	ands	r2, r3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	0e9b      	lsrs	r3, r3, #26
 8003f56:	f003 011f 	and.w	r1, r3, #31
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	f003 031f 	and.w	r3, r3, #31
 8003f60:	fa01 f303 	lsl.w	r3, r1, r3
 8003f64:	431a      	orrs	r2, r3
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003f6a:	bf00      	nop
 8003f6c:	371c      	adds	r7, #28
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr

08003f76 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003f76:	b480      	push	{r7}
 8003f78:	b083      	sub	sp, #12
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f82:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d101      	bne.n	8003f8e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e000      	b.n	8003f90 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8003f8e:	2300      	movs	r3, #0
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	370c      	adds	r7, #12
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b087      	sub	sp, #28
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	3314      	adds	r3, #20
 8003fac:	461a      	mov	r2, r3
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	0e5b      	lsrs	r3, r3, #25
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	f003 0304 	and.w	r3, r3, #4
 8003fb8:	4413      	add	r3, r2
 8003fba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	0d1b      	lsrs	r3, r3, #20
 8003fc4:	f003 031f 	and.w	r3, r3, #31
 8003fc8:	2107      	movs	r1, #7
 8003fca:	fa01 f303 	lsl.w	r3, r1, r3
 8003fce:	43db      	mvns	r3, r3
 8003fd0:	401a      	ands	r2, r3
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	0d1b      	lsrs	r3, r3, #20
 8003fd6:	f003 031f 	and.w	r3, r3, #31
 8003fda:	6879      	ldr	r1, [r7, #4]
 8003fdc:	fa01 f303 	lsl.w	r3, r1, r3
 8003fe0:	431a      	orrs	r2, r3
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003fe6:	bf00      	nop
 8003fe8:	371c      	adds	r7, #28
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr
	...

08003ff4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b085      	sub	sp, #20
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	60b9      	str	r1, [r7, #8]
 8003ffe:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a0f      	ldr	r2, [pc, #60]	; (8004040 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d10a      	bne.n	800401e <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004014:	431a      	orrs	r2, r3
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 800401c:	e00a      	b.n	8004034 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800402a:	43db      	mvns	r3, r3
 800402c:	401a      	ands	r2, r3
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8004034:	bf00      	nop
 8004036:	3714      	adds	r7, #20
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr
 8004040:	407f0000 	.word	0x407f0000

08004044 <LL_ADC_SetAnalogWDMonitChannels>:
  *         (7) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC4, ADC5.\n
  *          -  On this STM32 series, all ADCx are not available on all devices. Refer to device datasheet for more details.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDChannelGroup)
{
 8004044:	b480      	push	{r7}
 8004046:	b087      	sub	sp, #28
 8004048:	af00      	add	r7, sp, #0
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	60b9      	str	r1, [r7, #8]
 800404e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "AWDChannelGroup" with bits position  */
  /* in register and register position depending on parameter "AWDy".         */
  /* Parameters "AWDChannelGroup" and "AWDy" are used with masks because      */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	330c      	adds	r3, #12
 8004054:	4618      	mov	r0, r3
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	0d1b      	lsrs	r3, r3, #20
 800405a:	f003 0103 	and.w	r1, r3, #3
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	f003 0201 	and.w	r2, r3, #1
 8004064:	4613      	mov	r3, r2
 8004066:	00db      	lsls	r3, r3, #3
 8004068:	4413      	add	r3, r2
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	440b      	add	r3, r1
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	4403      	add	r3, r0
 8004072:	617b      	str	r3, [r7, #20]
                                             + ((AWDy & ADC_AWD_CR12_REGOFFSETGAP_MASK) * ADC_AWD_CR12_REGOFFSETGAP_VAL));

  MODIFY_REG(*preg,
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	f023 4302 	bic.w	r3, r3, #2181038080	; 0x82000000
 800407e:	f423 1360 	bic.w	r3, r3, #3670016	; 0x380000
 8004082:	43db      	mvns	r3, r3
 8004084:	401a      	ands	r2, r3
 8004086:	6879      	ldr	r1, [r7, #4]
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	400b      	ands	r3, r1
 800408c:	431a      	orrs	r2, r3
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	601a      	str	r2, [r3, #0]
             (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
             AWDChannelGroup & AWDy);
}
 8004092:	bf00      	nop
 8004094:	371c      	adds	r7, #28
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr

0800409e <LL_ADC_ConfigAnalogWDThresholds>:
  * @param  AWDThresholdLowValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ConfigAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDThresholdHighValue,
                                                     uint32_t AWDThresholdLowValue)
{
 800409e:	b480      	push	{r7}
 80040a0:	b087      	sub	sp, #28
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	60f8      	str	r0, [r7, #12]
 80040a6:	60b9      	str	r1, [r7, #8]
 80040a8:	607a      	str	r2, [r7, #4]
 80040aa:	603b      	str	r3, [r7, #0]
  /* Set bits with content of parameter "AWDThresholdxxxValue" with bits      */
  /* position in register and register position depending on parameter        */
  /* "AWDy".                                                                  */
  /* Parameters "AWDy" and "AWDThresholdxxxValue" are used with masks because */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->TR1, ((AWDy & ADC_AWD_TRX_REGOFFSET_MASK) >> ADC_AWD_TRX_REGOFFSET_POS));
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	3320      	adds	r3, #32
 80040b0:	461a      	mov	r2, r3
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	0d1b      	lsrs	r3, r3, #20
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	f003 030c 	and.w	r3, r3, #12
 80040bc:	4413      	add	r3, r2
 80040be:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 22f0 	and.w	r2, r3, #4026593280	; 0xf000f000
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	0419      	lsls	r1, r3, #16
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	430b      	orrs	r3, r1
 80040d0:	431a      	orrs	r2, r3
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	601a      	str	r2, [r3, #0]
             ADC_TR1_HT1 | ADC_TR1_LT1,
             (AWDThresholdHighValue << ADC_TR1_HT1_BITOFFSET_POS) | AWDThresholdLowValue);
}
 80040d6:	bf00      	nop
 80040d8:	371c      	adds	r7, #28
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr

080040e2 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80040e2:	b480      	push	{r7}
 80040e4:	b083      	sub	sp, #12
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f003 031f 	and.w	r3, r3, #31
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	370c      	adds	r7, #12
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr

080040fe <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80040fe:	b480      	push	{r7}
 8004100:	b083      	sub	sp, #12
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800410e:	4618      	mov	r0, r3
 8004110:	370c      	adds	r7, #12
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr

0800411a <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800411a:	b480      	push	{r7}
 800411c:	b083      	sub	sp, #12
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800412a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	6093      	str	r3, [r2, #8]
}
 8004132:	bf00      	nop
 8004134:	370c      	adds	r7, #12
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr

0800413e <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800413e:	b480      	push	{r7}
 8004140:	b083      	sub	sp, #12
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800414e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004152:	d101      	bne.n	8004158 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004154:	2301      	movs	r3, #1
 8004156:	e000      	b.n	800415a <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004158:	2300      	movs	r3, #0
}
 800415a:	4618      	mov	r0, r3
 800415c:	370c      	adds	r7, #12
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr

08004166 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004166:	b480      	push	{r7}
 8004168:	b083      	sub	sp, #12
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004176:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800417a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004182:	bf00      	nop
 8004184:	370c      	adds	r7, #12
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr

0800418e <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800418e:	b480      	push	{r7}
 8004190:	b083      	sub	sp, #12
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800419e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041a2:	d101      	bne.n	80041a8 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80041a4:	2301      	movs	r3, #1
 80041a6:	e000      	b.n	80041aa <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	370c      	adds	r7, #12
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr

080041b6 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80041b6:	b480      	push	{r7}
 80041b8:	b083      	sub	sp, #12
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80041c6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80041ca:	f043 0201 	orr.w	r2, r3, #1
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80041d2:	bf00      	nop
 80041d4:	370c      	adds	r7, #12
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr

080041de <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80041de:	b480      	push	{r7}
 80041e0:	b083      	sub	sp, #12
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80041ee:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80041f2:	f043 0202 	orr.w	r2, r3, #2
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80041fa:	bf00      	nop
 80041fc:	370c      	adds	r7, #12
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr

08004206 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004206:	b480      	push	{r7}
 8004208:	b083      	sub	sp, #12
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f003 0301 	and.w	r3, r3, #1
 8004216:	2b01      	cmp	r3, #1
 8004218:	d101      	bne.n	800421e <LL_ADC_IsEnabled+0x18>
 800421a:	2301      	movs	r3, #1
 800421c:	e000      	b.n	8004220 <LL_ADC_IsEnabled+0x1a>
 800421e:	2300      	movs	r3, #0
}
 8004220:	4618      	mov	r0, r3
 8004222:	370c      	adds	r7, #12
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800422c:	b480      	push	{r7}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	f003 0302 	and.w	r3, r3, #2
 800423c:	2b02      	cmp	r3, #2
 800423e:	d101      	bne.n	8004244 <LL_ADC_IsDisableOngoing+0x18>
 8004240:	2301      	movs	r3, #1
 8004242:	e000      	b.n	8004246 <LL_ADC_IsDisableOngoing+0x1a>
 8004244:	2300      	movs	r3, #0
}
 8004246:	4618      	mov	r0, r3
 8004248:	370c      	adds	r7, #12
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr

08004252 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004252:	b480      	push	{r7}
 8004254:	b083      	sub	sp, #12
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004262:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004266:	f043 0204 	orr.w	r2, r3, #4
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800426e:	bf00      	nop
 8004270:	370c      	adds	r7, #12
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr

0800427a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800427a:	b480      	push	{r7}
 800427c:	b083      	sub	sp, #12
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	f003 0304 	and.w	r3, r3, #4
 800428a:	2b04      	cmp	r3, #4
 800428c:	d101      	bne.n	8004292 <LL_ADC_REG_IsConversionOngoing+0x18>
 800428e:	2301      	movs	r3, #1
 8004290:	e000      	b.n	8004294 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004292:	2300      	movs	r3, #0
}
 8004294:	4618      	mov	r0, r3
 8004296:	370c      	adds	r7, #12
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	f003 0308 	and.w	r3, r3, #8
 80042b0:	2b08      	cmp	r3, #8
 80042b2:	d101      	bne.n	80042b8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80042b4:	2301      	movs	r3, #1
 80042b6:	e000      	b.n	80042ba <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	370c      	adds	r7, #12
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr

080042c6 <LL_ADC_ClearFlag_AWD1>:
  * @rmtoll ISR      AWD1           LL_ADC_ClearFlag_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD1(ADC_TypeDef *ADCx)
{
 80042c6:	b480      	push	{r7}
 80042c8:	b083      	sub	sp, #12
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2280      	movs	r2, #128	; 0x80
 80042d2:	601a      	str	r2, [r3, #0]
}
 80042d4:	bf00      	nop
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr

080042e0 <LL_ADC_ClearFlag_AWD2>:
  * @rmtoll ISR      AWD2           LL_ADC_ClearFlag_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD2(ADC_TypeDef *ADCx)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80042ee:	601a      	str	r2, [r3, #0]
}
 80042f0:	bf00      	nop
 80042f2:	370c      	adds	r7, #12
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <LL_ADC_ClearFlag_AWD3>:
  * @rmtoll ISR      AWD3           LL_ADC_ClearFlag_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f44f 7200 	mov.w	r2, #512	; 0x200
 800430a:	601a      	str	r2, [r3, #0]
}
 800430c:	bf00      	nop
 800430e:	370c      	adds	r7, #12
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <LL_ADC_EnableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	605a      	str	r2, [r3, #4]
}
 800432c:	bf00      	nop
 800432e:	370c      	adds	r7, #12
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr

08004338 <LL_ADC_EnableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_EnableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx)
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	605a      	str	r2, [r3, #4]
}
 800434c:	bf00      	nop
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <LL_ADC_EnableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_EnableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD3(ADC_TypeDef *ADCx)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	605a      	str	r2, [r3, #4]
}
 800436c:	bf00      	nop
 800436e:	370c      	adds	r7, #12
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr

08004378 <LL_ADC_DisableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_DisableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
{
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	605a      	str	r2, [r3, #4]
}
 800438c:	bf00      	nop
 800438e:	370c      	adds	r7, #12
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr

08004398 <LL_ADC_DisableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_DisableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
{
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	605a      	str	r2, [r3, #4]
}
 80043ac:	bf00      	nop
 80043ae:	370c      	adds	r7, #12
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr

080043b8 <LL_ADC_DisableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_DisableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	605a      	str	r2, [r3, #4]
}
 80043cc:	bf00      	nop
 80043ce:	370c      	adds	r7, #12
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr

080043d8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80043d8:	b590      	push	{r4, r7, lr}
 80043da:	b089      	sub	sp, #36	; 0x24
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043e0:	2300      	movs	r3, #0
 80043e2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80043e4:	2300      	movs	r3, #0
 80043e6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d101      	bne.n	80043f2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e177      	b.n	80046e2 <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	695b      	ldr	r3, [r3, #20]
 80043f6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d109      	bne.n	8004414 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f7fe fffd 	bl	8003400 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4618      	mov	r0, r3
 800441a:	f7ff fe90 	bl	800413e <LL_ADC_IsDeepPowerDownEnabled>
 800441e:	4603      	mov	r3, r0
 8004420:	2b00      	cmp	r3, #0
 8004422:	d004      	beq.n	800442e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4618      	mov	r0, r3
 800442a:	f7ff fe76 	bl	800411a <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4618      	mov	r0, r3
 8004434:	f7ff feab 	bl	800418e <LL_ADC_IsInternalRegulatorEnabled>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d115      	bne.n	800446a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4618      	mov	r0, r3
 8004444:	f7ff fe8f 	bl	8004166 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004448:	4b9c      	ldr	r3, [pc, #624]	; (80046bc <HAL_ADC_Init+0x2e4>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	099b      	lsrs	r3, r3, #6
 800444e:	4a9c      	ldr	r2, [pc, #624]	; (80046c0 <HAL_ADC_Init+0x2e8>)
 8004450:	fba2 2303 	umull	r2, r3, r2, r3
 8004454:	099b      	lsrs	r3, r3, #6
 8004456:	3301      	adds	r3, #1
 8004458:	005b      	lsls	r3, r3, #1
 800445a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800445c:	e002      	b.n	8004464 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	3b01      	subs	r3, #1
 8004462:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d1f9      	bne.n	800445e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4618      	mov	r0, r3
 8004470:	f7ff fe8d 	bl	800418e <LL_ADC_IsInternalRegulatorEnabled>
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d10d      	bne.n	8004496 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800447e:	f043 0210 	orr.w	r2, r3, #16
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800448a:	f043 0201 	orr.w	r2, r3, #1
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4618      	mov	r0, r3
 800449c:	f7ff feed 	bl	800427a <LL_ADC_REG_IsConversionOngoing>
 80044a0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044a6:	f003 0310 	and.w	r3, r3, #16
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	f040 8110 	bne.w	80046d0 <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	f040 810c 	bne.w	80046d0 <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044bc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80044c0:	f043 0202 	orr.w	r2, r3, #2
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4618      	mov	r0, r3
 80044ce:	f7ff fe9a 	bl	8004206 <LL_ADC_IsEnabled>
 80044d2:	4603      	mov	r3, r0
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d111      	bne.n	80044fc <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80044d8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80044dc:	f7ff fe93 	bl	8004206 <LL_ADC_IsEnabled>
 80044e0:	4604      	mov	r4, r0
 80044e2:	4878      	ldr	r0, [pc, #480]	; (80046c4 <HAL_ADC_Init+0x2ec>)
 80044e4:	f7ff fe8f 	bl	8004206 <LL_ADC_IsEnabled>
 80044e8:	4603      	mov	r3, r0
 80044ea:	4323      	orrs	r3, r4
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d105      	bne.n	80044fc <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	4619      	mov	r1, r3
 80044f6:	4874      	ldr	r0, [pc, #464]	; (80046c8 <HAL_ADC_Init+0x2f0>)
 80044f8:	f7ff fc2c 	bl	8003d54 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	7f5b      	ldrb	r3, [r3, #29]
 8004500:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004506:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800450c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8004512:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800451a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800451c:	4313      	orrs	r3, r2
 800451e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004526:	2b01      	cmp	r3, #1
 8004528:	d106      	bne.n	8004538 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800452e:	3b01      	subs	r3, #1
 8004530:	045b      	lsls	r3, r3, #17
 8004532:	69ba      	ldr	r2, [r7, #24]
 8004534:	4313      	orrs	r3, r2
 8004536:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800453c:	2b00      	cmp	r3, #0
 800453e:	d009      	beq.n	8004554 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004544:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800454c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800454e:	69ba      	ldr	r2, [r7, #24]
 8004550:	4313      	orrs	r3, r2
 8004552:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	68da      	ldr	r2, [r3, #12]
 800455a:	4b5c      	ldr	r3, [pc, #368]	; (80046cc <HAL_ADC_Init+0x2f4>)
 800455c:	4013      	ands	r3, r2
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	6812      	ldr	r2, [r2, #0]
 8004562:	69b9      	ldr	r1, [r7, #24]
 8004564:	430b      	orrs	r3, r1
 8004566:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	430a      	orrs	r2, r1
 800457c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4618      	mov	r0, r3
 8004584:	f7ff fe79 	bl	800427a <LL_ADC_REG_IsConversionOngoing>
 8004588:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4618      	mov	r0, r3
 8004590:	f7ff fe86 	bl	80042a0 <LL_ADC_INJ_IsConversionOngoing>
 8004594:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d16d      	bne.n	8004678 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d16a      	bne.n	8004678 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80045a6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80045ae:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80045b0:	4313      	orrs	r3, r2
 80045b2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045be:	f023 0302 	bic.w	r3, r3, #2
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	6812      	ldr	r2, [r2, #0]
 80045c6:	69b9      	ldr	r1, [r7, #24]
 80045c8:	430b      	orrs	r3, r1
 80045ca:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	691b      	ldr	r3, [r3, #16]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d017      	beq.n	8004604 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	691a      	ldr	r2, [r3, #16]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80045e2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80045ec:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80045f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	6911      	ldr	r1, [r2, #16]
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	6812      	ldr	r2, [r2, #0]
 80045fc:	430b      	orrs	r3, r1
 80045fe:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8004602:	e013      	b.n	800462c <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	691a      	ldr	r2, [r3, #16]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004612:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	6812      	ldr	r2, [r2, #0]
 8004620:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004624:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004628:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004632:	2b01      	cmp	r3, #1
 8004634:	d118      	bne.n	8004668 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	691b      	ldr	r3, [r3, #16]
 800463c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004640:	f023 0304 	bic.w	r3, r3, #4
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800464c:	4311      	orrs	r1, r2
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004652:	4311      	orrs	r1, r2
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004658:	430a      	orrs	r2, r1
 800465a:	431a      	orrs	r2, r3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f042 0201 	orr.w	r2, r2, #1
 8004664:	611a      	str	r2, [r3, #16]
 8004666:	e007      	b.n	8004678 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	691a      	ldr	r2, [r3, #16]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f022 0201 	bic.w	r2, r2, #1
 8004676:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	695b      	ldr	r3, [r3, #20]
 800467c:	2b01      	cmp	r3, #1
 800467e:	d10c      	bne.n	800469a <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004686:	f023 010f 	bic.w	r1, r3, #15
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a1b      	ldr	r3, [r3, #32]
 800468e:	1e5a      	subs	r2, r3, #1
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	430a      	orrs	r2, r1
 8004696:	631a      	str	r2, [r3, #48]	; 0x30
 8004698:	e007      	b.n	80046aa <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f022 020f 	bic.w	r2, r2, #15
 80046a8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046ae:	f023 0303 	bic.w	r3, r3, #3
 80046b2:	f043 0201 	orr.w	r2, r3, #1
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	65da      	str	r2, [r3, #92]	; 0x5c
 80046ba:	e011      	b.n	80046e0 <HAL_ADC_Init+0x308>
 80046bc:	20000058 	.word	0x20000058
 80046c0:	053e2d63 	.word	0x053e2d63
 80046c4:	50000100 	.word	0x50000100
 80046c8:	50000300 	.word	0x50000300
 80046cc:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046d4:	f043 0210 	orr.w	r2, r3, #16
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80046e0:	7ffb      	ldrb	r3, [r7, #31]
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3724      	adds	r7, #36	; 0x24
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd90      	pop	{r4, r7, pc}
 80046ea:	bf00      	nop

080046ec <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b086      	sub	sp, #24
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	60b9      	str	r1, [r7, #8]
 80046f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80046f8:	4851      	ldr	r0, [pc, #324]	; (8004840 <HAL_ADC_Start_DMA+0x154>)
 80046fa:	f7ff fcf2 	bl	80040e2 <LL_ADC_GetMultimode>
 80046fe:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4618      	mov	r0, r3
 8004706:	f7ff fdb8 	bl	800427a <LL_ADC_REG_IsConversionOngoing>
 800470a:	4603      	mov	r3, r0
 800470c:	2b00      	cmp	r3, #0
 800470e:	f040 808f 	bne.w	8004830 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004718:	2b01      	cmp	r3, #1
 800471a:	d101      	bne.n	8004720 <HAL_ADC_Start_DMA+0x34>
 800471c:	2302      	movs	r3, #2
 800471e:	e08a      	b.n	8004836 <HAL_ADC_Start_DMA+0x14a>
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d005      	beq.n	800473a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	2b05      	cmp	r3, #5
 8004732:	d002      	beq.n	800473a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	2b09      	cmp	r3, #9
 8004738:	d173      	bne.n	8004822 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800473a:	68f8      	ldr	r0, [r7, #12]
 800473c:	f001 f8c8 	bl	80058d0 <ADC_Enable>
 8004740:	4603      	mov	r3, r0
 8004742:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004744:	7dfb      	ldrb	r3, [r7, #23]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d166      	bne.n	8004818 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800474e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004752:	f023 0301 	bic.w	r3, r3, #1
 8004756:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a38      	ldr	r2, [pc, #224]	; (8004844 <HAL_ADC_Start_DMA+0x158>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d002      	beq.n	800476e <HAL_ADC_Start_DMA+0x82>
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	e001      	b.n	8004772 <HAL_ADC_Start_DMA+0x86>
 800476e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004772:	68fa      	ldr	r2, [r7, #12]
 8004774:	6812      	ldr	r2, [r2, #0]
 8004776:	4293      	cmp	r3, r2
 8004778:	d002      	beq.n	8004780 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d105      	bne.n	800478c <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004784:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004790:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004794:	2b00      	cmp	r3, #0
 8004796:	d006      	beq.n	80047a6 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800479c:	f023 0206 	bic.w	r2, r3, #6
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	661a      	str	r2, [r3, #96]	; 0x60
 80047a4:	e002      	b.n	80047ac <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2200      	movs	r2, #0
 80047aa:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047b0:	4a25      	ldr	r2, [pc, #148]	; (8004848 <HAL_ADC_Start_DMA+0x15c>)
 80047b2:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047b8:	4a24      	ldr	r2, [pc, #144]	; (800484c <HAL_ADC_Start_DMA+0x160>)
 80047ba:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047c0:	4a23      	ldr	r2, [pc, #140]	; (8004850 <HAL_ADC_Start_DMA+0x164>)
 80047c2:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	221c      	movs	r2, #28
 80047ca:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2200      	movs	r2, #0
 80047d0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	685a      	ldr	r2, [r3, #4]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f042 0210 	orr.w	r2, r2, #16
 80047e2:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68da      	ldr	r2, [r3, #12]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f042 0201 	orr.w	r2, r2, #1
 80047f2:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	3340      	adds	r3, #64	; 0x40
 80047fe:	4619      	mov	r1, r3
 8004800:	68ba      	ldr	r2, [r7, #8]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f001 fde6 	bl	80063d4 <HAL_DMA_Start_IT>
 8004808:	4603      	mov	r3, r0
 800480a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4618      	mov	r0, r3
 8004812:	f7ff fd1e 	bl	8004252 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004816:	e00d      	b.n	8004834 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2200      	movs	r2, #0
 800481c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8004820:	e008      	b.n	8004834 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2200      	movs	r2, #0
 800482a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800482e:	e001      	b.n	8004834 <HAL_ADC_Start_DMA+0x148>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004830:	2302      	movs	r3, #2
 8004832:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004834:	7dfb      	ldrb	r3, [r7, #23]
}
 8004836:	4618      	mov	r0, r3
 8004838:	3718      	adds	r7, #24
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	50000300 	.word	0x50000300
 8004844:	50000100 	.word	0x50000100
 8004848:	08005a53 	.word	0x08005a53
 800484c:	08005b2b 	.word	0x08005b2b
 8004850:	08005b47 	.word	0x08005b47

08004854 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b08a      	sub	sp, #40	; 0x28
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800485c:	2300      	movs	r3, #0
 800485e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004870:	4883      	ldr	r0, [pc, #524]	; (8004a80 <HAL_ADC_IRQHandler+0x22c>)
 8004872:	f7ff fc36 	bl	80040e2 <LL_ADC_GetMultimode>
 8004876:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8004878:	69fb      	ldr	r3, [r7, #28]
 800487a:	f003 0302 	and.w	r3, r3, #2
 800487e:	2b00      	cmp	r3, #0
 8004880:	d017      	beq.n	80048b2 <HAL_ADC_IRQHandler+0x5e>
 8004882:	69bb      	ldr	r3, [r7, #24]
 8004884:	f003 0302 	and.w	r3, r3, #2
 8004888:	2b00      	cmp	r3, #0
 800488a:	d012      	beq.n	80048b2 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004890:	f003 0310 	and.w	r3, r3, #16
 8004894:	2b00      	cmp	r3, #0
 8004896:	d105      	bne.n	80048a4 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800489c:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f001 fa45 	bl	8005d34 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2202      	movs	r2, #2
 80048b0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80048b2:	69fb      	ldr	r3, [r7, #28]
 80048b4:	f003 0304 	and.w	r3, r3, #4
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d004      	beq.n	80048c6 <HAL_ADC_IRQHandler+0x72>
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	f003 0304 	and.w	r3, r3, #4
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d10a      	bne.n	80048dc <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	f000 8085 	beq.w	80049dc <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80048d2:	69bb      	ldr	r3, [r7, #24]
 80048d4:	f003 0308 	and.w	r3, r3, #8
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d07f      	beq.n	80049dc <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048e0:	f003 0310 	and.w	r3, r3, #16
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d105      	bne.n	80048f4 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048ec:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4618      	mov	r0, r3
 80048fa:	f7ff fafd 	bl	8003ef8 <LL_ADC_REG_IsTriggerSourceSWStart>
 80048fe:	4603      	mov	r3, r0
 8004900:	2b00      	cmp	r3, #0
 8004902:	d064      	beq.n	80049ce <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a5e      	ldr	r2, [pc, #376]	; (8004a84 <HAL_ADC_IRQHandler+0x230>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d002      	beq.n	8004914 <HAL_ADC_IRQHandler+0xc0>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	e001      	b.n	8004918 <HAL_ADC_IRQHandler+0xc4>
 8004914:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	6812      	ldr	r2, [r2, #0]
 800491c:	4293      	cmp	r3, r2
 800491e:	d008      	beq.n	8004932 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d005      	beq.n	8004932 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	2b05      	cmp	r3, #5
 800492a:	d002      	beq.n	8004932 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	2b09      	cmp	r3, #9
 8004930:	d104      	bne.n	800493c <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	623b      	str	r3, [r7, #32]
 800493a:	e00d      	b.n	8004958 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a50      	ldr	r2, [pc, #320]	; (8004a84 <HAL_ADC_IRQHandler+0x230>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d002      	beq.n	800494c <HAL_ADC_IRQHandler+0xf8>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	e001      	b.n	8004950 <HAL_ADC_IRQHandler+0xfc>
 800494c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004950:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8004958:	6a3b      	ldr	r3, [r7, #32]
 800495a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800495e:	2b00      	cmp	r3, #0
 8004960:	d135      	bne.n	80049ce <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 0308 	and.w	r3, r3, #8
 800496c:	2b08      	cmp	r3, #8
 800496e:	d12e      	bne.n	80049ce <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4618      	mov	r0, r3
 8004976:	f7ff fc80 	bl	800427a <LL_ADC_REG_IsConversionOngoing>
 800497a:	4603      	mov	r3, r0
 800497c:	2b00      	cmp	r3, #0
 800497e:	d11a      	bne.n	80049b6 <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	685a      	ldr	r2, [r3, #4]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f022 020c 	bic.w	r2, r2, #12
 800498e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004994:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d112      	bne.n	80049ce <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049ac:	f043 0201 	orr.w	r2, r3, #1
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	65da      	str	r2, [r3, #92]	; 0x5c
 80049b4:	e00b      	b.n	80049ce <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049ba:	f043 0210 	orr.w	r2, r3, #16
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049c6:	f043 0201 	orr.w	r2, r3, #1
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 f95a 	bl	8004c88 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	220c      	movs	r2, #12
 80049da:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	f003 0320 	and.w	r3, r3, #32
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d004      	beq.n	80049f0 <HAL_ADC_IRQHandler+0x19c>
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	f003 0320 	and.w	r3, r3, #32
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d10b      	bne.n	8004a08 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	f000 809e 	beq.w	8004b38 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	f000 8098 	beq.w	8004b38 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a0c:	f003 0310 	and.w	r3, r3, #16
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d105      	bne.n	8004a20 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a18:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4618      	mov	r0, r3
 8004a26:	f7ff faa6 	bl	8003f76 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8004a2a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4618      	mov	r0, r3
 8004a32:	f7ff fa61 	bl	8003ef8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004a36:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a11      	ldr	r2, [pc, #68]	; (8004a84 <HAL_ADC_IRQHandler+0x230>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d002      	beq.n	8004a48 <HAL_ADC_IRQHandler+0x1f4>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	e001      	b.n	8004a4c <HAL_ADC_IRQHandler+0x1f8>
 8004a48:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	6812      	ldr	r2, [r2, #0]
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d008      	beq.n	8004a66 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d005      	beq.n	8004a66 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	2b06      	cmp	r3, #6
 8004a5e:	d002      	beq.n	8004a66 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	2b07      	cmp	r3, #7
 8004a64:	d104      	bne.n	8004a70 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	623b      	str	r3, [r7, #32]
 8004a6e:	e011      	b.n	8004a94 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a03      	ldr	r2, [pc, #12]	; (8004a84 <HAL_ADC_IRQHandler+0x230>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d006      	beq.n	8004a88 <HAL_ADC_IRQHandler+0x234>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	e005      	b.n	8004a8c <HAL_ADC_IRQHandler+0x238>
 8004a80:	50000300 	.word	0x50000300
 8004a84:	50000100 	.word	0x50000100
 8004a88:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004a8c:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d047      	beq.n	8004b2a <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8004a9a:	6a3b      	ldr	r3, [r7, #32]
 8004a9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d007      	beq.n	8004ab4 <HAL_ADC_IRQHandler+0x260>
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d03f      	beq.n	8004b2a <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8004aaa:	6a3b      	ldr	r3, [r7, #32]
 8004aac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d13a      	bne.n	8004b2a <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004abe:	2b40      	cmp	r3, #64	; 0x40
 8004ac0:	d133      	bne.n	8004b2a <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8004ac2:	6a3b      	ldr	r3, [r7, #32]
 8004ac4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d12e      	bne.n	8004b2a <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f7ff fbe5 	bl	80042a0 <LL_ADC_INJ_IsConversionOngoing>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d11a      	bne.n	8004b12 <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	685a      	ldr	r2, [r3, #4]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004aea:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004af0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d112      	bne.n	8004b2a <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b08:	f043 0201 	orr.w	r2, r3, #1
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004b10:	e00b      	b.n	8004b2a <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b16:	f043 0210 	orr.w	r2, r3, #16
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b22:	f043 0201 	orr.w	r2, r3, #1
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f001 f8da 	bl	8005ce4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	2260      	movs	r2, #96	; 0x60
 8004b36:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004b38:	69fb      	ldr	r3, [r7, #28]
 8004b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d011      	beq.n	8004b66 <HAL_ADC_IRQHandler+0x312>
 8004b42:	69bb      	ldr	r3, [r7, #24]
 8004b44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d00c      	beq.n	8004b66 <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b50:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f000 f8a9 	bl	8004cb0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	2280      	movs	r2, #128	; 0x80
 8004b64:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d012      	beq.n	8004b96 <HAL_ADC_IRQHandler+0x342>
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d00d      	beq.n	8004b96 <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b7e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f001 f8c0 	bl	8005d0c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b94:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d012      	beq.n	8004bc6 <HAL_ADC_IRQHandler+0x372>
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d00d      	beq.n	8004bc6 <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bae:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f001 f8b2 	bl	8005d20 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004bc4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	f003 0310 	and.w	r3, r3, #16
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d036      	beq.n	8004c3e <HAL_ADC_IRQHandler+0x3ea>
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	f003 0310 	and.w	r3, r3, #16
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d031      	beq.n	8004c3e <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d102      	bne.n	8004be8 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8004be2:	2301      	movs	r3, #1
 8004be4:	627b      	str	r3, [r7, #36]	; 0x24
 8004be6:	e014      	b.n	8004c12 <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d008      	beq.n	8004c00 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004bee:	4825      	ldr	r0, [pc, #148]	; (8004c84 <HAL_ADC_IRQHandler+0x430>)
 8004bf0:	f7ff fa85 	bl	80040fe <LL_ADC_GetMultiDMATransfer>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d00b      	beq.n	8004c12 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	627b      	str	r3, [r7, #36]	; 0x24
 8004bfe:	e008      	b.n	8004c12 <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	f003 0301 	and.w	r3, r3, #1
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d001      	beq.n	8004c12 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8004c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d10e      	bne.n	8004c36 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c1c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c28:	f043 0202 	orr.w	r2, r3, #2
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f000 f847 	bl	8004cc4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	2210      	movs	r2, #16
 8004c3c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d018      	beq.n	8004c7a <HAL_ADC_IRQHandler+0x426>
 8004c48:	69bb      	ldr	r3, [r7, #24]
 8004c4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d013      	beq.n	8004c7a <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c56:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c62:	f043 0208 	orr.w	r2, r3, #8
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004c72:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f001 f83f 	bl	8005cf8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8004c7a:	bf00      	nop
 8004c7c:	3728      	adds	r7, #40	; 0x28
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	50000300 	.word	0x50000300

08004c88 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004c90:	bf00      	nop
 8004c92:	370c      	adds	r7, #12
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr

08004c9c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004ca4:	bf00      	nop
 8004ca6:	370c      	adds	r7, #12
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr

08004cb0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b083      	sub	sp, #12
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004cb8:	bf00      	nop
 8004cba:	370c      	adds	r7, #12
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr

08004cc4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004ccc:	bf00      	nop
 8004cce:	370c      	adds	r7, #12
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr

08004cd8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b0b6      	sub	sp, #216	; 0xd8
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d101      	bne.n	8004cfa <HAL_ADC_ConfigChannel+0x22>
 8004cf6:	2302      	movs	r3, #2
 8004cf8:	e3c8      	b.n	800548c <HAL_ADC_ConfigChannel+0x7b4>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4618      	mov	r0, r3
 8004d08:	f7ff fab7 	bl	800427a <LL_ADC_REG_IsConversionOngoing>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	f040 83ad 	bne.w	800546e <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6818      	ldr	r0, [r3, #0]
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	6859      	ldr	r1, [r3, #4]
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	461a      	mov	r2, r3
 8004d22:	f7ff f8fc 	bl	8003f1e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f7ff faa5 	bl	800427a <LL_ADC_REG_IsConversionOngoing>
 8004d30:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f7ff fab1 	bl	80042a0 <LL_ADC_INJ_IsConversionOngoing>
 8004d3e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004d42:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	f040 81d9 	bne.w	80050fe <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004d4c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	f040 81d4 	bne.w	80050fe <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d5e:	d10f      	bne.n	8004d80 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6818      	ldr	r0, [r3, #0]
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	4619      	mov	r1, r3
 8004d6c:	f7ff f916 	bl	8003f9c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f7ff f8aa 	bl	8003ed2 <LL_ADC_SetSamplingTimeCommonConfig>
 8004d7e:	e00e      	b.n	8004d9e <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6818      	ldr	r0, [r3, #0]
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	6819      	ldr	r1, [r3, #0]
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	f7ff f905 	bl	8003f9c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	2100      	movs	r1, #0
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f7ff f89a 	bl	8003ed2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	695a      	ldr	r2, [r3, #20]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	08db      	lsrs	r3, r3, #3
 8004daa:	f003 0303 	and.w	r3, r3, #3
 8004dae:	005b      	lsls	r3, r3, #1
 8004db0:	fa02 f303 	lsl.w	r3, r2, r3
 8004db4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	691b      	ldr	r3, [r3, #16]
 8004dbc:	2b04      	cmp	r3, #4
 8004dbe:	d022      	beq.n	8004e06 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6818      	ldr	r0, [r3, #0]
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	6919      	ldr	r1, [r3, #16]
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004dd0:	f7fe fff4 	bl	8003dbc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6818      	ldr	r0, [r3, #0]
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	6919      	ldr	r1, [r3, #16]
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	699b      	ldr	r3, [r3, #24]
 8004de0:	461a      	mov	r2, r3
 8004de2:	f7ff f840 	bl	8003e66 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6818      	ldr	r0, [r3, #0]
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	6919      	ldr	r1, [r3, #16]
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	7f1b      	ldrb	r3, [r3, #28]
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d102      	bne.n	8004dfc <HAL_ADC_ConfigChannel+0x124>
 8004df6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004dfa:	e000      	b.n	8004dfe <HAL_ADC_ConfigChannel+0x126>
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	461a      	mov	r2, r3
 8004e00:	f7ff f84c 	bl	8003e9c <LL_ADC_SetOffsetSaturation>
 8004e04:	e17b      	b.n	80050fe <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	2100      	movs	r1, #0
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f7fe fff9 	bl	8003e04 <LL_ADC_GetOffsetChannel>
 8004e12:	4603      	mov	r3, r0
 8004e14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d10a      	bne.n	8004e32 <HAL_ADC_ConfigChannel+0x15a>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2100      	movs	r1, #0
 8004e22:	4618      	mov	r0, r3
 8004e24:	f7fe ffee 	bl	8003e04 <LL_ADC_GetOffsetChannel>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	0e9b      	lsrs	r3, r3, #26
 8004e2c:	f003 021f 	and.w	r2, r3, #31
 8004e30:	e01e      	b.n	8004e70 <HAL_ADC_ConfigChannel+0x198>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	2100      	movs	r1, #0
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f7fe ffe3 	bl	8003e04 <LL_ADC_GetOffsetChannel>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e44:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004e48:	fa93 f3a3 	rbit	r3, r3
 8004e4c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004e50:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004e54:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004e58:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d101      	bne.n	8004e64 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8004e60:	2320      	movs	r3, #32
 8004e62:	e004      	b.n	8004e6e <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8004e64:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004e68:	fab3 f383 	clz	r3, r3
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d105      	bne.n	8004e88 <HAL_ADC_ConfigChannel+0x1b0>
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	0e9b      	lsrs	r3, r3, #26
 8004e82:	f003 031f 	and.w	r3, r3, #31
 8004e86:	e018      	b.n	8004eba <HAL_ADC_ConfigChannel+0x1e2>
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e90:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004e94:	fa93 f3a3 	rbit	r3, r3
 8004e98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8004e9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004ea0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8004ea4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d101      	bne.n	8004eb0 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8004eac:	2320      	movs	r3, #32
 8004eae:	e004      	b.n	8004eba <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8004eb0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004eb4:	fab3 f383 	clz	r3, r3
 8004eb8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d106      	bne.n	8004ecc <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	2100      	movs	r1, #0
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f7fe ffb2 	bl	8003e30 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	2101      	movs	r1, #1
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f7fe ff96 	bl	8003e04 <LL_ADC_GetOffsetChannel>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d10a      	bne.n	8004ef8 <HAL_ADC_ConfigChannel+0x220>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	2101      	movs	r1, #1
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f7fe ff8b 	bl	8003e04 <LL_ADC_GetOffsetChannel>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	0e9b      	lsrs	r3, r3, #26
 8004ef2:	f003 021f 	and.w	r2, r3, #31
 8004ef6:	e01e      	b.n	8004f36 <HAL_ADC_ConfigChannel+0x25e>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2101      	movs	r1, #1
 8004efe:	4618      	mov	r0, r3
 8004f00:	f7fe ff80 	bl	8003e04 <LL_ADC_GetOffsetChannel>
 8004f04:	4603      	mov	r3, r0
 8004f06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f0a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004f0e:	fa93 f3a3 	rbit	r3, r3
 8004f12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004f16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004f1a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8004f1e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d101      	bne.n	8004f2a <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8004f26:	2320      	movs	r3, #32
 8004f28:	e004      	b.n	8004f34 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8004f2a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004f2e:	fab3 f383 	clz	r3, r3
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d105      	bne.n	8004f4e <HAL_ADC_ConfigChannel+0x276>
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	0e9b      	lsrs	r3, r3, #26
 8004f48:	f003 031f 	and.w	r3, r3, #31
 8004f4c:	e018      	b.n	8004f80 <HAL_ADC_ConfigChannel+0x2a8>
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f56:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004f5a:	fa93 f3a3 	rbit	r3, r3
 8004f5e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004f62:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004f66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8004f6a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d101      	bne.n	8004f76 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8004f72:	2320      	movs	r3, #32
 8004f74:	e004      	b.n	8004f80 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8004f76:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004f7a:	fab3 f383 	clz	r3, r3
 8004f7e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d106      	bne.n	8004f92 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	2101      	movs	r1, #1
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f7fe ff4f 	bl	8003e30 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	2102      	movs	r1, #2
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f7fe ff33 	bl	8003e04 <LL_ADC_GetOffsetChannel>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d10a      	bne.n	8004fbe <HAL_ADC_ConfigChannel+0x2e6>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2102      	movs	r1, #2
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f7fe ff28 	bl	8003e04 <LL_ADC_GetOffsetChannel>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	0e9b      	lsrs	r3, r3, #26
 8004fb8:	f003 021f 	and.w	r2, r3, #31
 8004fbc:	e01e      	b.n	8004ffc <HAL_ADC_ConfigChannel+0x324>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	2102      	movs	r1, #2
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f7fe ff1d 	bl	8003e04 <LL_ADC_GetOffsetChannel>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004fd4:	fa93 f3a3 	rbit	r3, r3
 8004fd8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8004fdc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004fe0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8004fe4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d101      	bne.n	8004ff0 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8004fec:	2320      	movs	r3, #32
 8004fee:	e004      	b.n	8004ffa <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8004ff0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004ff4:	fab3 f383 	clz	r3, r3
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005004:	2b00      	cmp	r3, #0
 8005006:	d105      	bne.n	8005014 <HAL_ADC_ConfigChannel+0x33c>
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	0e9b      	lsrs	r3, r3, #26
 800500e:	f003 031f 	and.w	r3, r3, #31
 8005012:	e016      	b.n	8005042 <HAL_ADC_ConfigChannel+0x36a>
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800501c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005020:	fa93 f3a3 	rbit	r3, r3
 8005024:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8005026:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005028:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800502c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005030:	2b00      	cmp	r3, #0
 8005032:	d101      	bne.n	8005038 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8005034:	2320      	movs	r3, #32
 8005036:	e004      	b.n	8005042 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8005038:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800503c:	fab3 f383 	clz	r3, r3
 8005040:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005042:	429a      	cmp	r2, r3
 8005044:	d106      	bne.n	8005054 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	2200      	movs	r2, #0
 800504c:	2102      	movs	r1, #2
 800504e:	4618      	mov	r0, r3
 8005050:	f7fe feee 	bl	8003e30 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	2103      	movs	r1, #3
 800505a:	4618      	mov	r0, r3
 800505c:	f7fe fed2 	bl	8003e04 <LL_ADC_GetOffsetChannel>
 8005060:	4603      	mov	r3, r0
 8005062:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005066:	2b00      	cmp	r3, #0
 8005068:	d10a      	bne.n	8005080 <HAL_ADC_ConfigChannel+0x3a8>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	2103      	movs	r1, #3
 8005070:	4618      	mov	r0, r3
 8005072:	f7fe fec7 	bl	8003e04 <LL_ADC_GetOffsetChannel>
 8005076:	4603      	mov	r3, r0
 8005078:	0e9b      	lsrs	r3, r3, #26
 800507a:	f003 021f 	and.w	r2, r3, #31
 800507e:	e017      	b.n	80050b0 <HAL_ADC_ConfigChannel+0x3d8>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	2103      	movs	r1, #3
 8005086:	4618      	mov	r0, r3
 8005088:	f7fe febc 	bl	8003e04 <LL_ADC_GetOffsetChannel>
 800508c:	4603      	mov	r3, r0
 800508e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005090:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005092:	fa93 f3a3 	rbit	r3, r3
 8005096:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8005098:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800509a:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800509c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d101      	bne.n	80050a6 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80050a2:	2320      	movs	r3, #32
 80050a4:	e003      	b.n	80050ae <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80050a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80050a8:	fab3 f383 	clz	r3, r3
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d105      	bne.n	80050c8 <HAL_ADC_ConfigChannel+0x3f0>
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	0e9b      	lsrs	r3, r3, #26
 80050c2:	f003 031f 	and.w	r3, r3, #31
 80050c6:	e011      	b.n	80050ec <HAL_ADC_ConfigChannel+0x414>
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80050d0:	fa93 f3a3 	rbit	r3, r3
 80050d4:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80050d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050d8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80050da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d101      	bne.n	80050e4 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80050e0:	2320      	movs	r3, #32
 80050e2:	e003      	b.n	80050ec <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80050e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050e6:	fab3 f383 	clz	r3, r3
 80050ea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d106      	bne.n	80050fe <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	2200      	movs	r2, #0
 80050f6:	2103      	movs	r1, #3
 80050f8:	4618      	mov	r0, r3
 80050fa:	f7fe fe99 	bl	8003e30 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4618      	mov	r0, r3
 8005104:	f7ff f87f 	bl	8004206 <LL_ADC_IsEnabled>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	f040 8140 	bne.w	8005390 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6818      	ldr	r0, [r3, #0]
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	6819      	ldr	r1, [r3, #0]
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	461a      	mov	r2, r3
 800511e:	f7fe ff69 	bl	8003ff4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	68db      	ldr	r3, [r3, #12]
 8005126:	4a8f      	ldr	r2, [pc, #572]	; (8005364 <HAL_ADC_ConfigChannel+0x68c>)
 8005128:	4293      	cmp	r3, r2
 800512a:	f040 8131 	bne.w	8005390 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800513a:	2b00      	cmp	r3, #0
 800513c:	d10b      	bne.n	8005156 <HAL_ADC_ConfigChannel+0x47e>
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	0e9b      	lsrs	r3, r3, #26
 8005144:	3301      	adds	r3, #1
 8005146:	f003 031f 	and.w	r3, r3, #31
 800514a:	2b09      	cmp	r3, #9
 800514c:	bf94      	ite	ls
 800514e:	2301      	movls	r3, #1
 8005150:	2300      	movhi	r3, #0
 8005152:	b2db      	uxtb	r3, r3
 8005154:	e019      	b.n	800518a <HAL_ADC_ConfigChannel+0x4b2>
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800515c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800515e:	fa93 f3a3 	rbit	r3, r3
 8005162:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8005164:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005166:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8005168:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800516a:	2b00      	cmp	r3, #0
 800516c:	d101      	bne.n	8005172 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 800516e:	2320      	movs	r3, #32
 8005170:	e003      	b.n	800517a <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8005172:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005174:	fab3 f383 	clz	r3, r3
 8005178:	b2db      	uxtb	r3, r3
 800517a:	3301      	adds	r3, #1
 800517c:	f003 031f 	and.w	r3, r3, #31
 8005180:	2b09      	cmp	r3, #9
 8005182:	bf94      	ite	ls
 8005184:	2301      	movls	r3, #1
 8005186:	2300      	movhi	r3, #0
 8005188:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800518a:	2b00      	cmp	r3, #0
 800518c:	d079      	beq.n	8005282 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005196:	2b00      	cmp	r3, #0
 8005198:	d107      	bne.n	80051aa <HAL_ADC_ConfigChannel+0x4d2>
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	0e9b      	lsrs	r3, r3, #26
 80051a0:	3301      	adds	r3, #1
 80051a2:	069b      	lsls	r3, r3, #26
 80051a4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80051a8:	e015      	b.n	80051d6 <HAL_ADC_ConfigChannel+0x4fe>
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051b2:	fa93 f3a3 	rbit	r3, r3
 80051b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80051b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051ba:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80051bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d101      	bne.n	80051c6 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80051c2:	2320      	movs	r3, #32
 80051c4:	e003      	b.n	80051ce <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80051c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051c8:	fab3 f383 	clz	r3, r3
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	3301      	adds	r3, #1
 80051d0:	069b      	lsls	r3, r3, #26
 80051d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d109      	bne.n	80051f6 <HAL_ADC_ConfigChannel+0x51e>
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	0e9b      	lsrs	r3, r3, #26
 80051e8:	3301      	adds	r3, #1
 80051ea:	f003 031f 	and.w	r3, r3, #31
 80051ee:	2101      	movs	r1, #1
 80051f0:	fa01 f303 	lsl.w	r3, r1, r3
 80051f4:	e017      	b.n	8005226 <HAL_ADC_ConfigChannel+0x54e>
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051fe:	fa93 f3a3 	rbit	r3, r3
 8005202:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8005204:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005206:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8005208:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800520a:	2b00      	cmp	r3, #0
 800520c:	d101      	bne.n	8005212 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800520e:	2320      	movs	r3, #32
 8005210:	e003      	b.n	800521a <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8005212:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005214:	fab3 f383 	clz	r3, r3
 8005218:	b2db      	uxtb	r3, r3
 800521a:	3301      	adds	r3, #1
 800521c:	f003 031f 	and.w	r3, r3, #31
 8005220:	2101      	movs	r1, #1
 8005222:	fa01 f303 	lsl.w	r3, r1, r3
 8005226:	ea42 0103 	orr.w	r1, r2, r3
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005232:	2b00      	cmp	r3, #0
 8005234:	d10a      	bne.n	800524c <HAL_ADC_ConfigChannel+0x574>
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	0e9b      	lsrs	r3, r3, #26
 800523c:	3301      	adds	r3, #1
 800523e:	f003 021f 	and.w	r2, r3, #31
 8005242:	4613      	mov	r3, r2
 8005244:	005b      	lsls	r3, r3, #1
 8005246:	4413      	add	r3, r2
 8005248:	051b      	lsls	r3, r3, #20
 800524a:	e018      	b.n	800527e <HAL_ADC_ConfigChannel+0x5a6>
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005254:	fa93 f3a3 	rbit	r3, r3
 8005258:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800525a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800525c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800525e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005260:	2b00      	cmp	r3, #0
 8005262:	d101      	bne.n	8005268 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8005264:	2320      	movs	r3, #32
 8005266:	e003      	b.n	8005270 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8005268:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800526a:	fab3 f383 	clz	r3, r3
 800526e:	b2db      	uxtb	r3, r3
 8005270:	3301      	adds	r3, #1
 8005272:	f003 021f 	and.w	r2, r3, #31
 8005276:	4613      	mov	r3, r2
 8005278:	005b      	lsls	r3, r3, #1
 800527a:	4413      	add	r3, r2
 800527c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800527e:	430b      	orrs	r3, r1
 8005280:	e081      	b.n	8005386 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800528a:	2b00      	cmp	r3, #0
 800528c:	d107      	bne.n	800529e <HAL_ADC_ConfigChannel+0x5c6>
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	0e9b      	lsrs	r3, r3, #26
 8005294:	3301      	adds	r3, #1
 8005296:	069b      	lsls	r3, r3, #26
 8005298:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800529c:	e015      	b.n	80052ca <HAL_ADC_ConfigChannel+0x5f2>
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052a6:	fa93 f3a3 	rbit	r3, r3
 80052aa:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80052ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ae:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80052b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d101      	bne.n	80052ba <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80052b6:	2320      	movs	r3, #32
 80052b8:	e003      	b.n	80052c2 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80052ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052bc:	fab3 f383 	clz	r3, r3
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	3301      	adds	r3, #1
 80052c4:	069b      	lsls	r3, r3, #26
 80052c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d109      	bne.n	80052ea <HAL_ADC_ConfigChannel+0x612>
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	0e9b      	lsrs	r3, r3, #26
 80052dc:	3301      	adds	r3, #1
 80052de:	f003 031f 	and.w	r3, r3, #31
 80052e2:	2101      	movs	r1, #1
 80052e4:	fa01 f303 	lsl.w	r3, r1, r3
 80052e8:	e017      	b.n	800531a <HAL_ADC_ConfigChannel+0x642>
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052f0:	6a3b      	ldr	r3, [r7, #32]
 80052f2:	fa93 f3a3 	rbit	r3, r3
 80052f6:	61fb      	str	r3, [r7, #28]
  return result;
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80052fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d101      	bne.n	8005306 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8005302:	2320      	movs	r3, #32
 8005304:	e003      	b.n	800530e <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8005306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005308:	fab3 f383 	clz	r3, r3
 800530c:	b2db      	uxtb	r3, r3
 800530e:	3301      	adds	r3, #1
 8005310:	f003 031f 	and.w	r3, r3, #31
 8005314:	2101      	movs	r1, #1
 8005316:	fa01 f303 	lsl.w	r3, r1, r3
 800531a:	ea42 0103 	orr.w	r1, r2, r3
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005326:	2b00      	cmp	r3, #0
 8005328:	d10d      	bne.n	8005346 <HAL_ADC_ConfigChannel+0x66e>
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	0e9b      	lsrs	r3, r3, #26
 8005330:	3301      	adds	r3, #1
 8005332:	f003 021f 	and.w	r2, r3, #31
 8005336:	4613      	mov	r3, r2
 8005338:	005b      	lsls	r3, r3, #1
 800533a:	4413      	add	r3, r2
 800533c:	3b1e      	subs	r3, #30
 800533e:	051b      	lsls	r3, r3, #20
 8005340:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005344:	e01e      	b.n	8005384 <HAL_ADC_ConfigChannel+0x6ac>
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	fa93 f3a3 	rbit	r3, r3
 8005352:	613b      	str	r3, [r7, #16]
  return result;
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005358:	69bb      	ldr	r3, [r7, #24]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d104      	bne.n	8005368 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 800535e:	2320      	movs	r3, #32
 8005360:	e006      	b.n	8005370 <HAL_ADC_ConfigChannel+0x698>
 8005362:	bf00      	nop
 8005364:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	fab3 f383 	clz	r3, r3
 800536e:	b2db      	uxtb	r3, r3
 8005370:	3301      	adds	r3, #1
 8005372:	f003 021f 	and.w	r2, r3, #31
 8005376:	4613      	mov	r3, r2
 8005378:	005b      	lsls	r3, r3, #1
 800537a:	4413      	add	r3, r2
 800537c:	3b1e      	subs	r3, #30
 800537e:	051b      	lsls	r3, r3, #20
 8005380:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005384:	430b      	orrs	r3, r1
 8005386:	683a      	ldr	r2, [r7, #0]
 8005388:	6892      	ldr	r2, [r2, #8]
 800538a:	4619      	mov	r1, r3
 800538c:	f7fe fe06 	bl	8003f9c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	4b3f      	ldr	r3, [pc, #252]	; (8005494 <HAL_ADC_ConfigChannel+0x7bc>)
 8005396:	4013      	ands	r3, r2
 8005398:	2b00      	cmp	r3, #0
 800539a:	d071      	beq.n	8005480 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800539c:	483e      	ldr	r0, [pc, #248]	; (8005498 <HAL_ADC_ConfigChannel+0x7c0>)
 800539e:	f7fe fcff 	bl	8003da0 <LL_ADC_GetCommonPathInternalCh>
 80053a2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a3c      	ldr	r2, [pc, #240]	; (800549c <HAL_ADC_ConfigChannel+0x7c4>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d004      	beq.n	80053ba <HAL_ADC_ConfigChannel+0x6e2>
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a3a      	ldr	r2, [pc, #232]	; (80054a0 <HAL_ADC_ConfigChannel+0x7c8>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d127      	bne.n	800540a <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80053ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80053be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d121      	bne.n	800540a <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80053ce:	d157      	bne.n	8005480 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80053d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80053d4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80053d8:	4619      	mov	r1, r3
 80053da:	482f      	ldr	r0, [pc, #188]	; (8005498 <HAL_ADC_ConfigChannel+0x7c0>)
 80053dc:	f7fe fccd 	bl	8003d7a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80053e0:	4b30      	ldr	r3, [pc, #192]	; (80054a4 <HAL_ADC_ConfigChannel+0x7cc>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	099b      	lsrs	r3, r3, #6
 80053e6:	4a30      	ldr	r2, [pc, #192]	; (80054a8 <HAL_ADC_ConfigChannel+0x7d0>)
 80053e8:	fba2 2303 	umull	r2, r3, r2, r3
 80053ec:	099b      	lsrs	r3, r3, #6
 80053ee:	1c5a      	adds	r2, r3, #1
 80053f0:	4613      	mov	r3, r2
 80053f2:	005b      	lsls	r3, r3, #1
 80053f4:	4413      	add	r3, r2
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80053fa:	e002      	b.n	8005402 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	3b01      	subs	r3, #1
 8005400:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d1f9      	bne.n	80053fc <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005408:	e03a      	b.n	8005480 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a27      	ldr	r2, [pc, #156]	; (80054ac <HAL_ADC_ConfigChannel+0x7d4>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d113      	bne.n	800543c <HAL_ADC_ConfigChannel+0x764>
 8005414:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005418:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800541c:	2b00      	cmp	r3, #0
 800541e:	d10d      	bne.n	800543c <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a22      	ldr	r2, [pc, #136]	; (80054b0 <HAL_ADC_ConfigChannel+0x7d8>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d02a      	beq.n	8005480 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800542a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800542e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005432:	4619      	mov	r1, r3
 8005434:	4818      	ldr	r0, [pc, #96]	; (8005498 <HAL_ADC_ConfigChannel+0x7c0>)
 8005436:	f7fe fca0 	bl	8003d7a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800543a:	e021      	b.n	8005480 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a1c      	ldr	r2, [pc, #112]	; (80054b4 <HAL_ADC_ConfigChannel+0x7dc>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d11c      	bne.n	8005480 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005446:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800544a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800544e:	2b00      	cmp	r3, #0
 8005450:	d116      	bne.n	8005480 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a16      	ldr	r2, [pc, #88]	; (80054b0 <HAL_ADC_ConfigChannel+0x7d8>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d011      	beq.n	8005480 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800545c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005460:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005464:	4619      	mov	r1, r3
 8005466:	480c      	ldr	r0, [pc, #48]	; (8005498 <HAL_ADC_ConfigChannel+0x7c0>)
 8005468:	f7fe fc87 	bl	8003d7a <LL_ADC_SetCommonPathInternalCh>
 800546c:	e008      	b.n	8005480 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005472:	f043 0220 	orr.w	r2, r3, #32
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2200      	movs	r2, #0
 8005484:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8005488:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800548c:	4618      	mov	r0, r3
 800548e:	37d8      	adds	r7, #216	; 0xd8
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}
 8005494:	80080000 	.word	0x80080000
 8005498:	50000300 	.word	0x50000300
 800549c:	c3210000 	.word	0xc3210000
 80054a0:	90c00010 	.word	0x90c00010
 80054a4:	20000058 	.word	0x20000058
 80054a8:	053e2d63 	.word	0x053e2d63
 80054ac:	c7520000 	.word	0xc7520000
 80054b0:	50000100 	.word	0x50000100
 80054b4:	cb840000 	.word	0xcb840000

080054b8 <HAL_ADC_AnalogWDGConfig>:
  * @param hadc ADC handle
  * @param AnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef *hadc, ADC_AnalogWDGConfTypeDef *AnalogWDGConfig)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b08e      	sub	sp, #56	; 0x38
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80054c2:	2300      	movs	r3, #0
 80054c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  assert_param(IS_ADC_ANALOG_WATCHDOG_NUMBER(AnalogWDGConfig->WatchdogNumber));
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
  assert_param(IS_ADC_ANALOG_WATCHDOG_FILTERING_MODE(AnalogWDGConfig->FilteringConfig));
  assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));

  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80054d0:	d003      	beq.n	80054da <HAL_ADC_AnalogWDGConfig+0x22>
      (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	685b      	ldr	r3, [r3, #4]
  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 80054d6:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->HighThreshold));
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->LowThreshold));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d101      	bne.n	80054e8 <HAL_ADC_AnalogWDGConfig+0x30>
 80054e4:	2302      	movs	r3, #2
 80054e6:	e1ea      	b.n	80058be <HAL_ADC_AnalogWDGConfig+0x406>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on ADC groups regular and injected:                  */
  /*  - Analog watchdog channels                                              */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4618      	mov	r0, r3
 80054f6:	f7fe fec0 	bl	800427a <LL_ADC_REG_IsConversionOngoing>
 80054fa:	62b8      	str	r0, [r7, #40]	; 0x28
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4618      	mov	r0, r3
 8005502:	f7fe fecd 	bl	80042a0 <LL_ADC_INJ_IsConversionOngoing>
 8005506:	6278      	str	r0, [r7, #36]	; 0x24
  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800550a:	2b00      	cmp	r3, #0
 800550c:	f040 8175 	bne.w	80057fa <HAL_ADC_AnalogWDGConfig+0x342>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005512:	2b00      	cmp	r3, #0
 8005514:	f040 8171 	bne.w	80057fa <HAL_ADC_AnalogWDGConfig+0x342>
     )
  {
    /* Analog watchdog configuration */
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a90      	ldr	r2, [pc, #576]	; (8005760 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 800551e:	4293      	cmp	r3, r2
 8005520:	f040 808d 	bne.w	800563e <HAL_ADC_AnalogWDGConfig+0x186>
    {
      /* Configuration of analog watchdog:                                    */
      /*  - Set the analog watchdog enable mode: one or overall group of      */
      /*    channels, on groups regular and-or injected.                      */
      switch (AnalogWDGConfig->WatchdogMode)
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 800552c:	d034      	beq.n	8005598 <HAL_ADC_AnalogWDGConfig+0xe0>
 800552e:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8005532:	d856      	bhi.n	80055e2 <HAL_ADC_AnalogWDGConfig+0x12a>
 8005534:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005538:	d04b      	beq.n	80055d2 <HAL_ADC_AnalogWDGConfig+0x11a>
 800553a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800553e:	d850      	bhi.n	80055e2 <HAL_ADC_AnalogWDGConfig+0x12a>
 8005540:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8005544:	d01b      	beq.n	800557e <HAL_ADC_AnalogWDGConfig+0xc6>
 8005546:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800554a:	d84a      	bhi.n	80055e2 <HAL_ADC_AnalogWDGConfig+0x12a>
 800554c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005550:	d037      	beq.n	80055c2 <HAL_ADC_AnalogWDGConfig+0x10a>
 8005552:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005556:	d844      	bhi.n	80055e2 <HAL_ADC_AnalogWDGConfig+0x12a>
 8005558:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800555c:	d029      	beq.n	80055b2 <HAL_ADC_AnalogWDGConfig+0xfa>
 800555e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005562:	d13e      	bne.n	80055e2 <HAL_ADC_AnalogWDGConfig+0x12a>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6818      	ldr	r0, [r3, #0]
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8005570:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 8005574:	461a      	mov	r2, r3
 8005576:	497a      	ldr	r1, [pc, #488]	; (8005760 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8005578:	f7fe fd64 	bl	8004044 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_REGULAR));
          break;
 800557c:	e039      	b.n	80055f2 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6818      	ldr	r0, [r3, #0]
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 800558a:	f043 73a0 	orr.w	r3, r3, #20971520	; 0x1400000
 800558e:	461a      	mov	r2, r3
 8005590:	4973      	ldr	r1, [pc, #460]	; (8005760 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8005592:	f7fe fd57 	bl	8004044 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_INJECTED));
          break;
 8005596:	e02c      	b.n	80055f2 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6818      	ldr	r0, [r3, #0]
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 80055a4:	f043 73e0 	orr.w	r3, r3, #29360128	; 0x1c00000
 80055a8:	461a      	mov	r2, r3
 80055aa:	496d      	ldr	r1, [pc, #436]	; (8005760 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 80055ac:	f7fe fd4a 	bl	8004044 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_REGULAR_INJECTED));
          break;
 80055b0:	e01f      	b.n	80055f2 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a6b      	ldr	r2, [pc, #428]	; (8005764 <HAL_ADC_AnalogWDGConfig+0x2ac>)
 80055b8:	4969      	ldr	r1, [pc, #420]	; (8005760 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 80055ba:	4618      	mov	r0, r3
 80055bc:	f7fe fd42 	bl	8004044 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80055c0:	e017      	b.n	80055f2 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_INJ);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a68      	ldr	r2, [pc, #416]	; (8005768 <HAL_ADC_AnalogWDGConfig+0x2b0>)
 80055c8:	4965      	ldr	r1, [pc, #404]	; (8005760 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 80055ca:	4618      	mov	r0, r3
 80055cc:	f7fe fd3a 	bl	8004044 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80055d0:	e00f      	b.n	80055f2 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a65      	ldr	r2, [pc, #404]	; (800576c <HAL_ADC_AnalogWDGConfig+0x2b4>)
 80055d8:	4961      	ldr	r1, [pc, #388]	; (8005760 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 80055da:	4618      	mov	r0, r3
 80055dc:	f7fe fd32 	bl	8004044 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80055e0:	e007      	b.n	80055f2 <HAL_ADC_AnalogWDGConfig+0x13a>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_DISABLE);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	2200      	movs	r2, #0
 80055e8:	495d      	ldr	r1, [pc, #372]	; (8005760 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 80055ea:	4618      	mov	r0, r3
 80055ec:	f7fe fd2a 	bl	8004044 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80055f0:	bf00      	nop
      }

      /* Set the filtering configuration */
      MODIFY_REG(hadc->Instance->TR1,
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	6a1b      	ldr	r3, [r3, #32]
 80055f8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	699a      	ldr	r2, [r3, #24]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	430a      	orrs	r2, r1
 8005606:	621a      	str	r2, [r3, #32]
                 ADC_TR1_AWDFILT,
                 AnalogWDGConfig->FilteringConfig);

      /* Update state, clear previous result related to AWD1 */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800560c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear flag ADC analog watchdog */
      /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
      /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
      /* (in case left enabled by previous ADC operations).                 */
      LL_ADC_ClearFlag_AWD1(hadc->Instance);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4618      	mov	r0, r3
 800561a:	f7fe fe54 	bl	80042c6 <LL_ADC_ClearFlag_AWD1>

      /* Configure ADC analog watchdog interrupt */
      if (AnalogWDGConfig->ITMode == ENABLE)
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	7b1b      	ldrb	r3, [r3, #12]
 8005622:	2b01      	cmp	r3, #1
 8005624:	d105      	bne.n	8005632 <HAL_ADC_AnalogWDGConfig+0x17a>
      {
        LL_ADC_EnableIT_AWD1(hadc->Instance);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4618      	mov	r0, r3
 800562c:	f7fe fe74 	bl	8004318 <LL_ADC_EnableIT_AWD1>
 8005630:	e0e3      	b.n	80057fa <HAL_ADC_AnalogWDGConfig+0x342>
      }
      else
      {
        LL_ADC_DisableIT_AWD1(hadc->Instance);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4618      	mov	r0, r3
 8005638:	f7fe fe9e 	bl	8004378 <LL_ADC_DisableIT_AWD1>
 800563c:	e0dd      	b.n	80057fa <HAL_ADC_AnalogWDGConfig+0x342>
      }
    }
    /* Case of ADC_ANALOGWATCHDOG_2 or ADC_ANALOGWATCHDOG_3 */
    else
    {
      switch (AnalogWDGConfig->WatchdogMode)
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8005646:	d01d      	beq.n	8005684 <HAL_ADC_AnalogWDGConfig+0x1cc>
 8005648:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 800564c:	f200 8092 	bhi.w	8005774 <HAL_ADC_AnalogWDGConfig+0x2bc>
 8005650:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005654:	d07b      	beq.n	800574e <HAL_ADC_AnalogWDGConfig+0x296>
 8005656:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800565a:	f200 808b 	bhi.w	8005774 <HAL_ADC_AnalogWDGConfig+0x2bc>
 800565e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8005662:	d00f      	beq.n	8005684 <HAL_ADC_AnalogWDGConfig+0x1cc>
 8005664:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8005668:	f200 8084 	bhi.w	8005774 <HAL_ADC_AnalogWDGConfig+0x2bc>
 800566c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005670:	d06d      	beq.n	800574e <HAL_ADC_AnalogWDGConfig+0x296>
 8005672:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005676:	d87d      	bhi.n	8005774 <HAL_ADC_AnalogWDGConfig+0x2bc>
 8005678:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800567c:	d067      	beq.n	800574e <HAL_ADC_AnalogWDGConfig+0x296>
 800567e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005682:	d177      	bne.n	8005774 <HAL_ADC_AnalogWDGConfig+0x2bc>
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          /* Update AWD by bitfield to keep the possibility to monitor        */
          /* several channels by successive calls of this function.           */
          if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a39      	ldr	r2, [pc, #228]	; (8005770 <HAL_ADC_AnalogWDGConfig+0x2b8>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d12f      	bne.n	80056ee <HAL_ADC_AnalogWDGConfig+0x236>
          {
            SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005696:	2b00      	cmp	r3, #0
 8005698:	d108      	bne.n	80056ac <HAL_ADC_AnalogWDGConfig+0x1f4>
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	0e9b      	lsrs	r3, r3, #26
 80056a0:	f003 031f 	and.w	r3, r3, #31
 80056a4:	2201      	movs	r2, #1
 80056a6:	fa02 f303 	lsl.w	r3, r2, r3
 80056aa:	e016      	b.n	80056da <HAL_ADC_AnalogWDGConfig+0x222>
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056b2:	69fb      	ldr	r3, [r7, #28]
 80056b4:	fa93 f3a3 	rbit	r3, r3
 80056b8:	61bb      	str	r3, [r7, #24]
  return result;
 80056ba:	69bb      	ldr	r3, [r7, #24]
 80056bc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80056be:	6a3b      	ldr	r3, [r7, #32]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d101      	bne.n	80056c8 <HAL_ADC_AnalogWDGConfig+0x210>
    return 32U;
 80056c4:	2320      	movs	r3, #32
 80056c6:	e003      	b.n	80056d0 <HAL_ADC_AnalogWDGConfig+0x218>
  return __builtin_clz(value);
 80056c8:	6a3b      	ldr	r3, [r7, #32]
 80056ca:	fab3 f383 	clz	r3, r3
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	f003 031f 	and.w	r3, r3, #31
 80056d4:	2201      	movs	r2, #1
 80056d6:	fa02 f303 	lsl.w	r3, r2, r3
 80056da:	687a      	ldr	r2, [r7, #4]
 80056dc:	6812      	ldr	r2, [r2, #0]
 80056de:	f8d2 10a0 	ldr.w	r1, [r2, #160]	; 0xa0
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	6812      	ldr	r2, [r2, #0]
 80056e6:	430b      	orrs	r3, r1
 80056e8:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
          }
          else
          {
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
          }
          break;
 80056ec:	e04b      	b.n	8005786 <HAL_ADC_AnalogWDGConfig+0x2ce>
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d108      	bne.n	800570c <HAL_ADC_AnalogWDGConfig+0x254>
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	0e9b      	lsrs	r3, r3, #26
 8005700:	f003 031f 	and.w	r3, r3, #31
 8005704:	2201      	movs	r2, #1
 8005706:	fa02 f303 	lsl.w	r3, r2, r3
 800570a:	e016      	b.n	800573a <HAL_ADC_AnalogWDGConfig+0x282>
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	fa93 f3a3 	rbit	r3, r3
 8005718:	60fb      	str	r3, [r7, #12]
  return result;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d101      	bne.n	8005728 <HAL_ADC_AnalogWDGConfig+0x270>
    return 32U;
 8005724:	2320      	movs	r3, #32
 8005726:	e003      	b.n	8005730 <HAL_ADC_AnalogWDGConfig+0x278>
  return __builtin_clz(value);
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	fab3 f383 	clz	r3, r3
 800572e:	b2db      	uxtb	r3, r3
 8005730:	f003 031f 	and.w	r3, r3, #31
 8005734:	2201      	movs	r2, #1
 8005736:	fa02 f303 	lsl.w	r3, r2, r3
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	6812      	ldr	r2, [r2, #0]
 800573e:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
 8005742:	687a      	ldr	r2, [r7, #4]
 8005744:	6812      	ldr	r2, [r2, #0]
 8005746:	430b      	orrs	r3, r1
 8005748:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
          break;
 800574c:	e01b      	b.n	8005786 <HAL_ADC_AnalogWDGConfig+0x2ce>

        case ADC_ANALOGWATCHDOG_ALL_REG:
        case ADC_ANALOGWATCHDOG_ALL_INJEC:
        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6818      	ldr	r0, [r3, #0]
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a05      	ldr	r2, [pc, #20]	; (800576c <HAL_ADC_AnalogWDGConfig+0x2b4>)
 8005758:	4619      	mov	r1, r3
 800575a:	f7fe fc73 	bl	8004044 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 800575e:	e012      	b.n	8005786 <HAL_ADC_AnalogWDGConfig+0x2ce>
 8005760:	7dc00000 	.word	0x7dc00000
 8005764:	0087ffff 	.word	0x0087ffff
 8005768:	0107ffff 	.word	0x0107ffff
 800576c:	0187ffff 	.word	0x0187ffff
 8005770:	0017ffff 	.word	0x0017ffff

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_DISABLE);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6818      	ldr	r0, [r3, #0]
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	2200      	movs	r2, #0
 800577e:	4619      	mov	r1, r3
 8005780:	f7fe fc60 	bl	8004044 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8005784:	bf00      	nop
      }

      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a4f      	ldr	r2, [pc, #316]	; (80058c8 <HAL_ADC_AnalogWDGConfig+0x410>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d11a      	bne.n	80057c6 <HAL_ADC_AnalogWDGConfig+0x30e>
      {
        /* Update state, clear previous result related to AWD2 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005794:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD2(hadc->Instance);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4618      	mov	r0, r3
 80057a2:	f7fe fd9d 	bl	80042e0 <LL_ADC_ClearFlag_AWD2>

        /* Configure ADC analog watchdog interrupt */
        if (AnalogWDGConfig->ITMode == ENABLE)
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	7b1b      	ldrb	r3, [r3, #12]
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d105      	bne.n	80057ba <HAL_ADC_AnalogWDGConfig+0x302>
        {
          LL_ADC_EnableIT_AWD2(hadc->Instance);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4618      	mov	r0, r3
 80057b4:	f7fe fdc0 	bl	8004338 <LL_ADC_EnableIT_AWD2>
 80057b8:	e01f      	b.n	80057fa <HAL_ADC_AnalogWDGConfig+0x342>
        }
        else
        {
          LL_ADC_DisableIT_AWD2(hadc->Instance);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4618      	mov	r0, r3
 80057c0:	f7fe fdea 	bl	8004398 <LL_ADC_DisableIT_AWD2>
 80057c4:	e019      	b.n	80057fa <HAL_ADC_AnalogWDGConfig+0x342>
      }
      /* (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_3) */
      else
      {
        /* Update state, clear previous result related to AWD3 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057ca:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD3(hadc->Instance);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4618      	mov	r0, r3
 80057d8:	f7fe fd90 	bl	80042fc <LL_ADC_ClearFlag_AWD3>

        /* Configure ADC analog watchdog interrupt */
        if (AnalogWDGConfig->ITMode == ENABLE)
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	7b1b      	ldrb	r3, [r3, #12]
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d105      	bne.n	80057f0 <HAL_ADC_AnalogWDGConfig+0x338>
        {
          LL_ADC_EnableIT_AWD3(hadc->Instance);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4618      	mov	r0, r3
 80057ea:	f7fe fdb5 	bl	8004358 <LL_ADC_EnableIT_AWD3>
 80057ee:	e004      	b.n	80057fa <HAL_ADC_AnalogWDGConfig+0x342>
        }
        else
        {
          LL_ADC_DisableIT_AWD3(hadc->Instance);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4618      	mov	r0, r3
 80057f6:	f7fe fddf 	bl	80043b8 <LL_ADC_DisableIT_AWD3>
    }

  }

  /* Analog watchdog thresholds configuration */
  if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a33      	ldr	r2, [pc, #204]	; (80058cc <HAL_ADC_AnalogWDGConfig+0x414>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d118      	bne.n	8005836 <HAL_ADC_AnalogWDGConfig+0x37e>
  {
    /* Shift the offset with respect to the selected ADC resolution:        */
    /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
    /* are set to 0.                                                        */
    tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	691a      	ldr	r2, [r3, #16]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	08db      	lsrs	r3, r3, #3
 8005810:	f003 0303 	and.w	r3, r3, #3
 8005814:	005b      	lsls	r3, r3, #1
 8005816:	fa02 f303 	lsl.w	r3, r2, r3
 800581a:	637b      	str	r3, [r7, #52]	; 0x34
    tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	695a      	ldr	r2, [r3, #20]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	08db      	lsrs	r3, r3, #3
 8005828:	f003 0303 	and.w	r3, r3, #3
 800582c:	005b      	lsls	r3, r3, #1
 800582e:	fa02 f303 	lsl.w	r3, r2, r3
 8005832:	633b      	str	r3, [r7, #48]	; 0x30
 8005834:	e035      	b.n	80058a2 <HAL_ADC_AnalogWDGConfig+0x3ea>
  else
  {
    /* Shift the offset with respect to the selected ADC resolution:        */
    /* Thresholds have to be left-aligned on bit 7, the LSB (right bits)    */
    /* are set to 0.                                                        */
    tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	f003 0318 	and.w	r3, r3, #24
 8005840:	2b18      	cmp	r3, #24
 8005842:	d00f      	beq.n	8005864 <HAL_ADC_AnalogWDGConfig+0x3ac>
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	691a      	ldr	r2, [r3, #16]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	68db      	ldr	r3, [r3, #12]
 800584e:	08db      	lsrs	r3, r3, #3
 8005850:	f003 0303 	and.w	r3, r3, #3
 8005854:	f1c3 0302 	rsb	r3, r3, #2
 8005858:	005b      	lsls	r3, r3, #1
 800585a:	f003 031e 	and.w	r3, r3, #30
 800585e:	fa22 f303 	lsr.w	r3, r2, r3
 8005862:	e002      	b.n	800586a <HAL_ADC_AnalogWDGConfig+0x3b2>
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	691b      	ldr	r3, [r3, #16]
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	637b      	str	r3, [r7, #52]	; 0x34
    tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	f003 0318 	and.w	r3, r3, #24
 8005876:	2b18      	cmp	r3, #24
 8005878:	d00f      	beq.n	800589a <HAL_ADC_AnalogWDGConfig+0x3e2>
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	695a      	ldr	r2, [r3, #20]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	68db      	ldr	r3, [r3, #12]
 8005884:	08db      	lsrs	r3, r3, #3
 8005886:	f003 0303 	and.w	r3, r3, #3
 800588a:	f1c3 0302 	rsb	r3, r3, #2
 800588e:	005b      	lsls	r3, r3, #1
 8005890:	f003 031e 	and.w	r3, r3, #30
 8005894:	fa22 f303 	lsr.w	r3, r2, r3
 8005898:	e002      	b.n	80058a0 <HAL_ADC_AnalogWDGConfig+0x3e8>
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	695b      	ldr	r3, [r3, #20]
 800589e:	009b      	lsls	r3, r3, #2
 80058a0:	633b      	str	r3, [r7, #48]	; 0x30
  }

  /* Set ADC analog watchdog thresholds value of both thresholds high and low */
  LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, AnalogWDGConfig->WatchdogNumber, tmpAWDHighThresholdShifted,
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6818      	ldr	r0, [r3, #0]
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	6819      	ldr	r1, [r3, #0]
 80058aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058ae:	f7fe fbf6 	bl	800409e <LL_ADC_ConfigAnalogWDThresholds>
                                  tmpAWDLowThresholdShifted);

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80058ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3738      	adds	r7, #56	; 0x38
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	bf00      	nop
 80058c8:	0017ffff 	.word	0x0017ffff
 80058cc:	7dc00000 	.word	0x7dc00000

080058d0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b084      	sub	sp, #16
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4618      	mov	r0, r3
 80058de:	f7fe fc92 	bl	8004206 <LL_ADC_IsEnabled>
 80058e2:	4603      	mov	r3, r0
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d14d      	bne.n	8005984 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	689a      	ldr	r2, [r3, #8]
 80058ee:	4b28      	ldr	r3, [pc, #160]	; (8005990 <ADC_Enable+0xc0>)
 80058f0:	4013      	ands	r3, r2
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d00d      	beq.n	8005912 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058fa:	f043 0210 	orr.w	r2, r3, #16
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005906:	f043 0201 	orr.w	r2, r3, #1
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	e039      	b.n	8005986 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4618      	mov	r0, r3
 8005918:	f7fe fc4d 	bl	80041b6 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800591c:	f7fe f9ec 	bl	8003cf8 <HAL_GetTick>
 8005920:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005922:	e028      	b.n	8005976 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4618      	mov	r0, r3
 800592a:	f7fe fc6c 	bl	8004206 <LL_ADC_IsEnabled>
 800592e:	4603      	mov	r3, r0
 8005930:	2b00      	cmp	r3, #0
 8005932:	d104      	bne.n	800593e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4618      	mov	r0, r3
 800593a:	f7fe fc3c 	bl	80041b6 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800593e:	f7fe f9db 	bl	8003cf8 <HAL_GetTick>
 8005942:	4602      	mov	r2, r0
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	1ad3      	subs	r3, r2, r3
 8005948:	2b02      	cmp	r3, #2
 800594a:	d914      	bls.n	8005976 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f003 0301 	and.w	r3, r3, #1
 8005956:	2b01      	cmp	r3, #1
 8005958:	d00d      	beq.n	8005976 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800595e:	f043 0210 	orr.w	r2, r3, #16
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800596a:	f043 0201 	orr.w	r2, r3, #1
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	e007      	b.n	8005986 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f003 0301 	and.w	r3, r3, #1
 8005980:	2b01      	cmp	r3, #1
 8005982:	d1cf      	bne.n	8005924 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005984:	2300      	movs	r3, #0
}
 8005986:	4618      	mov	r0, r3
 8005988:	3710      	adds	r7, #16
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
 800598e:	bf00      	nop
 8005990:	8000003f 	.word	0x8000003f

08005994 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b084      	sub	sp, #16
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4618      	mov	r0, r3
 80059a2:	f7fe fc43 	bl	800422c <LL_ADC_IsDisableOngoing>
 80059a6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4618      	mov	r0, r3
 80059ae:	f7fe fc2a 	bl	8004206 <LL_ADC_IsEnabled>
 80059b2:	4603      	mov	r3, r0
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d047      	beq.n	8005a48 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d144      	bne.n	8005a48 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	f003 030d 	and.w	r3, r3, #13
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d10c      	bne.n	80059e6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4618      	mov	r0, r3
 80059d2:	f7fe fc04 	bl	80041de <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	2203      	movs	r2, #3
 80059dc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80059de:	f7fe f98b 	bl	8003cf8 <HAL_GetTick>
 80059e2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80059e4:	e029      	b.n	8005a3a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059ea:	f043 0210 	orr.w	r2, r3, #16
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059f6:	f043 0201 	orr.w	r2, r3, #1
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	e023      	b.n	8005a4a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005a02:	f7fe f979 	bl	8003cf8 <HAL_GetTick>
 8005a06:	4602      	mov	r2, r0
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	1ad3      	subs	r3, r2, r3
 8005a0c:	2b02      	cmp	r3, #2
 8005a0e:	d914      	bls.n	8005a3a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	f003 0301 	and.w	r3, r3, #1
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d00d      	beq.n	8005a3a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a22:	f043 0210 	orr.w	r2, r3, #16
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a2e:	f043 0201 	orr.w	r2, r3, #1
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	e007      	b.n	8005a4a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	f003 0301 	and.w	r3, r3, #1
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d1dc      	bne.n	8005a02 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005a48:	2300      	movs	r3, #0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3710      	adds	r7, #16
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}

08005a52 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005a52:	b580      	push	{r7, lr}
 8005a54:	b084      	sub	sp, #16
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a5e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d14b      	bne.n	8005b04 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a70:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f003 0308 	and.w	r3, r3, #8
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d021      	beq.n	8005aca <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f7fe fa34 	bl	8003ef8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005a90:	4603      	mov	r3, r0
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d032      	beq.n	8005afc <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d12b      	bne.n	8005afc <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005aa8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ab4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d11f      	bne.n	8005afc <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ac0:	f043 0201 	orr.w	r2, r3, #1
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	65da      	str	r2, [r3, #92]	; 0x5c
 8005ac8:	e018      	b.n	8005afc <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	f003 0302 	and.w	r3, r3, #2
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d111      	bne.n	8005afc <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005adc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ae8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d105      	bne.n	8005afc <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005af4:	f043 0201 	orr.w	r2, r3, #1
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005afc:	68f8      	ldr	r0, [r7, #12]
 8005afe:	f7ff f8c3 	bl	8004c88 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005b02:	e00e      	b.n	8005b22 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b08:	f003 0310 	and.w	r3, r3, #16
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d003      	beq.n	8005b18 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005b10:	68f8      	ldr	r0, [r7, #12]
 8005b12:	f7ff f8d7 	bl	8004cc4 <HAL_ADC_ErrorCallback>
}
 8005b16:	e004      	b.n	8005b22 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	4798      	blx	r3
}
 8005b22:	bf00      	nop
 8005b24:	3710      	adds	r7, #16
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}

08005b2a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005b2a:	b580      	push	{r7, lr}
 8005b2c:	b084      	sub	sp, #16
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b36:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005b38:	68f8      	ldr	r0, [r7, #12]
 8005b3a:	f7ff f8af 	bl	8004c9c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005b3e:	bf00      	nop
 8005b40:	3710      	adds	r7, #16
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}

08005b46 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005b46:	b580      	push	{r7, lr}
 8005b48:	b084      	sub	sp, #16
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b52:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b58:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b64:	f043 0204 	orr.w	r2, r3, #4
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005b6c:	68f8      	ldr	r0, [r7, #12]
 8005b6e:	f7ff f8a9 	bl	8004cc4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005b72:	bf00      	nop
 8005b74:	3710      	adds	r7, #16
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}

08005b7a <LL_ADC_IsEnabled>:
{
 8005b7a:	b480      	push	{r7}
 8005b7c:	b083      	sub	sp, #12
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	f003 0301 	and.w	r3, r3, #1
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d101      	bne.n	8005b92 <LL_ADC_IsEnabled+0x18>
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e000      	b.n	8005b94 <LL_ADC_IsEnabled+0x1a>
 8005b92:	2300      	movs	r3, #0
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	370c      	adds	r7, #12
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr

08005ba0 <LL_ADC_StartCalibration>:
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b083      	sub	sp, #12
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005bb2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005bb6:	683a      	ldr	r2, [r7, #0]
 8005bb8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	609a      	str	r2, [r3, #8]
}
 8005bc6:	bf00      	nop
 8005bc8:	370c      	adds	r7, #12
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr

08005bd2 <LL_ADC_IsCalibrationOnGoing>:
{
 8005bd2:	b480      	push	{r7}
 8005bd4:	b083      	sub	sp, #12
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005be2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005be6:	d101      	bne.n	8005bec <LL_ADC_IsCalibrationOnGoing+0x1a>
 8005be8:	2301      	movs	r3, #1
 8005bea:	e000      	b.n	8005bee <LL_ADC_IsCalibrationOnGoing+0x1c>
 8005bec:	2300      	movs	r3, #0
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	370c      	adds	r7, #12
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr

08005bfa <LL_ADC_REG_IsConversionOngoing>:
{
 8005bfa:	b480      	push	{r7}
 8005bfc:	b083      	sub	sp, #12
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	f003 0304 	and.w	r3, r3, #4
 8005c0a:	2b04      	cmp	r3, #4
 8005c0c:	d101      	bne.n	8005c12 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e000      	b.n	8005c14 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005c12:	2300      	movs	r3, #0
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	370c      	adds	r7, #12
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr

08005c20 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b084      	sub	sp, #16
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d101      	bne.n	8005c3c <HAL_ADCEx_Calibration_Start+0x1c>
 8005c38:	2302      	movs	r3, #2
 8005c3a:	e04d      	b.n	8005cd8 <HAL_ADCEx_Calibration_Start+0xb8>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f7ff fea5 	bl	8005994 <ADC_Disable>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005c4e:	7bfb      	ldrb	r3, [r7, #15]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d136      	bne.n	8005cc2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c58:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005c5c:	f023 0302 	bic.w	r3, r3, #2
 8005c60:	f043 0202 	orr.w	r2, r3, #2
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	6839      	ldr	r1, [r7, #0]
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f7ff ff96 	bl	8005ba0 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005c74:	e014      	b.n	8005ca0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	3301      	adds	r3, #1
 8005c7a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	4a18      	ldr	r2, [pc, #96]	; (8005ce0 <HAL_ADCEx_Calibration_Start+0xc0>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d90d      	bls.n	8005ca0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c88:	f023 0312 	bic.w	r3, r3, #18
 8005c8c:	f043 0210 	orr.w	r2, r3, #16
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2200      	movs	r2, #0
 8005c98:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	e01b      	b.n	8005cd8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f7ff ff94 	bl	8005bd2 <LL_ADC_IsCalibrationOnGoing>
 8005caa:	4603      	mov	r3, r0
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d1e2      	bne.n	8005c76 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cb4:	f023 0303 	bic.w	r3, r3, #3
 8005cb8:	f043 0201 	orr.w	r2, r3, #1
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	65da      	str	r2, [r3, #92]	; 0x5c
 8005cc0:	e005      	b.n	8005cce <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cc6:	f043 0210 	orr.w	r2, r3, #16
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8005cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3710      	adds	r7, #16
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}
 8005ce0:	0004de01 	.word	0x0004de01

08005ce4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b083      	sub	sp, #12
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8005cec:	bf00      	nop
 8005cee:	370c      	adds	r7, #12
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr

08005cf8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b083      	sub	sp, #12
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8005d00:	bf00      	nop
 8005d02:	370c      	adds	r7, #12
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr

08005d0c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8005d14:	bf00      	nop
 8005d16:	370c      	adds	r7, #12
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr

08005d20 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b083      	sub	sp, #12
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8005d28:	bf00      	nop
 8005d2a:	370c      	adds	r7, #12
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr

08005d34 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b083      	sub	sp, #12
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8005d3c:	bf00      	nop
 8005d3e:	370c      	adds	r7, #12
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr

08005d48 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005d48:	b590      	push	{r4, r7, lr}
 8005d4a:	b0a1      	sub	sp, #132	; 0x84
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005d52:	2300      	movs	r3, #0
 8005d54:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d101      	bne.n	8005d66 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005d62:	2302      	movs	r3, #2
 8005d64:	e08b      	b.n	8005e7e <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2201      	movs	r2, #1
 8005d6a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8005d6e:	2300      	movs	r3, #0
 8005d70:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8005d72:	2300      	movs	r3, #0
 8005d74:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d7e:	d102      	bne.n	8005d86 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005d80:	4b41      	ldr	r3, [pc, #260]	; (8005e88 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8005d82:	60bb      	str	r3, [r7, #8]
 8005d84:	e001      	b.n	8005d8a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005d86:	2300      	movs	r3, #0
 8005d88:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d10b      	bne.n	8005da8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d94:	f043 0220 	orr.w	r2, r3, #32
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8005da4:	2301      	movs	r3, #1
 8005da6:	e06a      	b.n	8005e7e <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	4618      	mov	r0, r3
 8005dac:	f7ff ff25 	bl	8005bfa <LL_ADC_REG_IsConversionOngoing>
 8005db0:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4618      	mov	r0, r3
 8005db8:	f7ff ff1f 	bl	8005bfa <LL_ADC_REG_IsConversionOngoing>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d14c      	bne.n	8005e5c <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005dc2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d149      	bne.n	8005e5c <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005dc8:	4b30      	ldr	r3, [pc, #192]	; (8005e8c <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8005dca:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d028      	beq.n	8005e26 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005dd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	6859      	ldr	r1, [r3, #4]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005de6:	035b      	lsls	r3, r3, #13
 8005de8:	430b      	orrs	r3, r1
 8005dea:	431a      	orrs	r2, r3
 8005dec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005dee:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005df0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005df4:	f7ff fec1 	bl	8005b7a <LL_ADC_IsEnabled>
 8005df8:	4604      	mov	r4, r0
 8005dfa:	4823      	ldr	r0, [pc, #140]	; (8005e88 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8005dfc:	f7ff febd 	bl	8005b7a <LL_ADC_IsEnabled>
 8005e00:	4603      	mov	r3, r0
 8005e02:	4323      	orrs	r3, r4
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d133      	bne.n	8005e70 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005e08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005e10:	f023 030f 	bic.w	r3, r3, #15
 8005e14:	683a      	ldr	r2, [r7, #0]
 8005e16:	6811      	ldr	r1, [r2, #0]
 8005e18:	683a      	ldr	r2, [r7, #0]
 8005e1a:	6892      	ldr	r2, [r2, #8]
 8005e1c:	430a      	orrs	r2, r1
 8005e1e:	431a      	orrs	r2, r3
 8005e20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e22:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005e24:	e024      	b.n	8005e70 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005e26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005e2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e30:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005e32:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005e36:	f7ff fea0 	bl	8005b7a <LL_ADC_IsEnabled>
 8005e3a:	4604      	mov	r4, r0
 8005e3c:	4812      	ldr	r0, [pc, #72]	; (8005e88 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8005e3e:	f7ff fe9c 	bl	8005b7a <LL_ADC_IsEnabled>
 8005e42:	4603      	mov	r3, r0
 8005e44:	4323      	orrs	r3, r4
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d112      	bne.n	8005e70 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005e4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005e52:	f023 030f 	bic.w	r3, r3, #15
 8005e56:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005e58:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005e5a:	e009      	b.n	8005e70 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e60:	f043 0220 	orr.w	r2, r3, #32
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8005e6e:	e000      	b.n	8005e72 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005e70:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2200      	movs	r2, #0
 8005e76:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8005e7a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3784      	adds	r7, #132	; 0x84
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd90      	pop	{r4, r7, pc}
 8005e86:	bf00      	nop
 8005e88:	50000100 	.word	0x50000100
 8005e8c:	50000300 	.word	0x50000300

08005e90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b085      	sub	sp, #20
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f003 0307 	and.w	r3, r3, #7
 8005e9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005ea0:	4b0c      	ldr	r3, [pc, #48]	; (8005ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005ea6:	68ba      	ldr	r2, [r7, #8]
 8005ea8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005eac:	4013      	ands	r3, r2
 8005eae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005eb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005ebc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ec0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005ec2:	4a04      	ldr	r2, [pc, #16]	; (8005ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	60d3      	str	r3, [r2, #12]
}
 8005ec8:	bf00      	nop
 8005eca:	3714      	adds	r7, #20
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr
 8005ed4:	e000ed00 	.word	0xe000ed00

08005ed8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005edc:	4b04      	ldr	r3, [pc, #16]	; (8005ef0 <__NVIC_GetPriorityGrouping+0x18>)
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	0a1b      	lsrs	r3, r3, #8
 8005ee2:	f003 0307 	and.w	r3, r3, #7
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr
 8005ef0:	e000ed00 	.word	0xe000ed00

08005ef4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b083      	sub	sp, #12
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	4603      	mov	r3, r0
 8005efc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	db0b      	blt.n	8005f1e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005f06:	79fb      	ldrb	r3, [r7, #7]
 8005f08:	f003 021f 	and.w	r2, r3, #31
 8005f0c:	4907      	ldr	r1, [pc, #28]	; (8005f2c <__NVIC_EnableIRQ+0x38>)
 8005f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f12:	095b      	lsrs	r3, r3, #5
 8005f14:	2001      	movs	r0, #1
 8005f16:	fa00 f202 	lsl.w	r2, r0, r2
 8005f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005f1e:	bf00      	nop
 8005f20:	370c      	adds	r7, #12
 8005f22:	46bd      	mov	sp, r7
 8005f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f28:	4770      	bx	lr
 8005f2a:	bf00      	nop
 8005f2c:	e000e100 	.word	0xe000e100

08005f30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b083      	sub	sp, #12
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	4603      	mov	r3, r0
 8005f38:	6039      	str	r1, [r7, #0]
 8005f3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	db0a      	blt.n	8005f5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	b2da      	uxtb	r2, r3
 8005f48:	490c      	ldr	r1, [pc, #48]	; (8005f7c <__NVIC_SetPriority+0x4c>)
 8005f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f4e:	0112      	lsls	r2, r2, #4
 8005f50:	b2d2      	uxtb	r2, r2
 8005f52:	440b      	add	r3, r1
 8005f54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005f58:	e00a      	b.n	8005f70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	b2da      	uxtb	r2, r3
 8005f5e:	4908      	ldr	r1, [pc, #32]	; (8005f80 <__NVIC_SetPriority+0x50>)
 8005f60:	79fb      	ldrb	r3, [r7, #7]
 8005f62:	f003 030f 	and.w	r3, r3, #15
 8005f66:	3b04      	subs	r3, #4
 8005f68:	0112      	lsls	r2, r2, #4
 8005f6a:	b2d2      	uxtb	r2, r2
 8005f6c:	440b      	add	r3, r1
 8005f6e:	761a      	strb	r2, [r3, #24]
}
 8005f70:	bf00      	nop
 8005f72:	370c      	adds	r7, #12
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr
 8005f7c:	e000e100 	.word	0xe000e100
 8005f80:	e000ed00 	.word	0xe000ed00

08005f84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b089      	sub	sp, #36	; 0x24
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	60b9      	str	r1, [r7, #8]
 8005f8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f003 0307 	and.w	r3, r3, #7
 8005f96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005f98:	69fb      	ldr	r3, [r7, #28]
 8005f9a:	f1c3 0307 	rsb	r3, r3, #7
 8005f9e:	2b04      	cmp	r3, #4
 8005fa0:	bf28      	it	cs
 8005fa2:	2304      	movcs	r3, #4
 8005fa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005fa6:	69fb      	ldr	r3, [r7, #28]
 8005fa8:	3304      	adds	r3, #4
 8005faa:	2b06      	cmp	r3, #6
 8005fac:	d902      	bls.n	8005fb4 <NVIC_EncodePriority+0x30>
 8005fae:	69fb      	ldr	r3, [r7, #28]
 8005fb0:	3b03      	subs	r3, #3
 8005fb2:	e000      	b.n	8005fb6 <NVIC_EncodePriority+0x32>
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8005fbc:	69bb      	ldr	r3, [r7, #24]
 8005fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8005fc2:	43da      	mvns	r2, r3
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	401a      	ands	r2, r3
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005fcc:	f04f 31ff 	mov.w	r1, #4294967295
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8005fd6:	43d9      	mvns	r1, r3
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005fdc:	4313      	orrs	r3, r2
         );
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3724      	adds	r7, #36	; 0x24
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr
	...

08005fec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b082      	sub	sp, #8
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	3b01      	subs	r3, #1
 8005ff8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ffc:	d301      	bcc.n	8006002 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005ffe:	2301      	movs	r3, #1
 8006000:	e00f      	b.n	8006022 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006002:	4a0a      	ldr	r2, [pc, #40]	; (800602c <SysTick_Config+0x40>)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	3b01      	subs	r3, #1
 8006008:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800600a:	210f      	movs	r1, #15
 800600c:	f04f 30ff 	mov.w	r0, #4294967295
 8006010:	f7ff ff8e 	bl	8005f30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006014:	4b05      	ldr	r3, [pc, #20]	; (800602c <SysTick_Config+0x40>)
 8006016:	2200      	movs	r2, #0
 8006018:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800601a:	4b04      	ldr	r3, [pc, #16]	; (800602c <SysTick_Config+0x40>)
 800601c:	2207      	movs	r2, #7
 800601e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006020:	2300      	movs	r3, #0
}
 8006022:	4618      	mov	r0, r3
 8006024:	3708      	adds	r7, #8
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}
 800602a:	bf00      	nop
 800602c:	e000e010 	.word	0xe000e010

08006030 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b082      	sub	sp, #8
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f7ff ff29 	bl	8005e90 <__NVIC_SetPriorityGrouping>
}
 800603e:	bf00      	nop
 8006040:	3708      	adds	r7, #8
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}

08006046 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006046:	b580      	push	{r7, lr}
 8006048:	b086      	sub	sp, #24
 800604a:	af00      	add	r7, sp, #0
 800604c:	4603      	mov	r3, r0
 800604e:	60b9      	str	r1, [r7, #8]
 8006050:	607a      	str	r2, [r7, #4]
 8006052:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006054:	f7ff ff40 	bl	8005ed8 <__NVIC_GetPriorityGrouping>
 8006058:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	68b9      	ldr	r1, [r7, #8]
 800605e:	6978      	ldr	r0, [r7, #20]
 8006060:	f7ff ff90 	bl	8005f84 <NVIC_EncodePriority>
 8006064:	4602      	mov	r2, r0
 8006066:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800606a:	4611      	mov	r1, r2
 800606c:	4618      	mov	r0, r3
 800606e:	f7ff ff5f 	bl	8005f30 <__NVIC_SetPriority>
}
 8006072:	bf00      	nop
 8006074:	3718      	adds	r7, #24
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}

0800607a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800607a:	b580      	push	{r7, lr}
 800607c:	b082      	sub	sp, #8
 800607e:	af00      	add	r7, sp, #0
 8006080:	4603      	mov	r3, r0
 8006082:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006088:	4618      	mov	r0, r3
 800608a:	f7ff ff33 	bl	8005ef4 <__NVIC_EnableIRQ>
}
 800608e:	bf00      	nop
 8006090:	3708      	adds	r7, #8
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}

08006096 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006096:	b580      	push	{r7, lr}
 8006098:	b082      	sub	sp, #8
 800609a:	af00      	add	r7, sp, #0
 800609c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f7ff ffa4 	bl	8005fec <SysTick_Config>
 80060a4:	4603      	mov	r3, r0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3708      	adds	r7, #8
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}
	...

080060b0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b082      	sub	sp, #8
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d101      	bne.n	80060c2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	e054      	b.n	800616c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	7f5b      	ldrb	r3, [r3, #29]
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d105      	bne.n	80060d8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2200      	movs	r2, #0
 80060d0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f7fd fa38 	bl	8003548 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2202      	movs	r2, #2
 80060dc:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	791b      	ldrb	r3, [r3, #4]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d10c      	bne.n	8006100 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a22      	ldr	r2, [pc, #136]	; (8006174 <HAL_CRC_Init+0xc4>)
 80060ec:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	689a      	ldr	r2, [r3, #8]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f022 0218 	bic.w	r2, r2, #24
 80060fc:	609a      	str	r2, [r3, #8]
 80060fe:	e00c      	b.n	800611a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6899      	ldr	r1, [r3, #8]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	68db      	ldr	r3, [r3, #12]
 8006108:	461a      	mov	r2, r3
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f000 f834 	bl	8006178 <HAL_CRCEx_Polynomial_Set>
 8006110:	4603      	mov	r3, r0
 8006112:	2b00      	cmp	r3, #0
 8006114:	d001      	beq.n	800611a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	e028      	b.n	800616c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	795b      	ldrb	r3, [r3, #5]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d105      	bne.n	800612e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f04f 32ff 	mov.w	r2, #4294967295
 800612a:	611a      	str	r2, [r3, #16]
 800612c:	e004      	b.n	8006138 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	6912      	ldr	r2, [r2, #16]
 8006136:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	695a      	ldr	r2, [r3, #20]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	430a      	orrs	r2, r1
 800614c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	699a      	ldr	r2, [r3, #24]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	430a      	orrs	r2, r1
 8006162:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2201      	movs	r2, #1
 8006168:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800616a:	2300      	movs	r3, #0
}
 800616c:	4618      	mov	r0, r3
 800616e:	3708      	adds	r7, #8
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}
 8006174:	04c11db7 	.word	0x04c11db7

08006178 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8006178:	b480      	push	{r7}
 800617a:	b087      	sub	sp, #28
 800617c:	af00      	add	r7, sp, #0
 800617e:	60f8      	str	r0, [r7, #12]
 8006180:	60b9      	str	r1, [r7, #8]
 8006182:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006184:	2300      	movs	r3, #0
 8006186:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8006188:	231f      	movs	r3, #31
 800618a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800618c:	bf00      	nop
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	1e5a      	subs	r2, r3, #1
 8006192:	613a      	str	r2, [r7, #16]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d009      	beq.n	80061ac <HAL_CRCEx_Polynomial_Set+0x34>
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	f003 031f 	and.w	r3, r3, #31
 800619e:	68ba      	ldr	r2, [r7, #8]
 80061a0:	fa22 f303 	lsr.w	r3, r2, r3
 80061a4:	f003 0301 	and.w	r3, r3, #1
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d0f0      	beq.n	800618e <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2b18      	cmp	r3, #24
 80061b0:	d846      	bhi.n	8006240 <HAL_CRCEx_Polynomial_Set+0xc8>
 80061b2:	a201      	add	r2, pc, #4	; (adr r2, 80061b8 <HAL_CRCEx_Polynomial_Set+0x40>)
 80061b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061b8:	08006247 	.word	0x08006247
 80061bc:	08006241 	.word	0x08006241
 80061c0:	08006241 	.word	0x08006241
 80061c4:	08006241 	.word	0x08006241
 80061c8:	08006241 	.word	0x08006241
 80061cc:	08006241 	.word	0x08006241
 80061d0:	08006241 	.word	0x08006241
 80061d4:	08006241 	.word	0x08006241
 80061d8:	08006235 	.word	0x08006235
 80061dc:	08006241 	.word	0x08006241
 80061e0:	08006241 	.word	0x08006241
 80061e4:	08006241 	.word	0x08006241
 80061e8:	08006241 	.word	0x08006241
 80061ec:	08006241 	.word	0x08006241
 80061f0:	08006241 	.word	0x08006241
 80061f4:	08006241 	.word	0x08006241
 80061f8:	08006229 	.word	0x08006229
 80061fc:	08006241 	.word	0x08006241
 8006200:	08006241 	.word	0x08006241
 8006204:	08006241 	.word	0x08006241
 8006208:	08006241 	.word	0x08006241
 800620c:	08006241 	.word	0x08006241
 8006210:	08006241 	.word	0x08006241
 8006214:	08006241 	.word	0x08006241
 8006218:	0800621d 	.word	0x0800621d
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	2b06      	cmp	r3, #6
 8006220:	d913      	bls.n	800624a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8006222:	2301      	movs	r3, #1
 8006224:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006226:	e010      	b.n	800624a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	2b07      	cmp	r3, #7
 800622c:	d90f      	bls.n	800624e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006232:	e00c      	b.n	800624e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	2b0f      	cmp	r3, #15
 8006238:	d90b      	bls.n	8006252 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800623e:	e008      	b.n	8006252 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8006240:	2301      	movs	r3, #1
 8006242:	75fb      	strb	r3, [r7, #23]
      break;
 8006244:	e006      	b.n	8006254 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006246:	bf00      	nop
 8006248:	e004      	b.n	8006254 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800624a:	bf00      	nop
 800624c:	e002      	b.n	8006254 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800624e:	bf00      	nop
 8006250:	e000      	b.n	8006254 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006252:	bf00      	nop
  }
  if (status == HAL_OK)
 8006254:	7dfb      	ldrb	r3, [r7, #23]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d10d      	bne.n	8006276 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	68ba      	ldr	r2, [r7, #8]
 8006260:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	f023 0118 	bic.w	r1, r3, #24
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	430a      	orrs	r2, r1
 8006274:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8006276:	7dfb      	ldrb	r3, [r7, #23]
}
 8006278:	4618      	mov	r0, r3
 800627a:	371c      	adds	r7, #28
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr

08006284 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b084      	sub	sp, #16
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d101      	bne.n	8006296 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	e08d      	b.n	80063b2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	461a      	mov	r2, r3
 800629c:	4b47      	ldr	r3, [pc, #284]	; (80063bc <HAL_DMA_Init+0x138>)
 800629e:	429a      	cmp	r2, r3
 80062a0:	d80f      	bhi.n	80062c2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	461a      	mov	r2, r3
 80062a8:	4b45      	ldr	r3, [pc, #276]	; (80063c0 <HAL_DMA_Init+0x13c>)
 80062aa:	4413      	add	r3, r2
 80062ac:	4a45      	ldr	r2, [pc, #276]	; (80063c4 <HAL_DMA_Init+0x140>)
 80062ae:	fba2 2303 	umull	r2, r3, r2, r3
 80062b2:	091b      	lsrs	r3, r3, #4
 80062b4:	009a      	lsls	r2, r3, #2
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	4a42      	ldr	r2, [pc, #264]	; (80063c8 <HAL_DMA_Init+0x144>)
 80062be:	641a      	str	r2, [r3, #64]	; 0x40
 80062c0:	e00e      	b.n	80062e0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	461a      	mov	r2, r3
 80062c8:	4b40      	ldr	r3, [pc, #256]	; (80063cc <HAL_DMA_Init+0x148>)
 80062ca:	4413      	add	r3, r2
 80062cc:	4a3d      	ldr	r2, [pc, #244]	; (80063c4 <HAL_DMA_Init+0x140>)
 80062ce:	fba2 2303 	umull	r2, r3, r2, r3
 80062d2:	091b      	lsrs	r3, r3, #4
 80062d4:	009a      	lsls	r2, r3, #2
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	4a3c      	ldr	r2, [pc, #240]	; (80063d0 <HAL_DMA_Init+0x14c>)
 80062de:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2202      	movs	r2, #2
 80062e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80062f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062fa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006304:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	691b      	ldr	r3, [r3, #16]
 800630a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006310:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	699b      	ldr	r3, [r3, #24]
 8006316:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800631c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6a1b      	ldr	r3, [r3, #32]
 8006322:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006324:	68fa      	ldr	r2, [r7, #12]
 8006326:	4313      	orrs	r3, r2
 8006328:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	68fa      	ldr	r2, [r7, #12]
 8006330:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 fa76 	bl	8006824 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006340:	d102      	bne.n	8006348 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2200      	movs	r2, #0
 8006346:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	685a      	ldr	r2, [r3, #4]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006350:	b2d2      	uxtb	r2, r2
 8006352:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800635c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d010      	beq.n	8006388 <HAL_DMA_Init+0x104>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	2b04      	cmp	r3, #4
 800636c:	d80c      	bhi.n	8006388 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f000 fa96 	bl	80068a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006378:	2200      	movs	r2, #0
 800637a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006384:	605a      	str	r2, [r3, #4]
 8006386:	e008      	b.n	800639a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2200      	movs	r2, #0
 800638c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2200      	movs	r2, #0
 8006392:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2200      	movs	r2, #0
 800639e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2201      	movs	r2, #1
 80063a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2200      	movs	r2, #0
 80063ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80063b0:	2300      	movs	r3, #0
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3710      	adds	r7, #16
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
 80063ba:	bf00      	nop
 80063bc:	40020407 	.word	0x40020407
 80063c0:	bffdfff8 	.word	0xbffdfff8
 80063c4:	cccccccd 	.word	0xcccccccd
 80063c8:	40020000 	.word	0x40020000
 80063cc:	bffdfbf8 	.word	0xbffdfbf8
 80063d0:	40020400 	.word	0x40020400

080063d4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b086      	sub	sp, #24
 80063d8:	af00      	add	r7, sp, #0
 80063da:	60f8      	str	r0, [r7, #12]
 80063dc:	60b9      	str	r1, [r7, #8]
 80063de:	607a      	str	r2, [r7, #4]
 80063e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80063e2:	2300      	movs	r3, #0
 80063e4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	d101      	bne.n	80063f4 <HAL_DMA_Start_IT+0x20>
 80063f0:	2302      	movs	r3, #2
 80063f2:	e066      	b.n	80064c2 <HAL_DMA_Start_IT+0xee>
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2201      	movs	r2, #1
 80063f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006402:	b2db      	uxtb	r3, r3
 8006404:	2b01      	cmp	r3, #1
 8006406:	d155      	bne.n	80064b4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2202      	movs	r2, #2
 800640c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2200      	movs	r2, #0
 8006414:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f022 0201 	bic.w	r2, r2, #1
 8006424:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	68b9      	ldr	r1, [r7, #8]
 800642c:	68f8      	ldr	r0, [r7, #12]
 800642e:	f000 f9bb 	bl	80067a8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006436:	2b00      	cmp	r3, #0
 8006438:	d008      	beq.n	800644c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	681a      	ldr	r2, [r3, #0]
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f042 020e 	orr.w	r2, r2, #14
 8006448:	601a      	str	r2, [r3, #0]
 800644a:	e00f      	b.n	800646c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	681a      	ldr	r2, [r3, #0]
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f022 0204 	bic.w	r2, r2, #4
 800645a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f042 020a 	orr.w	r2, r2, #10
 800646a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006476:	2b00      	cmp	r3, #0
 8006478:	d007      	beq.n	800648a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006484:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006488:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800648e:	2b00      	cmp	r3, #0
 8006490:	d007      	beq.n	80064a2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800649c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80064a0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f042 0201 	orr.w	r2, r2, #1
 80064b0:	601a      	str	r2, [r3, #0]
 80064b2:	e005      	b.n	80064c0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2200      	movs	r2, #0
 80064b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80064bc:	2302      	movs	r3, #2
 80064be:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80064c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	3718      	adds	r7, #24
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}

080064ca <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80064ca:	b480      	push	{r7}
 80064cc:	b085      	sub	sp, #20
 80064ce:	af00      	add	r7, sp, #0
 80064d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80064d2:	2300      	movs	r3, #0
 80064d4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80064dc:	b2db      	uxtb	r3, r3
 80064de:	2b02      	cmp	r3, #2
 80064e0:	d005      	beq.n	80064ee <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2204      	movs	r2, #4
 80064e6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80064e8:	2301      	movs	r3, #1
 80064ea:	73fb      	strb	r3, [r7, #15]
 80064ec:	e037      	b.n	800655e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f022 020e 	bic.w	r2, r2, #14
 80064fc:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006508:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800650c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f022 0201 	bic.w	r2, r2, #1
 800651c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006522:	f003 021f 	and.w	r2, r3, #31
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800652a:	2101      	movs	r1, #1
 800652c:	fa01 f202 	lsl.w	r2, r1, r2
 8006530:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006536:	687a      	ldr	r2, [r7, #4]
 8006538:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800653a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006540:	2b00      	cmp	r3, #0
 8006542:	d00c      	beq.n	800655e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800654e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006552:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800655c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2201      	movs	r2, #1
 8006562:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2200      	movs	r2, #0
 800656a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800656e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006570:	4618      	mov	r0, r3
 8006572:	3714      	adds	r7, #20
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr

0800657c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b084      	sub	sp, #16
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006584:	2300      	movs	r3, #0
 8006586:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800658e:	b2db      	uxtb	r3, r3
 8006590:	2b02      	cmp	r3, #2
 8006592:	d00d      	beq.n	80065b0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2204      	movs	r2, #4
 8006598:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2201      	movs	r2, #1
 800659e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2200      	movs	r2, #0
 80065a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80065aa:	2301      	movs	r3, #1
 80065ac:	73fb      	strb	r3, [r7, #15]
 80065ae:	e047      	b.n	8006640 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f022 020e 	bic.w	r2, r2, #14
 80065be:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f022 0201 	bic.w	r2, r2, #1
 80065ce:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065d4:	681a      	ldr	r2, [r3, #0]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80065de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065e4:	f003 021f 	and.w	r2, r3, #31
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ec:	2101      	movs	r1, #1
 80065ee:	fa01 f202 	lsl.w	r2, r1, r2
 80065f2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80065fc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006602:	2b00      	cmp	r3, #0
 8006604:	d00c      	beq.n	8006620 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006610:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006614:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800661a:	687a      	ldr	r2, [r7, #4]
 800661c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800661e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2201      	movs	r2, #1
 8006624:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2200      	movs	r2, #0
 800662c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006634:	2b00      	cmp	r3, #0
 8006636:	d003      	beq.n	8006640 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	4798      	blx	r3
    }
  }
  return status;
 8006640:	7bfb      	ldrb	r3, [r7, #15]
}
 8006642:	4618      	mov	r0, r3
 8006644:	3710      	adds	r7, #16
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}

0800664a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800664a:	b580      	push	{r7, lr}
 800664c:	b084      	sub	sp, #16
 800664e:	af00      	add	r7, sp, #0
 8006650:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006666:	f003 031f 	and.w	r3, r3, #31
 800666a:	2204      	movs	r2, #4
 800666c:	409a      	lsls	r2, r3
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	4013      	ands	r3, r2
 8006672:	2b00      	cmp	r3, #0
 8006674:	d026      	beq.n	80066c4 <HAL_DMA_IRQHandler+0x7a>
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	f003 0304 	and.w	r3, r3, #4
 800667c:	2b00      	cmp	r3, #0
 800667e:	d021      	beq.n	80066c4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f003 0320 	and.w	r3, r3, #32
 800668a:	2b00      	cmp	r3, #0
 800668c:	d107      	bne.n	800669e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f022 0204 	bic.w	r2, r2, #4
 800669c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066a2:	f003 021f 	and.w	r2, r3, #31
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066aa:	2104      	movs	r1, #4
 80066ac:	fa01 f202 	lsl.w	r2, r1, r2
 80066b0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d071      	beq.n	800679e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80066c2:	e06c      	b.n	800679e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066c8:	f003 031f 	and.w	r3, r3, #31
 80066cc:	2202      	movs	r2, #2
 80066ce:	409a      	lsls	r2, r3
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	4013      	ands	r3, r2
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d02e      	beq.n	8006736 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	f003 0302 	and.w	r3, r3, #2
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d029      	beq.n	8006736 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f003 0320 	and.w	r3, r3, #32
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d10b      	bne.n	8006708 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f022 020a 	bic.w	r2, r2, #10
 80066fe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2201      	movs	r2, #1
 8006704:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800670c:	f003 021f 	and.w	r2, r3, #31
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006714:	2102      	movs	r1, #2
 8006716:	fa01 f202 	lsl.w	r2, r1, r2
 800671a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006728:	2b00      	cmp	r3, #0
 800672a:	d038      	beq.n	800679e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006734:	e033      	b.n	800679e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800673a:	f003 031f 	and.w	r3, r3, #31
 800673e:	2208      	movs	r2, #8
 8006740:	409a      	lsls	r2, r3
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	4013      	ands	r3, r2
 8006746:	2b00      	cmp	r3, #0
 8006748:	d02a      	beq.n	80067a0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	f003 0308 	and.w	r3, r3, #8
 8006750:	2b00      	cmp	r3, #0
 8006752:	d025      	beq.n	80067a0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f022 020e 	bic.w	r2, r2, #14
 8006762:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006768:	f003 021f 	and.w	r2, r3, #31
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006770:	2101      	movs	r1, #1
 8006772:	fa01 f202 	lsl.w	r2, r1, r2
 8006776:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2201      	movs	r2, #1
 800677c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2201      	movs	r2, #1
 8006782:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2200      	movs	r2, #0
 800678a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006792:	2b00      	cmp	r3, #0
 8006794:	d004      	beq.n	80067a0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800679e:	bf00      	nop
 80067a0:	bf00      	nop
}
 80067a2:	3710      	adds	r7, #16
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}

080067a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b085      	sub	sp, #20
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	60f8      	str	r0, [r7, #12]
 80067b0:	60b9      	str	r1, [r7, #8]
 80067b2:	607a      	str	r2, [r7, #4]
 80067b4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067ba:	68fa      	ldr	r2, [r7, #12]
 80067bc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80067be:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d004      	beq.n	80067d2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067cc:	68fa      	ldr	r2, [r7, #12]
 80067ce:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80067d0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067d6:	f003 021f 	and.w	r2, r3, #31
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067de:	2101      	movs	r1, #1
 80067e0:	fa01 f202 	lsl.w	r2, r1, r2
 80067e4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	683a      	ldr	r2, [r7, #0]
 80067ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	2b10      	cmp	r3, #16
 80067f4:	d108      	bne.n	8006808 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	687a      	ldr	r2, [r7, #4]
 80067fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	68ba      	ldr	r2, [r7, #8]
 8006804:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006806:	e007      	b.n	8006818 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	68ba      	ldr	r2, [r7, #8]
 800680e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	687a      	ldr	r2, [r7, #4]
 8006816:	60da      	str	r2, [r3, #12]
}
 8006818:	bf00      	nop
 800681a:	3714      	adds	r7, #20
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr

08006824 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006824:	b480      	push	{r7}
 8006826:	b087      	sub	sp, #28
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	461a      	mov	r2, r3
 8006832:	4b16      	ldr	r3, [pc, #88]	; (800688c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8006834:	429a      	cmp	r2, r3
 8006836:	d802      	bhi.n	800683e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8006838:	4b15      	ldr	r3, [pc, #84]	; (8006890 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800683a:	617b      	str	r3, [r7, #20]
 800683c:	e001      	b.n	8006842 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800683e:	4b15      	ldr	r3, [pc, #84]	; (8006894 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8006840:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	b2db      	uxtb	r3, r3
 800684c:	3b08      	subs	r3, #8
 800684e:	4a12      	ldr	r2, [pc, #72]	; (8006898 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006850:	fba2 2303 	umull	r2, r3, r2, r3
 8006854:	091b      	lsrs	r3, r3, #4
 8006856:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800685c:	089b      	lsrs	r3, r3, #2
 800685e:	009a      	lsls	r2, r3, #2
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	4413      	add	r3, r2
 8006864:	461a      	mov	r2, r3
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	4a0b      	ldr	r2, [pc, #44]	; (800689c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800686e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f003 031f 	and.w	r3, r3, #31
 8006876:	2201      	movs	r2, #1
 8006878:	409a      	lsls	r2, r3
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800687e:	bf00      	nop
 8006880:	371c      	adds	r7, #28
 8006882:	46bd      	mov	sp, r7
 8006884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006888:	4770      	bx	lr
 800688a:	bf00      	nop
 800688c:	40020407 	.word	0x40020407
 8006890:	40020800 	.word	0x40020800
 8006894:	40020820 	.word	0x40020820
 8006898:	cccccccd 	.word	0xcccccccd
 800689c:	40020880 	.word	0x40020880

080068a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b085      	sub	sp, #20
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	b2db      	uxtb	r3, r3
 80068ae:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80068b0:	68fa      	ldr	r2, [r7, #12]
 80068b2:	4b0b      	ldr	r3, [pc, #44]	; (80068e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80068b4:	4413      	add	r3, r2
 80068b6:	009b      	lsls	r3, r3, #2
 80068b8:	461a      	mov	r2, r3
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	4a08      	ldr	r2, [pc, #32]	; (80068e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80068c2:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	3b01      	subs	r3, #1
 80068c8:	f003 031f 	and.w	r3, r3, #31
 80068cc:	2201      	movs	r2, #1
 80068ce:	409a      	lsls	r2, r3
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80068d4:	bf00      	nop
 80068d6:	3714      	adds	r7, #20
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr
 80068e0:	1000823f 	.word	0x1000823f
 80068e4:	40020940 	.word	0x40020940

080068e8 <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b086      	sub	sp, #24
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	60f8      	str	r0, [r7, #12]
 80068f0:	60b9      	str	r1, [r7, #8]
 80068f2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 80068f6:	2300      	movs	r3, #0
 80068f8:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80068fa:	4b24      	ldr	r3, [pc, #144]	; (800698c <HAL_FLASH_Program+0xa4>)
 80068fc:	781b      	ldrb	r3, [r3, #0]
 80068fe:	2b01      	cmp	r3, #1
 8006900:	d101      	bne.n	8006906 <HAL_FLASH_Program+0x1e>
 8006902:	2302      	movs	r3, #2
 8006904:	e03e      	b.n	8006984 <HAL_FLASH_Program+0x9c>
 8006906:	4b21      	ldr	r3, [pc, #132]	; (800698c <HAL_FLASH_Program+0xa4>)
 8006908:	2201      	movs	r2, #1
 800690a:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800690c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006910:	f000 f888 	bl	8006a24 <FLASH_WaitForLastOperation>
 8006914:	4603      	mov	r3, r0
 8006916:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8006918:	7dfb      	ldrb	r3, [r7, #23]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d12e      	bne.n	800697c <HAL_FLASH_Program+0x94>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800691e:	4b1b      	ldr	r3, [pc, #108]	; (800698c <HAL_FLASH_Program+0xa4>)
 8006920:	2200      	movs	r2, #0
 8006922:	605a      	str	r2, [r3, #4]

    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d107      	bne.n	800693a <HAL_FLASH_Program+0x52>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800692a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800692e:	68b8      	ldr	r0, [r7, #8]
 8006930:	f000 f8cc 	bl	8006acc <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8006934:	2301      	movs	r3, #1
 8006936:	613b      	str	r3, [r7, #16]
 8006938:	e010      	b.n	800695c <HAL_FLASH_Program+0x74>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2b01      	cmp	r3, #1
 800693e:	d002      	beq.n	8006946 <HAL_FLASH_Program+0x5e>
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2b02      	cmp	r3, #2
 8006944:	d10a      	bne.n	800695c <HAL_FLASH_Program+0x74>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	4619      	mov	r1, r3
 800694a:	68b8      	ldr	r0, [r7, #8]
 800694c:	f000 f8e4 	bl	8006b18 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2b02      	cmp	r3, #2
 8006954:	d102      	bne.n	800695c <HAL_FLASH_Program+0x74>
      {
        prog_bit = FLASH_CR_FSTPG;
 8006956:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800695a:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800695c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006960:	f000 f860 	bl	8006a24 <FLASH_WaitForLastOperation>
 8006964:	4603      	mov	r3, r0
 8006966:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d006      	beq.n	800697c <HAL_FLASH_Program+0x94>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 800696e:	4b08      	ldr	r3, [pc, #32]	; (8006990 <HAL_FLASH_Program+0xa8>)
 8006970:	695a      	ldr	r2, [r3, #20]
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	43db      	mvns	r3, r3
 8006976:	4906      	ldr	r1, [pc, #24]	; (8006990 <HAL_FLASH_Program+0xa8>)
 8006978:	4013      	ands	r3, r2
 800697a:	614b      	str	r3, [r1, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800697c:	4b03      	ldr	r3, [pc, #12]	; (800698c <HAL_FLASH_Program+0xa4>)
 800697e:	2200      	movs	r2, #0
 8006980:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8006982:	7dfb      	ldrb	r3, [r7, #23]
}
 8006984:	4618      	mov	r0, r3
 8006986:	3718      	adds	r7, #24
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}
 800698c:	20000064 	.word	0x20000064
 8006990:	40022000 	.word	0x40022000

08006994 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8006994:	b480      	push	{r7}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800699a:	2300      	movs	r3, #0
 800699c:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800699e:	4b0b      	ldr	r3, [pc, #44]	; (80069cc <HAL_FLASH_Unlock+0x38>)
 80069a0:	695b      	ldr	r3, [r3, #20]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	da0b      	bge.n	80069be <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80069a6:	4b09      	ldr	r3, [pc, #36]	; (80069cc <HAL_FLASH_Unlock+0x38>)
 80069a8:	4a09      	ldr	r2, [pc, #36]	; (80069d0 <HAL_FLASH_Unlock+0x3c>)
 80069aa:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80069ac:	4b07      	ldr	r3, [pc, #28]	; (80069cc <HAL_FLASH_Unlock+0x38>)
 80069ae:	4a09      	ldr	r2, [pc, #36]	; (80069d4 <HAL_FLASH_Unlock+0x40>)
 80069b0:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80069b2:	4b06      	ldr	r3, [pc, #24]	; (80069cc <HAL_FLASH_Unlock+0x38>)
 80069b4:	695b      	ldr	r3, [r3, #20]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	da01      	bge.n	80069be <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80069be:	79fb      	ldrb	r3, [r7, #7]
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	370c      	adds	r7, #12
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr
 80069cc:	40022000 	.word	0x40022000
 80069d0:	45670123 	.word	0x45670123
 80069d4:	cdef89ab 	.word	0xcdef89ab

080069d8 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80069d8:	b480      	push	{r7}
 80069da:	b083      	sub	sp, #12
 80069dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80069e2:	4b09      	ldr	r3, [pc, #36]	; (8006a08 <HAL_FLASH_Lock+0x30>)
 80069e4:	695b      	ldr	r3, [r3, #20]
 80069e6:	4a08      	ldr	r2, [pc, #32]	; (8006a08 <HAL_FLASH_Lock+0x30>)
 80069e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80069ec:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80069ee:	4b06      	ldr	r3, [pc, #24]	; (8006a08 <HAL_FLASH_Lock+0x30>)
 80069f0:	695b      	ldr	r3, [r3, #20]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	da01      	bge.n	80069fa <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 80069f6:	2300      	movs	r3, #0
 80069f8:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80069fa:	79fb      	ldrb	r3, [r7, #7]
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	370c      	adds	r7, #12
 8006a00:	46bd      	mov	sp, r7
 8006a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a06:	4770      	bx	lr
 8006a08:	40022000 	.word	0x40022000

08006a0c <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_FAST: FLASH Fast programming error
  *            @arg HAL_FLASH_ERROR_RD: FLASH PCROP read error
  *            @arg HAL_FLASH_ERROR_OPTV: FLASH Option validity error
  */
uint32_t HAL_FLASH_GetError(void)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	af00      	add	r7, sp, #0
  return pFlash.ErrorCode;
 8006a10:	4b03      	ldr	r3, [pc, #12]	; (8006a20 <HAL_FLASH_GetError+0x14>)
 8006a12:	685b      	ldr	r3, [r3, #4]
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	46bd      	mov	sp, r7
 8006a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1c:	4770      	bx	lr
 8006a1e:	bf00      	nop
 8006a20:	20000064 	.word	0x20000064

08006a24 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b084      	sub	sp, #16
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8006a2c:	f7fd f964 	bl	8003cf8 <HAL_GetTick>
 8006a30:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8006a32:	e009      	b.n	8006a48 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 8006a34:	f7fd f960 	bl	8003cf8 <HAL_GetTick>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	1ad3      	subs	r3, r2, r3
 8006a3e:	687a      	ldr	r2, [r7, #4]
 8006a40:	429a      	cmp	r2, r3
 8006a42:	d201      	bcs.n	8006a48 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8006a44:	2303      	movs	r3, #3
 8006a46:	e038      	b.n	8006aba <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8006a48:	4b1e      	ldr	r3, [pc, #120]	; (8006ac4 <FLASH_WaitForLastOperation+0xa0>)
 8006a4a:	691b      	ldr	r3, [r3, #16]
 8006a4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a54:	d0ee      	beq.n	8006a34 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8006a56:	4b1b      	ldr	r3, [pc, #108]	; (8006ac4 <FLASH_WaitForLastOperation+0xa0>)
 8006a58:	691a      	ldr	r2, [r3, #16]
 8006a5a:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8006a5e:	4013      	ands	r3, r2
 8006a60:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d01e      	beq.n	8006aa6 <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 8006a68:	4b17      	ldr	r3, [pc, #92]	; (8006ac8 <FLASH_WaitForLastOperation+0xa4>)
 8006a6a:	685a      	ldr	r2, [r3, #4]
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	4a15      	ldr	r2, [pc, #84]	; (8006ac8 <FLASH_WaitForLastOperation+0xa4>)
 8006a72:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d007      	beq.n	8006a8e <FLASH_WaitForLastOperation+0x6a>
 8006a7e:	4b11      	ldr	r3, [pc, #68]	; (8006ac4 <FLASH_WaitForLastOperation+0xa0>)
 8006a80:	699a      	ldr	r2, [r3, #24]
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006a88:	490e      	ldr	r1, [pc, #56]	; (8006ac4 <FLASH_WaitForLastOperation+0xa0>)
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	618b      	str	r3, [r1, #24]
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d004      	beq.n	8006aa2 <FLASH_WaitForLastOperation+0x7e>
 8006a98:	4a0a      	ldr	r2, [pc, #40]	; (8006ac4 <FLASH_WaitForLastOperation+0xa0>)
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8006aa0:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	e009      	b.n	8006aba <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8006aa6:	4b07      	ldr	r3, [pc, #28]	; (8006ac4 <FLASH_WaitForLastOperation+0xa0>)
 8006aa8:	691b      	ldr	r3, [r3, #16]
 8006aaa:	f003 0301 	and.w	r3, r3, #1
 8006aae:	2b01      	cmp	r3, #1
 8006ab0:	d102      	bne.n	8006ab8 <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8006ab2:	4b04      	ldr	r3, [pc, #16]	; (8006ac4 <FLASH_WaitForLastOperation+0xa0>)
 8006ab4:	2201      	movs	r2, #1
 8006ab6:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8006ab8:	2300      	movs	r3, #0
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3710      	adds	r7, #16
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}
 8006ac2:	bf00      	nop
 8006ac4:	40022000 	.word	0x40022000
 8006ac8:	20000064 	.word	0x20000064

08006acc <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b085      	sub	sp, #20
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	60f8      	str	r0, [r7, #12]
 8006ad4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8006ad8:	4b0e      	ldr	r3, [pc, #56]	; (8006b14 <FLASH_Program_DoubleWord+0x48>)
 8006ada:	695b      	ldr	r3, [r3, #20]
 8006adc:	4a0d      	ldr	r2, [pc, #52]	; (8006b14 <FLASH_Program_DoubleWord+0x48>)
 8006ade:	f043 0301 	orr.w	r3, r3, #1
 8006ae2:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	683a      	ldr	r2, [r7, #0]
 8006ae8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8006aea:	f3bf 8f6f 	isb	sy
}
 8006aee:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8006af0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006af4:	f04f 0200 	mov.w	r2, #0
 8006af8:	f04f 0300 	mov.w	r3, #0
 8006afc:	000a      	movs	r2, r1
 8006afe:	2300      	movs	r3, #0
 8006b00:	68f9      	ldr	r1, [r7, #12]
 8006b02:	3104      	adds	r1, #4
 8006b04:	4613      	mov	r3, r2
 8006b06:	600b      	str	r3, [r1, #0]
}
 8006b08:	bf00      	nop
 8006b0a:	3714      	adds	r7, #20
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr
 8006b14:	40022000 	.word	0x40022000

08006b18 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b089      	sub	sp, #36	; 0x24
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
 8006b20:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8006b22:	2340      	movs	r3, #64	; 0x40
 8006b24:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8006b2e:	4b14      	ldr	r3, [pc, #80]	; (8006b80 <FLASH_Program_Fast+0x68>)
 8006b30:	695b      	ldr	r3, [r3, #20]
 8006b32:	4a13      	ldr	r2, [pc, #76]	; (8006b80 <FLASH_Program_Fast+0x68>)
 8006b34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b38:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b3a:	f3ef 8310 	mrs	r3, PRIMASK
 8006b3e:	60fb      	str	r3, [r7, #12]
  return(result);
 8006b40:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8006b42:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8006b44:	b672      	cpsid	i
}
 8006b46:	bf00      	nop
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	681a      	ldr	r2, [r3, #0]
 8006b4c:	69bb      	ldr	r3, [r7, #24]
 8006b4e:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8006b50:	69bb      	ldr	r3, [r7, #24]
 8006b52:	3304      	adds	r3, #4
 8006b54:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	3304      	adds	r3, #4
 8006b5a:	617b      	str	r3, [r7, #20]
    row_index--;
 8006b5c:	7ffb      	ldrb	r3, [r7, #31]
 8006b5e:	3b01      	subs	r3, #1
 8006b60:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8006b62:	7ffb      	ldrb	r3, [r7, #31]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d1ef      	bne.n	8006b48 <FLASH_Program_Fast+0x30>
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	f383 8810 	msr	PRIMASK, r3
}
 8006b72:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8006b74:	bf00      	nop
 8006b76:	3724      	adds	r7, #36	; 0x24
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr
 8006b80:	40022000 	.word	0x40022000

08006b84 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b084      	sub	sp, #16
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006b8e:	4b47      	ldr	r3, [pc, #284]	; (8006cac <HAL_FLASHEx_Erase+0x128>)
 8006b90:	781b      	ldrb	r3, [r3, #0]
 8006b92:	2b01      	cmp	r3, #1
 8006b94:	d101      	bne.n	8006b9a <HAL_FLASHEx_Erase+0x16>
 8006b96:	2302      	movs	r3, #2
 8006b98:	e083      	b.n	8006ca2 <HAL_FLASHEx_Erase+0x11e>
 8006b9a:	4b44      	ldr	r3, [pc, #272]	; (8006cac <HAL_FLASHEx_Erase+0x128>)
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006ba0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006ba4:	f7ff ff3e 	bl	8006a24 <FLASH_WaitForLastOperation>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8006bac:	7bfb      	ldrb	r3, [r7, #15]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d173      	bne.n	8006c9a <HAL_FLASHEx_Erase+0x116>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006bb2:	4b3e      	ldr	r3, [pc, #248]	; (8006cac <HAL_FLASHEx_Erase+0x128>)
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8006bb8:	4b3d      	ldr	r3, [pc, #244]	; (8006cb0 <HAL_FLASHEx_Erase+0x12c>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d013      	beq.n	8006bec <HAL_FLASHEx_Erase+0x68>
    {
      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8006bc4:	4b3a      	ldr	r3, [pc, #232]	; (8006cb0 <HAL_FLASHEx_Erase+0x12c>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d009      	beq.n	8006be4 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8006bd0:	4b37      	ldr	r3, [pc, #220]	; (8006cb0 <HAL_FLASHEx_Erase+0x12c>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a36      	ldr	r2, [pc, #216]	; (8006cb0 <HAL_FLASHEx_Erase+0x12c>)
 8006bd6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006bda:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8006bdc:	4b33      	ldr	r3, [pc, #204]	; (8006cac <HAL_FLASHEx_Erase+0x128>)
 8006bde:	2203      	movs	r2, #3
 8006be0:	771a      	strb	r2, [r3, #28]
 8006be2:	e016      	b.n	8006c12 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8006be4:	4b31      	ldr	r3, [pc, #196]	; (8006cac <HAL_FLASHEx_Erase+0x128>)
 8006be6:	2201      	movs	r2, #1
 8006be8:	771a      	strb	r2, [r3, #28]
 8006bea:	e012      	b.n	8006c12 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8006bec:	4b30      	ldr	r3, [pc, #192]	; (8006cb0 <HAL_FLASHEx_Erase+0x12c>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d009      	beq.n	8006c0c <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8006bf8:	4b2d      	ldr	r3, [pc, #180]	; (8006cb0 <HAL_FLASHEx_Erase+0x12c>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a2c      	ldr	r2, [pc, #176]	; (8006cb0 <HAL_FLASHEx_Erase+0x12c>)
 8006bfe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c02:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8006c04:	4b29      	ldr	r3, [pc, #164]	; (8006cac <HAL_FLASHEx_Erase+0x128>)
 8006c06:	2202      	movs	r2, #2
 8006c08:	771a      	strb	r2, [r3, #28]
 8006c0a:	e002      	b.n	8006c12 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8006c0c:	4b27      	ldr	r3, [pc, #156]	; (8006cac <HAL_FLASHEx_Erase+0x128>)
 8006c0e:	2200      	movs	r2, #0
 8006c10:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d111      	bne.n	8006c3e <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f000 f848 	bl	8006cb4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006c24:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006c28:	f7ff fefc 	bl	8006a24 <FLASH_WaitForLastOperation>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	73fb      	strb	r3, [r7, #15]
#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8006c30:	4b1f      	ldr	r3, [pc, #124]	; (8006cb0 <HAL_FLASHEx_Erase+0x12c>)
 8006c32:	695b      	ldr	r3, [r3, #20]
 8006c34:	4a1e      	ldr	r2, [pc, #120]	; (8006cb0 <HAL_FLASHEx_Erase+0x12c>)
 8006c36:	f023 0304 	bic.w	r3, r3, #4
 8006c3a:	6153      	str	r3, [r2, #20]
 8006c3c:	e02b      	b.n	8006c96 <HAL_FLASHEx_Erase+0x112>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	f04f 32ff 	mov.w	r2, #4294967295
 8006c44:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	60bb      	str	r3, [r7, #8]
 8006c4c:	e01b      	b.n	8006c86 <HAL_FLASHEx_Erase+0x102>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	4619      	mov	r1, r3
 8006c54:	68b8      	ldr	r0, [r7, #8]
 8006c56:	f000 f84b 	bl	8006cf0 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006c5a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006c5e:	f7ff fee1 	bl	8006a24 <FLASH_WaitForLastOperation>
 8006c62:	4603      	mov	r3, r0
 8006c64:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8006c66:	4b12      	ldr	r3, [pc, #72]	; (8006cb0 <HAL_FLASHEx_Erase+0x12c>)
 8006c68:	695b      	ldr	r3, [r3, #20]
 8006c6a:	4a11      	ldr	r2, [pc, #68]	; (8006cb0 <HAL_FLASHEx_Erase+0x12c>)
 8006c6c:	f423 73fd 	bic.w	r3, r3, #506	; 0x1fa
 8006c70:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8006c72:	7bfb      	ldrb	r3, [r7, #15]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d003      	beq.n	8006c80 <HAL_FLASHEx_Erase+0xfc>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	68ba      	ldr	r2, [r7, #8]
 8006c7c:	601a      	str	r2, [r3, #0]
          break;
 8006c7e:	e00a      	b.n	8006c96 <HAL_FLASHEx_Erase+0x112>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	3301      	adds	r3, #1
 8006c84:	60bb      	str	r3, [r7, #8]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	689a      	ldr	r2, [r3, #8]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	68db      	ldr	r3, [r3, #12]
 8006c8e:	4413      	add	r3, r2
 8006c90:	68ba      	ldr	r2, [r7, #8]
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d3db      	bcc.n	8006c4e <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8006c96:	f000 f84f 	bl	8006d38 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006c9a:	4b04      	ldr	r3, [pc, #16]	; (8006cac <HAL_FLASHEx_Erase+0x128>)
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	701a      	strb	r2, [r3, #0]

  return status;
 8006ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3710      	adds	r7, #16
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}
 8006caa:	bf00      	nop
 8006cac:	20000064 	.word	0x20000064
 8006cb0:	40022000 	.word	0x40022000

08006cb4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b083      	sub	sp, #12
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f003 0301 	and.w	r3, r3, #1
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d005      	beq.n	8006cd2 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8006cc6:	4b09      	ldr	r3, [pc, #36]	; (8006cec <FLASH_MassErase+0x38>)
 8006cc8:	695b      	ldr	r3, [r3, #20]
 8006cca:	4a08      	ldr	r2, [pc, #32]	; (8006cec <FLASH_MassErase+0x38>)
 8006ccc:	f043 0304 	orr.w	r3, r3, #4
 8006cd0:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8006cd2:	4b06      	ldr	r3, [pc, #24]	; (8006cec <FLASH_MassErase+0x38>)
 8006cd4:	695b      	ldr	r3, [r3, #20]
 8006cd6:	4a05      	ldr	r2, [pc, #20]	; (8006cec <FLASH_MassErase+0x38>)
 8006cd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006cdc:	6153      	str	r3, [r2, #20]
}
 8006cde:	bf00      	nop
 8006ce0:	370c      	adds	r7, #12
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce8:	4770      	bx	lr
 8006cea:	bf00      	nop
 8006cec:	40022000 	.word	0x40022000

08006cf0 <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b083      	sub	sp, #12
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	6039      	str	r1, [r7, #0]
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8006cfa:	4b0e      	ldr	r3, [pc, #56]	; (8006d34 <FLASH_PageErase+0x44>)
 8006cfc:	695b      	ldr	r3, [r3, #20]
 8006cfe:	f423 72fc 	bic.w	r2, r3, #504	; 0x1f8
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	00db      	lsls	r3, r3, #3
 8006d06:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8006d0a:	490a      	ldr	r1, [pc, #40]	; (8006d34 <FLASH_PageErase+0x44>)
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8006d10:	4b08      	ldr	r3, [pc, #32]	; (8006d34 <FLASH_PageErase+0x44>)
 8006d12:	695b      	ldr	r3, [r3, #20]
 8006d14:	4a07      	ldr	r2, [pc, #28]	; (8006d34 <FLASH_PageErase+0x44>)
 8006d16:	f043 0302 	orr.w	r3, r3, #2
 8006d1a:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8006d1c:	4b05      	ldr	r3, [pc, #20]	; (8006d34 <FLASH_PageErase+0x44>)
 8006d1e:	695b      	ldr	r3, [r3, #20]
 8006d20:	4a04      	ldr	r2, [pc, #16]	; (8006d34 <FLASH_PageErase+0x44>)
 8006d22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d26:	6153      	str	r3, [r2, #20]
}
 8006d28:	bf00      	nop
 8006d2a:	370c      	adds	r7, #12
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr
 8006d34:	40022000 	.word	0x40022000

08006d38 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b083      	sub	sp, #12
 8006d3c:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8006d3e:	4b21      	ldr	r3, [pc, #132]	; (8006dc4 <FLASH_FlushCaches+0x8c>)
 8006d40:	7f1b      	ldrb	r3, [r3, #28]
 8006d42:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8006d44:	79fb      	ldrb	r3, [r7, #7]
 8006d46:	2b01      	cmp	r3, #1
 8006d48:	d002      	beq.n	8006d50 <FLASH_FlushCaches+0x18>
 8006d4a:	79fb      	ldrb	r3, [r7, #7]
 8006d4c:	2b03      	cmp	r3, #3
 8006d4e:	d117      	bne.n	8006d80 <FLASH_FlushCaches+0x48>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8006d50:	4b1d      	ldr	r3, [pc, #116]	; (8006dc8 <FLASH_FlushCaches+0x90>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a1c      	ldr	r2, [pc, #112]	; (8006dc8 <FLASH_FlushCaches+0x90>)
 8006d56:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d5a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8006d5c:	4b1a      	ldr	r3, [pc, #104]	; (8006dc8 <FLASH_FlushCaches+0x90>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a19      	ldr	r2, [pc, #100]	; (8006dc8 <FLASH_FlushCaches+0x90>)
 8006d62:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006d66:	6013      	str	r3, [r2, #0]
 8006d68:	4b17      	ldr	r3, [pc, #92]	; (8006dc8 <FLASH_FlushCaches+0x90>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a16      	ldr	r2, [pc, #88]	; (8006dc8 <FLASH_FlushCaches+0x90>)
 8006d6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d72:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006d74:	4b14      	ldr	r3, [pc, #80]	; (8006dc8 <FLASH_FlushCaches+0x90>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a13      	ldr	r2, [pc, #76]	; (8006dc8 <FLASH_FlushCaches+0x90>)
 8006d7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006d7e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8006d80:	79fb      	ldrb	r3, [r7, #7]
 8006d82:	2b02      	cmp	r3, #2
 8006d84:	d002      	beq.n	8006d8c <FLASH_FlushCaches+0x54>
 8006d86:	79fb      	ldrb	r3, [r7, #7]
 8006d88:	2b03      	cmp	r3, #3
 8006d8a:	d111      	bne.n	8006db0 <FLASH_FlushCaches+0x78>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8006d8c:	4b0e      	ldr	r3, [pc, #56]	; (8006dc8 <FLASH_FlushCaches+0x90>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a0d      	ldr	r2, [pc, #52]	; (8006dc8 <FLASH_FlushCaches+0x90>)
 8006d92:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006d96:	6013      	str	r3, [r2, #0]
 8006d98:	4b0b      	ldr	r3, [pc, #44]	; (8006dc8 <FLASH_FlushCaches+0x90>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a0a      	ldr	r2, [pc, #40]	; (8006dc8 <FLASH_FlushCaches+0x90>)
 8006d9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006da2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8006da4:	4b08      	ldr	r3, [pc, #32]	; (8006dc8 <FLASH_FlushCaches+0x90>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a07      	ldr	r2, [pc, #28]	; (8006dc8 <FLASH_FlushCaches+0x90>)
 8006daa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006dae:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8006db0:	4b04      	ldr	r3, [pc, #16]	; (8006dc4 <FLASH_FlushCaches+0x8c>)
 8006db2:	2200      	movs	r2, #0
 8006db4:	771a      	strb	r2, [r3, #28]
}
 8006db6:	bf00      	nop
 8006db8:	370c      	adds	r7, #12
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc0:	4770      	bx	lr
 8006dc2:	bf00      	nop
 8006dc4:	20000064 	.word	0x20000064
 8006dc8:	40022000 	.word	0x40022000

08006dcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b087      	sub	sp, #28
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006dda:	e15a      	b.n	8007092 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	681a      	ldr	r2, [r3, #0]
 8006de0:	2101      	movs	r1, #1
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	fa01 f303 	lsl.w	r3, r1, r3
 8006de8:	4013      	ands	r3, r2
 8006dea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	f000 814c 	beq.w	800708c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	f003 0303 	and.w	r3, r3, #3
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d005      	beq.n	8006e0c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006e08:	2b02      	cmp	r3, #2
 8006e0a:	d130      	bne.n	8006e6e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	689b      	ldr	r3, [r3, #8]
 8006e10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	005b      	lsls	r3, r3, #1
 8006e16:	2203      	movs	r2, #3
 8006e18:	fa02 f303 	lsl.w	r3, r2, r3
 8006e1c:	43db      	mvns	r3, r3
 8006e1e:	693a      	ldr	r2, [r7, #16]
 8006e20:	4013      	ands	r3, r2
 8006e22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	68da      	ldr	r2, [r3, #12]
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	005b      	lsls	r3, r3, #1
 8006e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8006e30:	693a      	ldr	r2, [r7, #16]
 8006e32:	4313      	orrs	r3, r2
 8006e34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	693a      	ldr	r2, [r7, #16]
 8006e3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006e42:	2201      	movs	r2, #1
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	fa02 f303 	lsl.w	r3, r2, r3
 8006e4a:	43db      	mvns	r3, r3
 8006e4c:	693a      	ldr	r2, [r7, #16]
 8006e4e:	4013      	ands	r3, r2
 8006e50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	091b      	lsrs	r3, r3, #4
 8006e58:	f003 0201 	and.w	r2, r3, #1
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e62:	693a      	ldr	r2, [r7, #16]
 8006e64:	4313      	orrs	r3, r2
 8006e66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	693a      	ldr	r2, [r7, #16]
 8006e6c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	f003 0303 	and.w	r3, r3, #3
 8006e76:	2b03      	cmp	r3, #3
 8006e78:	d017      	beq.n	8006eaa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	68db      	ldr	r3, [r3, #12]
 8006e7e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	005b      	lsls	r3, r3, #1
 8006e84:	2203      	movs	r2, #3
 8006e86:	fa02 f303 	lsl.w	r3, r2, r3
 8006e8a:	43db      	mvns	r3, r3
 8006e8c:	693a      	ldr	r2, [r7, #16]
 8006e8e:	4013      	ands	r3, r2
 8006e90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	689a      	ldr	r2, [r3, #8]
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	005b      	lsls	r3, r3, #1
 8006e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e9e:	693a      	ldr	r2, [r7, #16]
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	693a      	ldr	r2, [r7, #16]
 8006ea8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	f003 0303 	and.w	r3, r3, #3
 8006eb2:	2b02      	cmp	r3, #2
 8006eb4:	d123      	bne.n	8006efe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	08da      	lsrs	r2, r3, #3
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	3208      	adds	r2, #8
 8006ebe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ec2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	f003 0307 	and.w	r3, r3, #7
 8006eca:	009b      	lsls	r3, r3, #2
 8006ecc:	220f      	movs	r2, #15
 8006ece:	fa02 f303 	lsl.w	r3, r2, r3
 8006ed2:	43db      	mvns	r3, r3
 8006ed4:	693a      	ldr	r2, [r7, #16]
 8006ed6:	4013      	ands	r3, r2
 8006ed8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	691a      	ldr	r2, [r3, #16]
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	f003 0307 	and.w	r3, r3, #7
 8006ee4:	009b      	lsls	r3, r3, #2
 8006ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8006eea:	693a      	ldr	r2, [r7, #16]
 8006eec:	4313      	orrs	r3, r2
 8006eee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	08da      	lsrs	r2, r3, #3
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	3208      	adds	r2, #8
 8006ef8:	6939      	ldr	r1, [r7, #16]
 8006efa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	005b      	lsls	r3, r3, #1
 8006f08:	2203      	movs	r2, #3
 8006f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f0e:	43db      	mvns	r3, r3
 8006f10:	693a      	ldr	r2, [r7, #16]
 8006f12:	4013      	ands	r3, r2
 8006f14:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	f003 0203 	and.w	r2, r3, #3
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	005b      	lsls	r3, r3, #1
 8006f22:	fa02 f303 	lsl.w	r3, r2, r3
 8006f26:	693a      	ldr	r2, [r7, #16]
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	693a      	ldr	r2, [r7, #16]
 8006f30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	f000 80a6 	beq.w	800708c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006f40:	4b5b      	ldr	r3, [pc, #364]	; (80070b0 <HAL_GPIO_Init+0x2e4>)
 8006f42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f44:	4a5a      	ldr	r2, [pc, #360]	; (80070b0 <HAL_GPIO_Init+0x2e4>)
 8006f46:	f043 0301 	orr.w	r3, r3, #1
 8006f4a:	6613      	str	r3, [r2, #96]	; 0x60
 8006f4c:	4b58      	ldr	r3, [pc, #352]	; (80070b0 <HAL_GPIO_Init+0x2e4>)
 8006f4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f50:	f003 0301 	and.w	r3, r3, #1
 8006f54:	60bb      	str	r3, [r7, #8]
 8006f56:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006f58:	4a56      	ldr	r2, [pc, #344]	; (80070b4 <HAL_GPIO_Init+0x2e8>)
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	089b      	lsrs	r3, r3, #2
 8006f5e:	3302      	adds	r3, #2
 8006f60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f64:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	f003 0303 	and.w	r3, r3, #3
 8006f6c:	009b      	lsls	r3, r3, #2
 8006f6e:	220f      	movs	r2, #15
 8006f70:	fa02 f303 	lsl.w	r3, r2, r3
 8006f74:	43db      	mvns	r3, r3
 8006f76:	693a      	ldr	r2, [r7, #16]
 8006f78:	4013      	ands	r3, r2
 8006f7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006f82:	d01f      	beq.n	8006fc4 <HAL_GPIO_Init+0x1f8>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	4a4c      	ldr	r2, [pc, #304]	; (80070b8 <HAL_GPIO_Init+0x2ec>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d019      	beq.n	8006fc0 <HAL_GPIO_Init+0x1f4>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	4a4b      	ldr	r2, [pc, #300]	; (80070bc <HAL_GPIO_Init+0x2f0>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d013      	beq.n	8006fbc <HAL_GPIO_Init+0x1f0>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	4a4a      	ldr	r2, [pc, #296]	; (80070c0 <HAL_GPIO_Init+0x2f4>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d00d      	beq.n	8006fb8 <HAL_GPIO_Init+0x1ec>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	4a49      	ldr	r2, [pc, #292]	; (80070c4 <HAL_GPIO_Init+0x2f8>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d007      	beq.n	8006fb4 <HAL_GPIO_Init+0x1e8>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	4a48      	ldr	r2, [pc, #288]	; (80070c8 <HAL_GPIO_Init+0x2fc>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d101      	bne.n	8006fb0 <HAL_GPIO_Init+0x1e4>
 8006fac:	2305      	movs	r3, #5
 8006fae:	e00a      	b.n	8006fc6 <HAL_GPIO_Init+0x1fa>
 8006fb0:	2306      	movs	r3, #6
 8006fb2:	e008      	b.n	8006fc6 <HAL_GPIO_Init+0x1fa>
 8006fb4:	2304      	movs	r3, #4
 8006fb6:	e006      	b.n	8006fc6 <HAL_GPIO_Init+0x1fa>
 8006fb8:	2303      	movs	r3, #3
 8006fba:	e004      	b.n	8006fc6 <HAL_GPIO_Init+0x1fa>
 8006fbc:	2302      	movs	r3, #2
 8006fbe:	e002      	b.n	8006fc6 <HAL_GPIO_Init+0x1fa>
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	e000      	b.n	8006fc6 <HAL_GPIO_Init+0x1fa>
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	697a      	ldr	r2, [r7, #20]
 8006fc8:	f002 0203 	and.w	r2, r2, #3
 8006fcc:	0092      	lsls	r2, r2, #2
 8006fce:	4093      	lsls	r3, r2
 8006fd0:	693a      	ldr	r2, [r7, #16]
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006fd6:	4937      	ldr	r1, [pc, #220]	; (80070b4 <HAL_GPIO_Init+0x2e8>)
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	089b      	lsrs	r3, r3, #2
 8006fdc:	3302      	adds	r3, #2
 8006fde:	693a      	ldr	r2, [r7, #16]
 8006fe0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006fe4:	4b39      	ldr	r3, [pc, #228]	; (80070cc <HAL_GPIO_Init+0x300>)
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	43db      	mvns	r3, r3
 8006fee:	693a      	ldr	r2, [r7, #16]
 8006ff0:	4013      	ands	r3, r2
 8006ff2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d003      	beq.n	8007008 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8007000:	693a      	ldr	r2, [r7, #16]
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	4313      	orrs	r3, r2
 8007006:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007008:	4a30      	ldr	r2, [pc, #192]	; (80070cc <HAL_GPIO_Init+0x300>)
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800700e:	4b2f      	ldr	r3, [pc, #188]	; (80070cc <HAL_GPIO_Init+0x300>)
 8007010:	68db      	ldr	r3, [r3, #12]
 8007012:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	43db      	mvns	r3, r3
 8007018:	693a      	ldr	r2, [r7, #16]
 800701a:	4013      	ands	r3, r2
 800701c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007026:	2b00      	cmp	r3, #0
 8007028:	d003      	beq.n	8007032 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800702a:	693a      	ldr	r2, [r7, #16]
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	4313      	orrs	r3, r2
 8007030:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007032:	4a26      	ldr	r2, [pc, #152]	; (80070cc <HAL_GPIO_Init+0x300>)
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8007038:	4b24      	ldr	r3, [pc, #144]	; (80070cc <HAL_GPIO_Init+0x300>)
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	43db      	mvns	r3, r3
 8007042:	693a      	ldr	r2, [r7, #16]
 8007044:	4013      	ands	r3, r2
 8007046:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007050:	2b00      	cmp	r3, #0
 8007052:	d003      	beq.n	800705c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8007054:	693a      	ldr	r2, [r7, #16]
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	4313      	orrs	r3, r2
 800705a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800705c:	4a1b      	ldr	r2, [pc, #108]	; (80070cc <HAL_GPIO_Init+0x300>)
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8007062:	4b1a      	ldr	r3, [pc, #104]	; (80070cc <HAL_GPIO_Init+0x300>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	43db      	mvns	r3, r3
 800706c:	693a      	ldr	r2, [r7, #16]
 800706e:	4013      	ands	r3, r2
 8007070:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800707a:	2b00      	cmp	r3, #0
 800707c:	d003      	beq.n	8007086 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800707e:	693a      	ldr	r2, [r7, #16]
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	4313      	orrs	r3, r2
 8007084:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007086:	4a11      	ldr	r2, [pc, #68]	; (80070cc <HAL_GPIO_Init+0x300>)
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	3301      	adds	r3, #1
 8007090:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	681a      	ldr	r2, [r3, #0]
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	fa22 f303 	lsr.w	r3, r2, r3
 800709c:	2b00      	cmp	r3, #0
 800709e:	f47f ae9d 	bne.w	8006ddc <HAL_GPIO_Init+0x10>
  }
}
 80070a2:	bf00      	nop
 80070a4:	bf00      	nop
 80070a6:	371c      	adds	r7, #28
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr
 80070b0:	40021000 	.word	0x40021000
 80070b4:	40010000 	.word	0x40010000
 80070b8:	48000400 	.word	0x48000400
 80070bc:	48000800 	.word	0x48000800
 80070c0:	48000c00 	.word	0x48000c00
 80070c4:	48001000 	.word	0x48001000
 80070c8:	48001400 	.word	0x48001400
 80070cc:	40010400 	.word	0x40010400

080070d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b085      	sub	sp, #20
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	460b      	mov	r3, r1
 80070da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	691a      	ldr	r2, [r3, #16]
 80070e0:	887b      	ldrh	r3, [r7, #2]
 80070e2:	4013      	ands	r3, r2
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d002      	beq.n	80070ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80070e8:	2301      	movs	r3, #1
 80070ea:	73fb      	strb	r3, [r7, #15]
 80070ec:	e001      	b.n	80070f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80070ee:	2300      	movs	r3, #0
 80070f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80070f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3714      	adds	r7, #20
 80070f8:	46bd      	mov	sp, r7
 80070fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fe:	4770      	bx	lr

08007100 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007100:	b480      	push	{r7}
 8007102:	b083      	sub	sp, #12
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	460b      	mov	r3, r1
 800710a:	807b      	strh	r3, [r7, #2]
 800710c:	4613      	mov	r3, r2
 800710e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007110:	787b      	ldrb	r3, [r7, #1]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d003      	beq.n	800711e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007116:	887a      	ldrh	r2, [r7, #2]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800711c:	e002      	b.n	8007124 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800711e:	887a      	ldrh	r2, [r7, #2]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007124:	bf00      	nop
 8007126:	370c      	adds	r7, #12
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr

08007130 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b082      	sub	sp, #8
 8007134:	af00      	add	r7, sp, #0
 8007136:	4603      	mov	r3, r0
 8007138:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800713a:	4b08      	ldr	r3, [pc, #32]	; (800715c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800713c:	695a      	ldr	r2, [r3, #20]
 800713e:	88fb      	ldrh	r3, [r7, #6]
 8007140:	4013      	ands	r3, r2
 8007142:	2b00      	cmp	r3, #0
 8007144:	d006      	beq.n	8007154 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007146:	4a05      	ldr	r2, [pc, #20]	; (800715c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007148:	88fb      	ldrh	r3, [r7, #6]
 800714a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800714c:	88fb      	ldrh	r3, [r7, #6]
 800714e:	4618      	mov	r0, r3
 8007150:	f7fa fd82 	bl	8001c58 <HAL_GPIO_EXTI_Callback>
  }
}
 8007154:	bf00      	nop
 8007156:	3708      	adds	r7, #8
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}
 800715c:	40010400 	.word	0x40010400

08007160 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b082      	sub	sp, #8
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d101      	bne.n	8007172 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800716e:	2301      	movs	r3, #1
 8007170:	e081      	b.n	8007276 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007178:	b2db      	uxtb	r3, r3
 800717a:	2b00      	cmp	r3, #0
 800717c:	d106      	bne.n	800718c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2200      	movs	r2, #0
 8007182:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f7fc f9fe 	bl	8003588 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2224      	movs	r2, #36	; 0x24
 8007190:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	681a      	ldr	r2, [r3, #0]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f022 0201 	bic.w	r2, r2, #1
 80071a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	685a      	ldr	r2, [r3, #4]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80071b0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	689a      	ldr	r2, [r3, #8]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80071c0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	68db      	ldr	r3, [r3, #12]
 80071c6:	2b01      	cmp	r3, #1
 80071c8:	d107      	bne.n	80071da <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	689a      	ldr	r2, [r3, #8]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80071d6:	609a      	str	r2, [r3, #8]
 80071d8:	e006      	b.n	80071e8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	689a      	ldr	r2, [r3, #8]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80071e6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	68db      	ldr	r3, [r3, #12]
 80071ec:	2b02      	cmp	r3, #2
 80071ee:	d104      	bne.n	80071fa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80071f8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	687a      	ldr	r2, [r7, #4]
 8007202:	6812      	ldr	r2, [r2, #0]
 8007204:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007208:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800720c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	68da      	ldr	r2, [r3, #12]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800721c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	691a      	ldr	r2, [r3, #16]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	695b      	ldr	r3, [r3, #20]
 8007226:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	699b      	ldr	r3, [r3, #24]
 800722e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	430a      	orrs	r2, r1
 8007236:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	69d9      	ldr	r1, [r3, #28]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6a1a      	ldr	r2, [r3, #32]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	430a      	orrs	r2, r1
 8007246:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	681a      	ldr	r2, [r3, #0]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f042 0201 	orr.w	r2, r2, #1
 8007256:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2200      	movs	r2, #0
 800725c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2220      	movs	r2, #32
 8007262:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2200      	movs	r2, #0
 800726a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2200      	movs	r2, #0
 8007270:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007274:	2300      	movs	r3, #0
}
 8007276:	4618      	mov	r0, r3
 8007278:	3708      	adds	r7, #8
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}

0800727e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800727e:	b480      	push	{r7}
 8007280:	b083      	sub	sp, #12
 8007282:	af00      	add	r7, sp, #0
 8007284:	6078      	str	r0, [r7, #4]
 8007286:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800728e:	b2db      	uxtb	r3, r3
 8007290:	2b20      	cmp	r3, #32
 8007292:	d138      	bne.n	8007306 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800729a:	2b01      	cmp	r3, #1
 800729c:	d101      	bne.n	80072a2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800729e:	2302      	movs	r3, #2
 80072a0:	e032      	b.n	8007308 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2201      	movs	r2, #1
 80072a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2224      	movs	r2, #36	; 0x24
 80072ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	681a      	ldr	r2, [r3, #0]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f022 0201 	bic.w	r2, r2, #1
 80072c0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	681a      	ldr	r2, [r3, #0]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80072d0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	6819      	ldr	r1, [r3, #0]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	683a      	ldr	r2, [r7, #0]
 80072de:	430a      	orrs	r2, r1
 80072e0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	681a      	ldr	r2, [r3, #0]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f042 0201 	orr.w	r2, r2, #1
 80072f0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2220      	movs	r2, #32
 80072f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2200      	movs	r2, #0
 80072fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007302:	2300      	movs	r3, #0
 8007304:	e000      	b.n	8007308 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007306:	2302      	movs	r3, #2
  }
}
 8007308:	4618      	mov	r0, r3
 800730a:	370c      	adds	r7, #12
 800730c:	46bd      	mov	sp, r7
 800730e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007312:	4770      	bx	lr

08007314 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007314:	b480      	push	{r7}
 8007316:	b085      	sub	sp, #20
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007324:	b2db      	uxtb	r3, r3
 8007326:	2b20      	cmp	r3, #32
 8007328:	d139      	bne.n	800739e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007330:	2b01      	cmp	r3, #1
 8007332:	d101      	bne.n	8007338 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007334:	2302      	movs	r3, #2
 8007336:	e033      	b.n	80073a0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2201      	movs	r2, #1
 800733c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2224      	movs	r2, #36	; 0x24
 8007344:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	681a      	ldr	r2, [r3, #0]
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f022 0201 	bic.w	r2, r2, #1
 8007356:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007366:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	021b      	lsls	r3, r3, #8
 800736c:	68fa      	ldr	r2, [r7, #12]
 800736e:	4313      	orrs	r3, r2
 8007370:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	68fa      	ldr	r2, [r7, #12]
 8007378:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	681a      	ldr	r2, [r3, #0]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f042 0201 	orr.w	r2, r2, #1
 8007388:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2220      	movs	r2, #32
 800738e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2200      	movs	r2, #0
 8007396:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800739a:	2300      	movs	r3, #0
 800739c:	e000      	b.n	80073a0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800739e:	2302      	movs	r3, #2
  }
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3714      	adds	r7, #20
 80073a4:	46bd      	mov	sp, r7
 80073a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073aa:	4770      	bx	lr

080073ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b085      	sub	sp, #20
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d141      	bne.n	800743e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80073ba:	4b4b      	ldr	r3, [pc, #300]	; (80074e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80073c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073c6:	d131      	bne.n	800742c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80073c8:	4b47      	ldr	r3, [pc, #284]	; (80074e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80073ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80073ce:	4a46      	ldr	r2, [pc, #280]	; (80074e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80073d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80073d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80073d8:	4b43      	ldr	r3, [pc, #268]	; (80074e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80073e0:	4a41      	ldr	r2, [pc, #260]	; (80074e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80073e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80073e6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80073e8:	4b40      	ldr	r3, [pc, #256]	; (80074ec <HAL_PWREx_ControlVoltageScaling+0x140>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	2232      	movs	r2, #50	; 0x32
 80073ee:	fb02 f303 	mul.w	r3, r2, r3
 80073f2:	4a3f      	ldr	r2, [pc, #252]	; (80074f0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80073f4:	fba2 2303 	umull	r2, r3, r2, r3
 80073f8:	0c9b      	lsrs	r3, r3, #18
 80073fa:	3301      	adds	r3, #1
 80073fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80073fe:	e002      	b.n	8007406 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	3b01      	subs	r3, #1
 8007404:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007406:	4b38      	ldr	r3, [pc, #224]	; (80074e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007408:	695b      	ldr	r3, [r3, #20]
 800740a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800740e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007412:	d102      	bne.n	800741a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d1f2      	bne.n	8007400 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800741a:	4b33      	ldr	r3, [pc, #204]	; (80074e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800741c:	695b      	ldr	r3, [r3, #20]
 800741e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007422:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007426:	d158      	bne.n	80074da <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007428:	2303      	movs	r3, #3
 800742a:	e057      	b.n	80074dc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800742c:	4b2e      	ldr	r3, [pc, #184]	; (80074e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800742e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007432:	4a2d      	ldr	r2, [pc, #180]	; (80074e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007434:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007438:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800743c:	e04d      	b.n	80074da <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007444:	d141      	bne.n	80074ca <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007446:	4b28      	ldr	r3, [pc, #160]	; (80074e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800744e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007452:	d131      	bne.n	80074b8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007454:	4b24      	ldr	r3, [pc, #144]	; (80074e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007456:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800745a:	4a23      	ldr	r2, [pc, #140]	; (80074e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800745c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007460:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007464:	4b20      	ldr	r3, [pc, #128]	; (80074e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800746c:	4a1e      	ldr	r2, [pc, #120]	; (80074e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800746e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007472:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007474:	4b1d      	ldr	r3, [pc, #116]	; (80074ec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	2232      	movs	r2, #50	; 0x32
 800747a:	fb02 f303 	mul.w	r3, r2, r3
 800747e:	4a1c      	ldr	r2, [pc, #112]	; (80074f0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007480:	fba2 2303 	umull	r2, r3, r2, r3
 8007484:	0c9b      	lsrs	r3, r3, #18
 8007486:	3301      	adds	r3, #1
 8007488:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800748a:	e002      	b.n	8007492 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	3b01      	subs	r3, #1
 8007490:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007492:	4b15      	ldr	r3, [pc, #84]	; (80074e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007494:	695b      	ldr	r3, [r3, #20]
 8007496:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800749a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800749e:	d102      	bne.n	80074a6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d1f2      	bne.n	800748c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80074a6:	4b10      	ldr	r3, [pc, #64]	; (80074e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80074a8:	695b      	ldr	r3, [r3, #20]
 80074aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074b2:	d112      	bne.n	80074da <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80074b4:	2303      	movs	r3, #3
 80074b6:	e011      	b.n	80074dc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80074b8:	4b0b      	ldr	r3, [pc, #44]	; (80074e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80074ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80074be:	4a0a      	ldr	r2, [pc, #40]	; (80074e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80074c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80074c8:	e007      	b.n	80074da <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80074ca:	4b07      	ldr	r3, [pc, #28]	; (80074e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80074d2:	4a05      	ldr	r2, [pc, #20]	; (80074e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80074d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80074d8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80074da:	2300      	movs	r3, #0
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3714      	adds	r7, #20
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr
 80074e8:	40007000 	.word	0x40007000
 80074ec:	20000058 	.word	0x20000058
 80074f0:	431bde83 	.word	0x431bde83

080074f4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80074f4:	b480      	push	{r7}
 80074f6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80074f8:	4b05      	ldr	r3, [pc, #20]	; (8007510 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80074fa:	689b      	ldr	r3, [r3, #8]
 80074fc:	4a04      	ldr	r2, [pc, #16]	; (8007510 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80074fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007502:	6093      	str	r3, [r2, #8]
}
 8007504:	bf00      	nop
 8007506:	46bd      	mov	sp, r7
 8007508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750c:	4770      	bx	lr
 800750e:	bf00      	nop
 8007510:	40007000 	.word	0x40007000

08007514 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b088      	sub	sp, #32
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d101      	bne.n	8007526 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007522:	2301      	movs	r3, #1
 8007524:	e306      	b.n	8007b34 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f003 0301 	and.w	r3, r3, #1
 800752e:	2b00      	cmp	r3, #0
 8007530:	d075      	beq.n	800761e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007532:	4b97      	ldr	r3, [pc, #604]	; (8007790 <HAL_RCC_OscConfig+0x27c>)
 8007534:	689b      	ldr	r3, [r3, #8]
 8007536:	f003 030c 	and.w	r3, r3, #12
 800753a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800753c:	4b94      	ldr	r3, [pc, #592]	; (8007790 <HAL_RCC_OscConfig+0x27c>)
 800753e:	68db      	ldr	r3, [r3, #12]
 8007540:	f003 0303 	and.w	r3, r3, #3
 8007544:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007546:	69bb      	ldr	r3, [r7, #24]
 8007548:	2b0c      	cmp	r3, #12
 800754a:	d102      	bne.n	8007552 <HAL_RCC_OscConfig+0x3e>
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	2b03      	cmp	r3, #3
 8007550:	d002      	beq.n	8007558 <HAL_RCC_OscConfig+0x44>
 8007552:	69bb      	ldr	r3, [r7, #24]
 8007554:	2b08      	cmp	r3, #8
 8007556:	d10b      	bne.n	8007570 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007558:	4b8d      	ldr	r3, [pc, #564]	; (8007790 <HAL_RCC_OscConfig+0x27c>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007560:	2b00      	cmp	r3, #0
 8007562:	d05b      	beq.n	800761c <HAL_RCC_OscConfig+0x108>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d157      	bne.n	800761c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800756c:	2301      	movs	r3, #1
 800756e:	e2e1      	b.n	8007b34 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007578:	d106      	bne.n	8007588 <HAL_RCC_OscConfig+0x74>
 800757a:	4b85      	ldr	r3, [pc, #532]	; (8007790 <HAL_RCC_OscConfig+0x27c>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a84      	ldr	r2, [pc, #528]	; (8007790 <HAL_RCC_OscConfig+0x27c>)
 8007580:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007584:	6013      	str	r3, [r2, #0]
 8007586:	e01d      	b.n	80075c4 <HAL_RCC_OscConfig+0xb0>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	685b      	ldr	r3, [r3, #4]
 800758c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007590:	d10c      	bne.n	80075ac <HAL_RCC_OscConfig+0x98>
 8007592:	4b7f      	ldr	r3, [pc, #508]	; (8007790 <HAL_RCC_OscConfig+0x27c>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4a7e      	ldr	r2, [pc, #504]	; (8007790 <HAL_RCC_OscConfig+0x27c>)
 8007598:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800759c:	6013      	str	r3, [r2, #0]
 800759e:	4b7c      	ldr	r3, [pc, #496]	; (8007790 <HAL_RCC_OscConfig+0x27c>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a7b      	ldr	r2, [pc, #492]	; (8007790 <HAL_RCC_OscConfig+0x27c>)
 80075a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075a8:	6013      	str	r3, [r2, #0]
 80075aa:	e00b      	b.n	80075c4 <HAL_RCC_OscConfig+0xb0>
 80075ac:	4b78      	ldr	r3, [pc, #480]	; (8007790 <HAL_RCC_OscConfig+0x27c>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a77      	ldr	r2, [pc, #476]	; (8007790 <HAL_RCC_OscConfig+0x27c>)
 80075b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075b6:	6013      	str	r3, [r2, #0]
 80075b8:	4b75      	ldr	r3, [pc, #468]	; (8007790 <HAL_RCC_OscConfig+0x27c>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a74      	ldr	r2, [pc, #464]	; (8007790 <HAL_RCC_OscConfig+0x27c>)
 80075be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80075c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	685b      	ldr	r3, [r3, #4]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d013      	beq.n	80075f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075cc:	f7fc fb94 	bl	8003cf8 <HAL_GetTick>
 80075d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80075d2:	e008      	b.n	80075e6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80075d4:	f7fc fb90 	bl	8003cf8 <HAL_GetTick>
 80075d8:	4602      	mov	r2, r0
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	1ad3      	subs	r3, r2, r3
 80075de:	2b64      	cmp	r3, #100	; 0x64
 80075e0:	d901      	bls.n	80075e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80075e2:	2303      	movs	r3, #3
 80075e4:	e2a6      	b.n	8007b34 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80075e6:	4b6a      	ldr	r3, [pc, #424]	; (8007790 <HAL_RCC_OscConfig+0x27c>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d0f0      	beq.n	80075d4 <HAL_RCC_OscConfig+0xc0>
 80075f2:	e014      	b.n	800761e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075f4:	f7fc fb80 	bl	8003cf8 <HAL_GetTick>
 80075f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80075fa:	e008      	b.n	800760e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80075fc:	f7fc fb7c 	bl	8003cf8 <HAL_GetTick>
 8007600:	4602      	mov	r2, r0
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	1ad3      	subs	r3, r2, r3
 8007606:	2b64      	cmp	r3, #100	; 0x64
 8007608:	d901      	bls.n	800760e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800760a:	2303      	movs	r3, #3
 800760c:	e292      	b.n	8007b34 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800760e:	4b60      	ldr	r3, [pc, #384]	; (8007790 <HAL_RCC_OscConfig+0x27c>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007616:	2b00      	cmp	r3, #0
 8007618:	d1f0      	bne.n	80075fc <HAL_RCC_OscConfig+0xe8>
 800761a:	e000      	b.n	800761e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800761c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f003 0302 	and.w	r3, r3, #2
 8007626:	2b00      	cmp	r3, #0
 8007628:	d075      	beq.n	8007716 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800762a:	4b59      	ldr	r3, [pc, #356]	; (8007790 <HAL_RCC_OscConfig+0x27c>)
 800762c:	689b      	ldr	r3, [r3, #8]
 800762e:	f003 030c 	and.w	r3, r3, #12
 8007632:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007634:	4b56      	ldr	r3, [pc, #344]	; (8007790 <HAL_RCC_OscConfig+0x27c>)
 8007636:	68db      	ldr	r3, [r3, #12]
 8007638:	f003 0303 	and.w	r3, r3, #3
 800763c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800763e:	69bb      	ldr	r3, [r7, #24]
 8007640:	2b0c      	cmp	r3, #12
 8007642:	d102      	bne.n	800764a <HAL_RCC_OscConfig+0x136>
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	2b02      	cmp	r3, #2
 8007648:	d002      	beq.n	8007650 <HAL_RCC_OscConfig+0x13c>
 800764a:	69bb      	ldr	r3, [r7, #24]
 800764c:	2b04      	cmp	r3, #4
 800764e:	d11f      	bne.n	8007690 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007650:	4b4f      	ldr	r3, [pc, #316]	; (8007790 <HAL_RCC_OscConfig+0x27c>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007658:	2b00      	cmp	r3, #0
 800765a:	d005      	beq.n	8007668 <HAL_RCC_OscConfig+0x154>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	68db      	ldr	r3, [r3, #12]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d101      	bne.n	8007668 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8007664:	2301      	movs	r3, #1
 8007666:	e265      	b.n	8007b34 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007668:	4b49      	ldr	r3, [pc, #292]	; (8007790 <HAL_RCC_OscConfig+0x27c>)
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	691b      	ldr	r3, [r3, #16]
 8007674:	061b      	lsls	r3, r3, #24
 8007676:	4946      	ldr	r1, [pc, #280]	; (8007790 <HAL_RCC_OscConfig+0x27c>)
 8007678:	4313      	orrs	r3, r2
 800767a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800767c:	4b45      	ldr	r3, [pc, #276]	; (8007794 <HAL_RCC_OscConfig+0x280>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4618      	mov	r0, r3
 8007682:	f7fc faed 	bl	8003c60 <HAL_InitTick>
 8007686:	4603      	mov	r3, r0
 8007688:	2b00      	cmp	r3, #0
 800768a:	d043      	beq.n	8007714 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800768c:	2301      	movs	r3, #1
 800768e:	e251      	b.n	8007b34 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	68db      	ldr	r3, [r3, #12]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d023      	beq.n	80076e0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007698:	4b3d      	ldr	r3, [pc, #244]	; (8007790 <HAL_RCC_OscConfig+0x27c>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a3c      	ldr	r2, [pc, #240]	; (8007790 <HAL_RCC_OscConfig+0x27c>)
 800769e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076a4:	f7fc fb28 	bl	8003cf8 <HAL_GetTick>
 80076a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80076aa:	e008      	b.n	80076be <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80076ac:	f7fc fb24 	bl	8003cf8 <HAL_GetTick>
 80076b0:	4602      	mov	r2, r0
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	1ad3      	subs	r3, r2, r3
 80076b6:	2b02      	cmp	r3, #2
 80076b8:	d901      	bls.n	80076be <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80076ba:	2303      	movs	r3, #3
 80076bc:	e23a      	b.n	8007b34 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80076be:	4b34      	ldr	r3, [pc, #208]	; (8007790 <HAL_RCC_OscConfig+0x27c>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d0f0      	beq.n	80076ac <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076ca:	4b31      	ldr	r3, [pc, #196]	; (8007790 <HAL_RCC_OscConfig+0x27c>)
 80076cc:	685b      	ldr	r3, [r3, #4]
 80076ce:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	691b      	ldr	r3, [r3, #16]
 80076d6:	061b      	lsls	r3, r3, #24
 80076d8:	492d      	ldr	r1, [pc, #180]	; (8007790 <HAL_RCC_OscConfig+0x27c>)
 80076da:	4313      	orrs	r3, r2
 80076dc:	604b      	str	r3, [r1, #4]
 80076de:	e01a      	b.n	8007716 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80076e0:	4b2b      	ldr	r3, [pc, #172]	; (8007790 <HAL_RCC_OscConfig+0x27c>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a2a      	ldr	r2, [pc, #168]	; (8007790 <HAL_RCC_OscConfig+0x27c>)
 80076e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076ec:	f7fc fb04 	bl	8003cf8 <HAL_GetTick>
 80076f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80076f2:	e008      	b.n	8007706 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80076f4:	f7fc fb00 	bl	8003cf8 <HAL_GetTick>
 80076f8:	4602      	mov	r2, r0
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	1ad3      	subs	r3, r2, r3
 80076fe:	2b02      	cmp	r3, #2
 8007700:	d901      	bls.n	8007706 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8007702:	2303      	movs	r3, #3
 8007704:	e216      	b.n	8007b34 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007706:	4b22      	ldr	r3, [pc, #136]	; (8007790 <HAL_RCC_OscConfig+0x27c>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800770e:	2b00      	cmp	r3, #0
 8007710:	d1f0      	bne.n	80076f4 <HAL_RCC_OscConfig+0x1e0>
 8007712:	e000      	b.n	8007716 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007714:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f003 0308 	and.w	r3, r3, #8
 800771e:	2b00      	cmp	r3, #0
 8007720:	d041      	beq.n	80077a6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	695b      	ldr	r3, [r3, #20]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d01c      	beq.n	8007764 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800772a:	4b19      	ldr	r3, [pc, #100]	; (8007790 <HAL_RCC_OscConfig+0x27c>)
 800772c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007730:	4a17      	ldr	r2, [pc, #92]	; (8007790 <HAL_RCC_OscConfig+0x27c>)
 8007732:	f043 0301 	orr.w	r3, r3, #1
 8007736:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800773a:	f7fc fadd 	bl	8003cf8 <HAL_GetTick>
 800773e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007740:	e008      	b.n	8007754 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007742:	f7fc fad9 	bl	8003cf8 <HAL_GetTick>
 8007746:	4602      	mov	r2, r0
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	1ad3      	subs	r3, r2, r3
 800774c:	2b02      	cmp	r3, #2
 800774e:	d901      	bls.n	8007754 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007750:	2303      	movs	r3, #3
 8007752:	e1ef      	b.n	8007b34 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007754:	4b0e      	ldr	r3, [pc, #56]	; (8007790 <HAL_RCC_OscConfig+0x27c>)
 8007756:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800775a:	f003 0302 	and.w	r3, r3, #2
 800775e:	2b00      	cmp	r3, #0
 8007760:	d0ef      	beq.n	8007742 <HAL_RCC_OscConfig+0x22e>
 8007762:	e020      	b.n	80077a6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007764:	4b0a      	ldr	r3, [pc, #40]	; (8007790 <HAL_RCC_OscConfig+0x27c>)
 8007766:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800776a:	4a09      	ldr	r2, [pc, #36]	; (8007790 <HAL_RCC_OscConfig+0x27c>)
 800776c:	f023 0301 	bic.w	r3, r3, #1
 8007770:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007774:	f7fc fac0 	bl	8003cf8 <HAL_GetTick>
 8007778:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800777a:	e00d      	b.n	8007798 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800777c:	f7fc fabc 	bl	8003cf8 <HAL_GetTick>
 8007780:	4602      	mov	r2, r0
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	1ad3      	subs	r3, r2, r3
 8007786:	2b02      	cmp	r3, #2
 8007788:	d906      	bls.n	8007798 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800778a:	2303      	movs	r3, #3
 800778c:	e1d2      	b.n	8007b34 <HAL_RCC_OscConfig+0x620>
 800778e:	bf00      	nop
 8007790:	40021000 	.word	0x40021000
 8007794:	2000005c 	.word	0x2000005c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007798:	4b8c      	ldr	r3, [pc, #560]	; (80079cc <HAL_RCC_OscConfig+0x4b8>)
 800779a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800779e:	f003 0302 	and.w	r3, r3, #2
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d1ea      	bne.n	800777c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f003 0304 	and.w	r3, r3, #4
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	f000 80a6 	beq.w	8007900 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80077b4:	2300      	movs	r3, #0
 80077b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80077b8:	4b84      	ldr	r3, [pc, #528]	; (80079cc <HAL_RCC_OscConfig+0x4b8>)
 80077ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d101      	bne.n	80077c8 <HAL_RCC_OscConfig+0x2b4>
 80077c4:	2301      	movs	r3, #1
 80077c6:	e000      	b.n	80077ca <HAL_RCC_OscConfig+0x2b6>
 80077c8:	2300      	movs	r3, #0
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d00d      	beq.n	80077ea <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80077ce:	4b7f      	ldr	r3, [pc, #508]	; (80079cc <HAL_RCC_OscConfig+0x4b8>)
 80077d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077d2:	4a7e      	ldr	r2, [pc, #504]	; (80079cc <HAL_RCC_OscConfig+0x4b8>)
 80077d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077d8:	6593      	str	r3, [r2, #88]	; 0x58
 80077da:	4b7c      	ldr	r3, [pc, #496]	; (80079cc <HAL_RCC_OscConfig+0x4b8>)
 80077dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077e2:	60fb      	str	r3, [r7, #12]
 80077e4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80077e6:	2301      	movs	r3, #1
 80077e8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80077ea:	4b79      	ldr	r3, [pc, #484]	; (80079d0 <HAL_RCC_OscConfig+0x4bc>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d118      	bne.n	8007828 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80077f6:	4b76      	ldr	r3, [pc, #472]	; (80079d0 <HAL_RCC_OscConfig+0x4bc>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a75      	ldr	r2, [pc, #468]	; (80079d0 <HAL_RCC_OscConfig+0x4bc>)
 80077fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007800:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007802:	f7fc fa79 	bl	8003cf8 <HAL_GetTick>
 8007806:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007808:	e008      	b.n	800781c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800780a:	f7fc fa75 	bl	8003cf8 <HAL_GetTick>
 800780e:	4602      	mov	r2, r0
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	1ad3      	subs	r3, r2, r3
 8007814:	2b02      	cmp	r3, #2
 8007816:	d901      	bls.n	800781c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007818:	2303      	movs	r3, #3
 800781a:	e18b      	b.n	8007b34 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800781c:	4b6c      	ldr	r3, [pc, #432]	; (80079d0 <HAL_RCC_OscConfig+0x4bc>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007824:	2b00      	cmp	r3, #0
 8007826:	d0f0      	beq.n	800780a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	689b      	ldr	r3, [r3, #8]
 800782c:	2b01      	cmp	r3, #1
 800782e:	d108      	bne.n	8007842 <HAL_RCC_OscConfig+0x32e>
 8007830:	4b66      	ldr	r3, [pc, #408]	; (80079cc <HAL_RCC_OscConfig+0x4b8>)
 8007832:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007836:	4a65      	ldr	r2, [pc, #404]	; (80079cc <HAL_RCC_OscConfig+0x4b8>)
 8007838:	f043 0301 	orr.w	r3, r3, #1
 800783c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007840:	e024      	b.n	800788c <HAL_RCC_OscConfig+0x378>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	689b      	ldr	r3, [r3, #8]
 8007846:	2b05      	cmp	r3, #5
 8007848:	d110      	bne.n	800786c <HAL_RCC_OscConfig+0x358>
 800784a:	4b60      	ldr	r3, [pc, #384]	; (80079cc <HAL_RCC_OscConfig+0x4b8>)
 800784c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007850:	4a5e      	ldr	r2, [pc, #376]	; (80079cc <HAL_RCC_OscConfig+0x4b8>)
 8007852:	f043 0304 	orr.w	r3, r3, #4
 8007856:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800785a:	4b5c      	ldr	r3, [pc, #368]	; (80079cc <HAL_RCC_OscConfig+0x4b8>)
 800785c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007860:	4a5a      	ldr	r2, [pc, #360]	; (80079cc <HAL_RCC_OscConfig+0x4b8>)
 8007862:	f043 0301 	orr.w	r3, r3, #1
 8007866:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800786a:	e00f      	b.n	800788c <HAL_RCC_OscConfig+0x378>
 800786c:	4b57      	ldr	r3, [pc, #348]	; (80079cc <HAL_RCC_OscConfig+0x4b8>)
 800786e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007872:	4a56      	ldr	r2, [pc, #344]	; (80079cc <HAL_RCC_OscConfig+0x4b8>)
 8007874:	f023 0301 	bic.w	r3, r3, #1
 8007878:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800787c:	4b53      	ldr	r3, [pc, #332]	; (80079cc <HAL_RCC_OscConfig+0x4b8>)
 800787e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007882:	4a52      	ldr	r2, [pc, #328]	; (80079cc <HAL_RCC_OscConfig+0x4b8>)
 8007884:	f023 0304 	bic.w	r3, r3, #4
 8007888:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	689b      	ldr	r3, [r3, #8]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d016      	beq.n	80078c2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007894:	f7fc fa30 	bl	8003cf8 <HAL_GetTick>
 8007898:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800789a:	e00a      	b.n	80078b2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800789c:	f7fc fa2c 	bl	8003cf8 <HAL_GetTick>
 80078a0:	4602      	mov	r2, r0
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	1ad3      	subs	r3, r2, r3
 80078a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d901      	bls.n	80078b2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80078ae:	2303      	movs	r3, #3
 80078b0:	e140      	b.n	8007b34 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80078b2:	4b46      	ldr	r3, [pc, #280]	; (80079cc <HAL_RCC_OscConfig+0x4b8>)
 80078b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078b8:	f003 0302 	and.w	r3, r3, #2
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d0ed      	beq.n	800789c <HAL_RCC_OscConfig+0x388>
 80078c0:	e015      	b.n	80078ee <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078c2:	f7fc fa19 	bl	8003cf8 <HAL_GetTick>
 80078c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80078c8:	e00a      	b.n	80078e0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078ca:	f7fc fa15 	bl	8003cf8 <HAL_GetTick>
 80078ce:	4602      	mov	r2, r0
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	1ad3      	subs	r3, r2, r3
 80078d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80078d8:	4293      	cmp	r3, r2
 80078da:	d901      	bls.n	80078e0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80078dc:	2303      	movs	r3, #3
 80078de:	e129      	b.n	8007b34 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80078e0:	4b3a      	ldr	r3, [pc, #232]	; (80079cc <HAL_RCC_OscConfig+0x4b8>)
 80078e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078e6:	f003 0302 	and.w	r3, r3, #2
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d1ed      	bne.n	80078ca <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80078ee:	7ffb      	ldrb	r3, [r7, #31]
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	d105      	bne.n	8007900 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80078f4:	4b35      	ldr	r3, [pc, #212]	; (80079cc <HAL_RCC_OscConfig+0x4b8>)
 80078f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078f8:	4a34      	ldr	r2, [pc, #208]	; (80079cc <HAL_RCC_OscConfig+0x4b8>)
 80078fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80078fe:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f003 0320 	and.w	r3, r3, #32
 8007908:	2b00      	cmp	r3, #0
 800790a:	d03c      	beq.n	8007986 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	699b      	ldr	r3, [r3, #24]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d01c      	beq.n	800794e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007914:	4b2d      	ldr	r3, [pc, #180]	; (80079cc <HAL_RCC_OscConfig+0x4b8>)
 8007916:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800791a:	4a2c      	ldr	r2, [pc, #176]	; (80079cc <HAL_RCC_OscConfig+0x4b8>)
 800791c:	f043 0301 	orr.w	r3, r3, #1
 8007920:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007924:	f7fc f9e8 	bl	8003cf8 <HAL_GetTick>
 8007928:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800792a:	e008      	b.n	800793e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800792c:	f7fc f9e4 	bl	8003cf8 <HAL_GetTick>
 8007930:	4602      	mov	r2, r0
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	1ad3      	subs	r3, r2, r3
 8007936:	2b02      	cmp	r3, #2
 8007938:	d901      	bls.n	800793e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800793a:	2303      	movs	r3, #3
 800793c:	e0fa      	b.n	8007b34 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800793e:	4b23      	ldr	r3, [pc, #140]	; (80079cc <HAL_RCC_OscConfig+0x4b8>)
 8007940:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007944:	f003 0302 	and.w	r3, r3, #2
 8007948:	2b00      	cmp	r3, #0
 800794a:	d0ef      	beq.n	800792c <HAL_RCC_OscConfig+0x418>
 800794c:	e01b      	b.n	8007986 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800794e:	4b1f      	ldr	r3, [pc, #124]	; (80079cc <HAL_RCC_OscConfig+0x4b8>)
 8007950:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007954:	4a1d      	ldr	r2, [pc, #116]	; (80079cc <HAL_RCC_OscConfig+0x4b8>)
 8007956:	f023 0301 	bic.w	r3, r3, #1
 800795a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800795e:	f7fc f9cb 	bl	8003cf8 <HAL_GetTick>
 8007962:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007964:	e008      	b.n	8007978 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007966:	f7fc f9c7 	bl	8003cf8 <HAL_GetTick>
 800796a:	4602      	mov	r2, r0
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	1ad3      	subs	r3, r2, r3
 8007970:	2b02      	cmp	r3, #2
 8007972:	d901      	bls.n	8007978 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8007974:	2303      	movs	r3, #3
 8007976:	e0dd      	b.n	8007b34 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007978:	4b14      	ldr	r3, [pc, #80]	; (80079cc <HAL_RCC_OscConfig+0x4b8>)
 800797a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800797e:	f003 0302 	and.w	r3, r3, #2
 8007982:	2b00      	cmp	r3, #0
 8007984:	d1ef      	bne.n	8007966 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	69db      	ldr	r3, [r3, #28]
 800798a:	2b00      	cmp	r3, #0
 800798c:	f000 80d1 	beq.w	8007b32 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007990:	4b0e      	ldr	r3, [pc, #56]	; (80079cc <HAL_RCC_OscConfig+0x4b8>)
 8007992:	689b      	ldr	r3, [r3, #8]
 8007994:	f003 030c 	and.w	r3, r3, #12
 8007998:	2b0c      	cmp	r3, #12
 800799a:	f000 808b 	beq.w	8007ab4 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	69db      	ldr	r3, [r3, #28]
 80079a2:	2b02      	cmp	r3, #2
 80079a4:	d15e      	bne.n	8007a64 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80079a6:	4b09      	ldr	r3, [pc, #36]	; (80079cc <HAL_RCC_OscConfig+0x4b8>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4a08      	ldr	r2, [pc, #32]	; (80079cc <HAL_RCC_OscConfig+0x4b8>)
 80079ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80079b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079b2:	f7fc f9a1 	bl	8003cf8 <HAL_GetTick>
 80079b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80079b8:	e00c      	b.n	80079d4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079ba:	f7fc f99d 	bl	8003cf8 <HAL_GetTick>
 80079be:	4602      	mov	r2, r0
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	1ad3      	subs	r3, r2, r3
 80079c4:	2b02      	cmp	r3, #2
 80079c6:	d905      	bls.n	80079d4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80079c8:	2303      	movs	r3, #3
 80079ca:	e0b3      	b.n	8007b34 <HAL_RCC_OscConfig+0x620>
 80079cc:	40021000 	.word	0x40021000
 80079d0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80079d4:	4b59      	ldr	r3, [pc, #356]	; (8007b3c <HAL_RCC_OscConfig+0x628>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d1ec      	bne.n	80079ba <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80079e0:	4b56      	ldr	r3, [pc, #344]	; (8007b3c <HAL_RCC_OscConfig+0x628>)
 80079e2:	68da      	ldr	r2, [r3, #12]
 80079e4:	4b56      	ldr	r3, [pc, #344]	; (8007b40 <HAL_RCC_OscConfig+0x62c>)
 80079e6:	4013      	ands	r3, r2
 80079e8:	687a      	ldr	r2, [r7, #4]
 80079ea:	6a11      	ldr	r1, [r2, #32]
 80079ec:	687a      	ldr	r2, [r7, #4]
 80079ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80079f0:	3a01      	subs	r2, #1
 80079f2:	0112      	lsls	r2, r2, #4
 80079f4:	4311      	orrs	r1, r2
 80079f6:	687a      	ldr	r2, [r7, #4]
 80079f8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80079fa:	0212      	lsls	r2, r2, #8
 80079fc:	4311      	orrs	r1, r2
 80079fe:	687a      	ldr	r2, [r7, #4]
 8007a00:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007a02:	0852      	lsrs	r2, r2, #1
 8007a04:	3a01      	subs	r2, #1
 8007a06:	0552      	lsls	r2, r2, #21
 8007a08:	4311      	orrs	r1, r2
 8007a0a:	687a      	ldr	r2, [r7, #4]
 8007a0c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007a0e:	0852      	lsrs	r2, r2, #1
 8007a10:	3a01      	subs	r2, #1
 8007a12:	0652      	lsls	r2, r2, #25
 8007a14:	4311      	orrs	r1, r2
 8007a16:	687a      	ldr	r2, [r7, #4]
 8007a18:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007a1a:	06d2      	lsls	r2, r2, #27
 8007a1c:	430a      	orrs	r2, r1
 8007a1e:	4947      	ldr	r1, [pc, #284]	; (8007b3c <HAL_RCC_OscConfig+0x628>)
 8007a20:	4313      	orrs	r3, r2
 8007a22:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007a24:	4b45      	ldr	r3, [pc, #276]	; (8007b3c <HAL_RCC_OscConfig+0x628>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a44      	ldr	r2, [pc, #272]	; (8007b3c <HAL_RCC_OscConfig+0x628>)
 8007a2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007a2e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007a30:	4b42      	ldr	r3, [pc, #264]	; (8007b3c <HAL_RCC_OscConfig+0x628>)
 8007a32:	68db      	ldr	r3, [r3, #12]
 8007a34:	4a41      	ldr	r2, [pc, #260]	; (8007b3c <HAL_RCC_OscConfig+0x628>)
 8007a36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007a3a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a3c:	f7fc f95c 	bl	8003cf8 <HAL_GetTick>
 8007a40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007a42:	e008      	b.n	8007a56 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a44:	f7fc f958 	bl	8003cf8 <HAL_GetTick>
 8007a48:	4602      	mov	r2, r0
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	1ad3      	subs	r3, r2, r3
 8007a4e:	2b02      	cmp	r3, #2
 8007a50:	d901      	bls.n	8007a56 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8007a52:	2303      	movs	r3, #3
 8007a54:	e06e      	b.n	8007b34 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007a56:	4b39      	ldr	r3, [pc, #228]	; (8007b3c <HAL_RCC_OscConfig+0x628>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d0f0      	beq.n	8007a44 <HAL_RCC_OscConfig+0x530>
 8007a62:	e066      	b.n	8007b32 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a64:	4b35      	ldr	r3, [pc, #212]	; (8007b3c <HAL_RCC_OscConfig+0x628>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4a34      	ldr	r2, [pc, #208]	; (8007b3c <HAL_RCC_OscConfig+0x628>)
 8007a6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007a6e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8007a70:	4b32      	ldr	r3, [pc, #200]	; (8007b3c <HAL_RCC_OscConfig+0x628>)
 8007a72:	68db      	ldr	r3, [r3, #12]
 8007a74:	4a31      	ldr	r2, [pc, #196]	; (8007b3c <HAL_RCC_OscConfig+0x628>)
 8007a76:	f023 0303 	bic.w	r3, r3, #3
 8007a7a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007a7c:	4b2f      	ldr	r3, [pc, #188]	; (8007b3c <HAL_RCC_OscConfig+0x628>)
 8007a7e:	68db      	ldr	r3, [r3, #12]
 8007a80:	4a2e      	ldr	r2, [pc, #184]	; (8007b3c <HAL_RCC_OscConfig+0x628>)
 8007a82:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8007a86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a8a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a8c:	f7fc f934 	bl	8003cf8 <HAL_GetTick>
 8007a90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007a92:	e008      	b.n	8007aa6 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a94:	f7fc f930 	bl	8003cf8 <HAL_GetTick>
 8007a98:	4602      	mov	r2, r0
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	1ad3      	subs	r3, r2, r3
 8007a9e:	2b02      	cmp	r3, #2
 8007aa0:	d901      	bls.n	8007aa6 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8007aa2:	2303      	movs	r3, #3
 8007aa4:	e046      	b.n	8007b34 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007aa6:	4b25      	ldr	r3, [pc, #148]	; (8007b3c <HAL_RCC_OscConfig+0x628>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d1f0      	bne.n	8007a94 <HAL_RCC_OscConfig+0x580>
 8007ab2:	e03e      	b.n	8007b32 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	69db      	ldr	r3, [r3, #28]
 8007ab8:	2b01      	cmp	r3, #1
 8007aba:	d101      	bne.n	8007ac0 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8007abc:	2301      	movs	r3, #1
 8007abe:	e039      	b.n	8007b34 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8007ac0:	4b1e      	ldr	r3, [pc, #120]	; (8007b3c <HAL_RCC_OscConfig+0x628>)
 8007ac2:	68db      	ldr	r3, [r3, #12]
 8007ac4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	f003 0203 	and.w	r2, r3, #3
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6a1b      	ldr	r3, [r3, #32]
 8007ad0:	429a      	cmp	r2, r3
 8007ad2:	d12c      	bne.n	8007b2e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ade:	3b01      	subs	r3, #1
 8007ae0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ae2:	429a      	cmp	r2, r3
 8007ae4:	d123      	bne.n	8007b2e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007af0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007af2:	429a      	cmp	r2, r3
 8007af4:	d11b      	bne.n	8007b2e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b00:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007b02:	429a      	cmp	r2, r3
 8007b04:	d113      	bne.n	8007b2e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b10:	085b      	lsrs	r3, r3, #1
 8007b12:	3b01      	subs	r3, #1
 8007b14:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007b16:	429a      	cmp	r2, r3
 8007b18:	d109      	bne.n	8007b2e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b24:	085b      	lsrs	r3, r3, #1
 8007b26:	3b01      	subs	r3, #1
 8007b28:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007b2a:	429a      	cmp	r2, r3
 8007b2c:	d001      	beq.n	8007b32 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8007b2e:	2301      	movs	r3, #1
 8007b30:	e000      	b.n	8007b34 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8007b32:	2300      	movs	r3, #0
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	3720      	adds	r7, #32
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}
 8007b3c:	40021000 	.word	0x40021000
 8007b40:	019f800c 	.word	0x019f800c

08007b44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b086      	sub	sp, #24
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
 8007b4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d101      	bne.n	8007b5c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007b58:	2301      	movs	r3, #1
 8007b5a:	e11e      	b.n	8007d9a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007b5c:	4b91      	ldr	r3, [pc, #580]	; (8007da4 <HAL_RCC_ClockConfig+0x260>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f003 030f 	and.w	r3, r3, #15
 8007b64:	683a      	ldr	r2, [r7, #0]
 8007b66:	429a      	cmp	r2, r3
 8007b68:	d910      	bls.n	8007b8c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b6a:	4b8e      	ldr	r3, [pc, #568]	; (8007da4 <HAL_RCC_ClockConfig+0x260>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f023 020f 	bic.w	r2, r3, #15
 8007b72:	498c      	ldr	r1, [pc, #560]	; (8007da4 <HAL_RCC_ClockConfig+0x260>)
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	4313      	orrs	r3, r2
 8007b78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b7a:	4b8a      	ldr	r3, [pc, #552]	; (8007da4 <HAL_RCC_ClockConfig+0x260>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f003 030f 	and.w	r3, r3, #15
 8007b82:	683a      	ldr	r2, [r7, #0]
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d001      	beq.n	8007b8c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007b88:	2301      	movs	r3, #1
 8007b8a:	e106      	b.n	8007d9a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f003 0301 	and.w	r3, r3, #1
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d073      	beq.n	8007c80 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	2b03      	cmp	r3, #3
 8007b9e:	d129      	bne.n	8007bf4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007ba0:	4b81      	ldr	r3, [pc, #516]	; (8007da8 <HAL_RCC_ClockConfig+0x264>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d101      	bne.n	8007bb0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007bac:	2301      	movs	r3, #1
 8007bae:	e0f4      	b.n	8007d9a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007bb0:	f000 f99e 	bl	8007ef0 <RCC_GetSysClockFreqFromPLLSource>
 8007bb4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	4a7c      	ldr	r2, [pc, #496]	; (8007dac <HAL_RCC_ClockConfig+0x268>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d93f      	bls.n	8007c3e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007bbe:	4b7a      	ldr	r3, [pc, #488]	; (8007da8 <HAL_RCC_ClockConfig+0x264>)
 8007bc0:	689b      	ldr	r3, [r3, #8]
 8007bc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d009      	beq.n	8007bde <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d033      	beq.n	8007c3e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d12f      	bne.n	8007c3e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007bde:	4b72      	ldr	r3, [pc, #456]	; (8007da8 <HAL_RCC_ClockConfig+0x264>)
 8007be0:	689b      	ldr	r3, [r3, #8]
 8007be2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007be6:	4a70      	ldr	r2, [pc, #448]	; (8007da8 <HAL_RCC_ClockConfig+0x264>)
 8007be8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bec:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007bee:	2380      	movs	r3, #128	; 0x80
 8007bf0:	617b      	str	r3, [r7, #20]
 8007bf2:	e024      	b.n	8007c3e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	685b      	ldr	r3, [r3, #4]
 8007bf8:	2b02      	cmp	r3, #2
 8007bfa:	d107      	bne.n	8007c0c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007bfc:	4b6a      	ldr	r3, [pc, #424]	; (8007da8 <HAL_RCC_ClockConfig+0x264>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d109      	bne.n	8007c1c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007c08:	2301      	movs	r3, #1
 8007c0a:	e0c6      	b.n	8007d9a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007c0c:	4b66      	ldr	r3, [pc, #408]	; (8007da8 <HAL_RCC_ClockConfig+0x264>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d101      	bne.n	8007c1c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007c18:	2301      	movs	r3, #1
 8007c1a:	e0be      	b.n	8007d9a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007c1c:	f000 f8ce 	bl	8007dbc <HAL_RCC_GetSysClockFreq>
 8007c20:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8007c22:	693b      	ldr	r3, [r7, #16]
 8007c24:	4a61      	ldr	r2, [pc, #388]	; (8007dac <HAL_RCC_ClockConfig+0x268>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d909      	bls.n	8007c3e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007c2a:	4b5f      	ldr	r3, [pc, #380]	; (8007da8 <HAL_RCC_ClockConfig+0x264>)
 8007c2c:	689b      	ldr	r3, [r3, #8]
 8007c2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007c32:	4a5d      	ldr	r2, [pc, #372]	; (8007da8 <HAL_RCC_ClockConfig+0x264>)
 8007c34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c38:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8007c3a:	2380      	movs	r3, #128	; 0x80
 8007c3c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007c3e:	4b5a      	ldr	r3, [pc, #360]	; (8007da8 <HAL_RCC_ClockConfig+0x264>)
 8007c40:	689b      	ldr	r3, [r3, #8]
 8007c42:	f023 0203 	bic.w	r2, r3, #3
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	685b      	ldr	r3, [r3, #4]
 8007c4a:	4957      	ldr	r1, [pc, #348]	; (8007da8 <HAL_RCC_ClockConfig+0x264>)
 8007c4c:	4313      	orrs	r3, r2
 8007c4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c50:	f7fc f852 	bl	8003cf8 <HAL_GetTick>
 8007c54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c56:	e00a      	b.n	8007c6e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c58:	f7fc f84e 	bl	8003cf8 <HAL_GetTick>
 8007c5c:	4602      	mov	r2, r0
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	1ad3      	subs	r3, r2, r3
 8007c62:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d901      	bls.n	8007c6e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8007c6a:	2303      	movs	r3, #3
 8007c6c:	e095      	b.n	8007d9a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c6e:	4b4e      	ldr	r3, [pc, #312]	; (8007da8 <HAL_RCC_ClockConfig+0x264>)
 8007c70:	689b      	ldr	r3, [r3, #8]
 8007c72:	f003 020c 	and.w	r2, r3, #12
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	009b      	lsls	r3, r3, #2
 8007c7c:	429a      	cmp	r2, r3
 8007c7e:	d1eb      	bne.n	8007c58 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f003 0302 	and.w	r3, r3, #2
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d023      	beq.n	8007cd4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f003 0304 	and.w	r3, r3, #4
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d005      	beq.n	8007ca4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007c98:	4b43      	ldr	r3, [pc, #268]	; (8007da8 <HAL_RCC_ClockConfig+0x264>)
 8007c9a:	689b      	ldr	r3, [r3, #8]
 8007c9c:	4a42      	ldr	r2, [pc, #264]	; (8007da8 <HAL_RCC_ClockConfig+0x264>)
 8007c9e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007ca2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f003 0308 	and.w	r3, r3, #8
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d007      	beq.n	8007cc0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007cb0:	4b3d      	ldr	r3, [pc, #244]	; (8007da8 <HAL_RCC_ClockConfig+0x264>)
 8007cb2:	689b      	ldr	r3, [r3, #8]
 8007cb4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007cb8:	4a3b      	ldr	r2, [pc, #236]	; (8007da8 <HAL_RCC_ClockConfig+0x264>)
 8007cba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007cbe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007cc0:	4b39      	ldr	r3, [pc, #228]	; (8007da8 <HAL_RCC_ClockConfig+0x264>)
 8007cc2:	689b      	ldr	r3, [r3, #8]
 8007cc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	689b      	ldr	r3, [r3, #8]
 8007ccc:	4936      	ldr	r1, [pc, #216]	; (8007da8 <HAL_RCC_ClockConfig+0x264>)
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	608b      	str	r3, [r1, #8]
 8007cd2:	e008      	b.n	8007ce6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	2b80      	cmp	r3, #128	; 0x80
 8007cd8:	d105      	bne.n	8007ce6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007cda:	4b33      	ldr	r3, [pc, #204]	; (8007da8 <HAL_RCC_ClockConfig+0x264>)
 8007cdc:	689b      	ldr	r3, [r3, #8]
 8007cde:	4a32      	ldr	r2, [pc, #200]	; (8007da8 <HAL_RCC_ClockConfig+0x264>)
 8007ce0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007ce4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007ce6:	4b2f      	ldr	r3, [pc, #188]	; (8007da4 <HAL_RCC_ClockConfig+0x260>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f003 030f 	and.w	r3, r3, #15
 8007cee:	683a      	ldr	r2, [r7, #0]
 8007cf0:	429a      	cmp	r2, r3
 8007cf2:	d21d      	bcs.n	8007d30 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007cf4:	4b2b      	ldr	r3, [pc, #172]	; (8007da4 <HAL_RCC_ClockConfig+0x260>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f023 020f 	bic.w	r2, r3, #15
 8007cfc:	4929      	ldr	r1, [pc, #164]	; (8007da4 <HAL_RCC_ClockConfig+0x260>)
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	4313      	orrs	r3, r2
 8007d02:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007d04:	f7fb fff8 	bl	8003cf8 <HAL_GetTick>
 8007d08:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d0a:	e00a      	b.n	8007d22 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007d0c:	f7fb fff4 	bl	8003cf8 <HAL_GetTick>
 8007d10:	4602      	mov	r2, r0
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	1ad3      	subs	r3, r2, r3
 8007d16:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d901      	bls.n	8007d22 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8007d1e:	2303      	movs	r3, #3
 8007d20:	e03b      	b.n	8007d9a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d22:	4b20      	ldr	r3, [pc, #128]	; (8007da4 <HAL_RCC_ClockConfig+0x260>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f003 030f 	and.w	r3, r3, #15
 8007d2a:	683a      	ldr	r2, [r7, #0]
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d1ed      	bne.n	8007d0c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f003 0304 	and.w	r3, r3, #4
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d008      	beq.n	8007d4e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007d3c:	4b1a      	ldr	r3, [pc, #104]	; (8007da8 <HAL_RCC_ClockConfig+0x264>)
 8007d3e:	689b      	ldr	r3, [r3, #8]
 8007d40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	68db      	ldr	r3, [r3, #12]
 8007d48:	4917      	ldr	r1, [pc, #92]	; (8007da8 <HAL_RCC_ClockConfig+0x264>)
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f003 0308 	and.w	r3, r3, #8
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d009      	beq.n	8007d6e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007d5a:	4b13      	ldr	r3, [pc, #76]	; (8007da8 <HAL_RCC_ClockConfig+0x264>)
 8007d5c:	689b      	ldr	r3, [r3, #8]
 8007d5e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	691b      	ldr	r3, [r3, #16]
 8007d66:	00db      	lsls	r3, r3, #3
 8007d68:	490f      	ldr	r1, [pc, #60]	; (8007da8 <HAL_RCC_ClockConfig+0x264>)
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007d6e:	f000 f825 	bl	8007dbc <HAL_RCC_GetSysClockFreq>
 8007d72:	4602      	mov	r2, r0
 8007d74:	4b0c      	ldr	r3, [pc, #48]	; (8007da8 <HAL_RCC_ClockConfig+0x264>)
 8007d76:	689b      	ldr	r3, [r3, #8]
 8007d78:	091b      	lsrs	r3, r3, #4
 8007d7a:	f003 030f 	and.w	r3, r3, #15
 8007d7e:	490c      	ldr	r1, [pc, #48]	; (8007db0 <HAL_RCC_ClockConfig+0x26c>)
 8007d80:	5ccb      	ldrb	r3, [r1, r3]
 8007d82:	f003 031f 	and.w	r3, r3, #31
 8007d86:	fa22 f303 	lsr.w	r3, r2, r3
 8007d8a:	4a0a      	ldr	r2, [pc, #40]	; (8007db4 <HAL_RCC_ClockConfig+0x270>)
 8007d8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007d8e:	4b0a      	ldr	r3, [pc, #40]	; (8007db8 <HAL_RCC_ClockConfig+0x274>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	4618      	mov	r0, r3
 8007d94:	f7fb ff64 	bl	8003c60 <HAL_InitTick>
 8007d98:	4603      	mov	r3, r0
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3718      	adds	r7, #24
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}
 8007da2:	bf00      	nop
 8007da4:	40022000 	.word	0x40022000
 8007da8:	40021000 	.word	0x40021000
 8007dac:	04c4b400 	.word	0x04c4b400
 8007db0:	08010890 	.word	0x08010890
 8007db4:	20000058 	.word	0x20000058
 8007db8:	2000005c 	.word	0x2000005c

08007dbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b087      	sub	sp, #28
 8007dc0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007dc2:	4b2c      	ldr	r3, [pc, #176]	; (8007e74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007dc4:	689b      	ldr	r3, [r3, #8]
 8007dc6:	f003 030c 	and.w	r3, r3, #12
 8007dca:	2b04      	cmp	r3, #4
 8007dcc:	d102      	bne.n	8007dd4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007dce:	4b2a      	ldr	r3, [pc, #168]	; (8007e78 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007dd0:	613b      	str	r3, [r7, #16]
 8007dd2:	e047      	b.n	8007e64 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007dd4:	4b27      	ldr	r3, [pc, #156]	; (8007e74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007dd6:	689b      	ldr	r3, [r3, #8]
 8007dd8:	f003 030c 	and.w	r3, r3, #12
 8007ddc:	2b08      	cmp	r3, #8
 8007dde:	d102      	bne.n	8007de6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007de0:	4b26      	ldr	r3, [pc, #152]	; (8007e7c <HAL_RCC_GetSysClockFreq+0xc0>)
 8007de2:	613b      	str	r3, [r7, #16]
 8007de4:	e03e      	b.n	8007e64 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007de6:	4b23      	ldr	r3, [pc, #140]	; (8007e74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007de8:	689b      	ldr	r3, [r3, #8]
 8007dea:	f003 030c 	and.w	r3, r3, #12
 8007dee:	2b0c      	cmp	r3, #12
 8007df0:	d136      	bne.n	8007e60 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007df2:	4b20      	ldr	r3, [pc, #128]	; (8007e74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007df4:	68db      	ldr	r3, [r3, #12]
 8007df6:	f003 0303 	and.w	r3, r3, #3
 8007dfa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007dfc:	4b1d      	ldr	r3, [pc, #116]	; (8007e74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007dfe:	68db      	ldr	r3, [r3, #12]
 8007e00:	091b      	lsrs	r3, r3, #4
 8007e02:	f003 030f 	and.w	r3, r3, #15
 8007e06:	3301      	adds	r3, #1
 8007e08:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	2b03      	cmp	r3, #3
 8007e0e:	d10c      	bne.n	8007e2a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007e10:	4a1a      	ldr	r2, [pc, #104]	; (8007e7c <HAL_RCC_GetSysClockFreq+0xc0>)
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e18:	4a16      	ldr	r2, [pc, #88]	; (8007e74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007e1a:	68d2      	ldr	r2, [r2, #12]
 8007e1c:	0a12      	lsrs	r2, r2, #8
 8007e1e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007e22:	fb02 f303 	mul.w	r3, r2, r3
 8007e26:	617b      	str	r3, [r7, #20]
      break;
 8007e28:	e00c      	b.n	8007e44 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007e2a:	4a13      	ldr	r2, [pc, #76]	; (8007e78 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e32:	4a10      	ldr	r2, [pc, #64]	; (8007e74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007e34:	68d2      	ldr	r2, [r2, #12]
 8007e36:	0a12      	lsrs	r2, r2, #8
 8007e38:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007e3c:	fb02 f303 	mul.w	r3, r2, r3
 8007e40:	617b      	str	r3, [r7, #20]
      break;
 8007e42:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007e44:	4b0b      	ldr	r3, [pc, #44]	; (8007e74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007e46:	68db      	ldr	r3, [r3, #12]
 8007e48:	0e5b      	lsrs	r3, r3, #25
 8007e4a:	f003 0303 	and.w	r3, r3, #3
 8007e4e:	3301      	adds	r3, #1
 8007e50:	005b      	lsls	r3, r3, #1
 8007e52:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007e54:	697a      	ldr	r2, [r7, #20]
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e5c:	613b      	str	r3, [r7, #16]
 8007e5e:	e001      	b.n	8007e64 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007e60:	2300      	movs	r3, #0
 8007e62:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007e64:	693b      	ldr	r3, [r7, #16]
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	371c      	adds	r7, #28
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e70:	4770      	bx	lr
 8007e72:	bf00      	nop
 8007e74:	40021000 	.word	0x40021000
 8007e78:	00f42400 	.word	0x00f42400
 8007e7c:	007a1200 	.word	0x007a1200

08007e80 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007e80:	b480      	push	{r7}
 8007e82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007e84:	4b03      	ldr	r3, [pc, #12]	; (8007e94 <HAL_RCC_GetHCLKFreq+0x14>)
 8007e86:	681b      	ldr	r3, [r3, #0]
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e90:	4770      	bx	lr
 8007e92:	bf00      	nop
 8007e94:	20000058 	.word	0x20000058

08007e98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007e9c:	f7ff fff0 	bl	8007e80 <HAL_RCC_GetHCLKFreq>
 8007ea0:	4602      	mov	r2, r0
 8007ea2:	4b06      	ldr	r3, [pc, #24]	; (8007ebc <HAL_RCC_GetPCLK1Freq+0x24>)
 8007ea4:	689b      	ldr	r3, [r3, #8]
 8007ea6:	0a1b      	lsrs	r3, r3, #8
 8007ea8:	f003 0307 	and.w	r3, r3, #7
 8007eac:	4904      	ldr	r1, [pc, #16]	; (8007ec0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007eae:	5ccb      	ldrb	r3, [r1, r3]
 8007eb0:	f003 031f 	and.w	r3, r3, #31
 8007eb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	bd80      	pop	{r7, pc}
 8007ebc:	40021000 	.word	0x40021000
 8007ec0:	080108a0 	.word	0x080108a0

08007ec4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007ec8:	f7ff ffda 	bl	8007e80 <HAL_RCC_GetHCLKFreq>
 8007ecc:	4602      	mov	r2, r0
 8007ece:	4b06      	ldr	r3, [pc, #24]	; (8007ee8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007ed0:	689b      	ldr	r3, [r3, #8]
 8007ed2:	0adb      	lsrs	r3, r3, #11
 8007ed4:	f003 0307 	and.w	r3, r3, #7
 8007ed8:	4904      	ldr	r1, [pc, #16]	; (8007eec <HAL_RCC_GetPCLK2Freq+0x28>)
 8007eda:	5ccb      	ldrb	r3, [r1, r3]
 8007edc:	f003 031f 	and.w	r3, r3, #31
 8007ee0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	bd80      	pop	{r7, pc}
 8007ee8:	40021000 	.word	0x40021000
 8007eec:	080108a0 	.word	0x080108a0

08007ef0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b087      	sub	sp, #28
 8007ef4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007ef6:	4b1e      	ldr	r3, [pc, #120]	; (8007f70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007ef8:	68db      	ldr	r3, [r3, #12]
 8007efa:	f003 0303 	and.w	r3, r3, #3
 8007efe:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007f00:	4b1b      	ldr	r3, [pc, #108]	; (8007f70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007f02:	68db      	ldr	r3, [r3, #12]
 8007f04:	091b      	lsrs	r3, r3, #4
 8007f06:	f003 030f 	and.w	r3, r3, #15
 8007f0a:	3301      	adds	r3, #1
 8007f0c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	2b03      	cmp	r3, #3
 8007f12:	d10c      	bne.n	8007f2e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007f14:	4a17      	ldr	r2, [pc, #92]	; (8007f74 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f1c:	4a14      	ldr	r2, [pc, #80]	; (8007f70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007f1e:	68d2      	ldr	r2, [r2, #12]
 8007f20:	0a12      	lsrs	r2, r2, #8
 8007f22:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007f26:	fb02 f303 	mul.w	r3, r2, r3
 8007f2a:	617b      	str	r3, [r7, #20]
    break;
 8007f2c:	e00c      	b.n	8007f48 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007f2e:	4a12      	ldr	r2, [pc, #72]	; (8007f78 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f36:	4a0e      	ldr	r2, [pc, #56]	; (8007f70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007f38:	68d2      	ldr	r2, [r2, #12]
 8007f3a:	0a12      	lsrs	r2, r2, #8
 8007f3c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007f40:	fb02 f303 	mul.w	r3, r2, r3
 8007f44:	617b      	str	r3, [r7, #20]
    break;
 8007f46:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007f48:	4b09      	ldr	r3, [pc, #36]	; (8007f70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007f4a:	68db      	ldr	r3, [r3, #12]
 8007f4c:	0e5b      	lsrs	r3, r3, #25
 8007f4e:	f003 0303 	and.w	r3, r3, #3
 8007f52:	3301      	adds	r3, #1
 8007f54:	005b      	lsls	r3, r3, #1
 8007f56:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007f58:	697a      	ldr	r2, [r7, #20]
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f60:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007f62:	687b      	ldr	r3, [r7, #4]
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	371c      	adds	r7, #28
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6e:	4770      	bx	lr
 8007f70:	40021000 	.word	0x40021000
 8007f74:	007a1200 	.word	0x007a1200
 8007f78:	00f42400 	.word	0x00f42400

08007f7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b086      	sub	sp, #24
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007f84:	2300      	movs	r3, #0
 8007f86:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007f88:	2300      	movs	r3, #0
 8007f8a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	f000 8098 	beq.w	80080ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007f9e:	4b43      	ldr	r3, [pc, #268]	; (80080ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d10d      	bne.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007faa:	4b40      	ldr	r3, [pc, #256]	; (80080ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fae:	4a3f      	ldr	r2, [pc, #252]	; (80080ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007fb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007fb4:	6593      	str	r3, [r2, #88]	; 0x58
 8007fb6:	4b3d      	ldr	r3, [pc, #244]	; (80080ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007fbe:	60bb      	str	r3, [r7, #8]
 8007fc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007fc6:	4b3a      	ldr	r3, [pc, #232]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4a39      	ldr	r2, [pc, #228]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007fcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007fd0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007fd2:	f7fb fe91 	bl	8003cf8 <HAL_GetTick>
 8007fd6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007fd8:	e009      	b.n	8007fee <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007fda:	f7fb fe8d 	bl	8003cf8 <HAL_GetTick>
 8007fde:	4602      	mov	r2, r0
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	1ad3      	subs	r3, r2, r3
 8007fe4:	2b02      	cmp	r3, #2
 8007fe6:	d902      	bls.n	8007fee <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007fe8:	2303      	movs	r3, #3
 8007fea:	74fb      	strb	r3, [r7, #19]
        break;
 8007fec:	e005      	b.n	8007ffa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007fee:	4b30      	ldr	r3, [pc, #192]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d0ef      	beq.n	8007fda <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007ffa:	7cfb      	ldrb	r3, [r7, #19]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d159      	bne.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008000:	4b2a      	ldr	r3, [pc, #168]	; (80080ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008006:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800800a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800800c:	697b      	ldr	r3, [r7, #20]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d01e      	beq.n	8008050 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008016:	697a      	ldr	r2, [r7, #20]
 8008018:	429a      	cmp	r2, r3
 800801a:	d019      	beq.n	8008050 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800801c:	4b23      	ldr	r3, [pc, #140]	; (80080ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800801e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008022:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008026:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008028:	4b20      	ldr	r3, [pc, #128]	; (80080ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800802a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800802e:	4a1f      	ldr	r2, [pc, #124]	; (80080ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008030:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008034:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008038:	4b1c      	ldr	r3, [pc, #112]	; (80080ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800803a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800803e:	4a1b      	ldr	r2, [pc, #108]	; (80080ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008040:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008044:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008048:	4a18      	ldr	r2, [pc, #96]	; (80080ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	f003 0301 	and.w	r3, r3, #1
 8008056:	2b00      	cmp	r3, #0
 8008058:	d016      	beq.n	8008088 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800805a:	f7fb fe4d 	bl	8003cf8 <HAL_GetTick>
 800805e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008060:	e00b      	b.n	800807a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008062:	f7fb fe49 	bl	8003cf8 <HAL_GetTick>
 8008066:	4602      	mov	r2, r0
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	1ad3      	subs	r3, r2, r3
 800806c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008070:	4293      	cmp	r3, r2
 8008072:	d902      	bls.n	800807a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8008074:	2303      	movs	r3, #3
 8008076:	74fb      	strb	r3, [r7, #19]
            break;
 8008078:	e006      	b.n	8008088 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800807a:	4b0c      	ldr	r3, [pc, #48]	; (80080ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800807c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008080:	f003 0302 	and.w	r3, r3, #2
 8008084:	2b00      	cmp	r3, #0
 8008086:	d0ec      	beq.n	8008062 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8008088:	7cfb      	ldrb	r3, [r7, #19]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d10b      	bne.n	80080a6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800808e:	4b07      	ldr	r3, [pc, #28]	; (80080ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008090:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008094:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800809c:	4903      	ldr	r1, [pc, #12]	; (80080ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800809e:	4313      	orrs	r3, r2
 80080a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80080a4:	e008      	b.n	80080b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80080a6:	7cfb      	ldrb	r3, [r7, #19]
 80080a8:	74bb      	strb	r3, [r7, #18]
 80080aa:	e005      	b.n	80080b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80080ac:	40021000 	.word	0x40021000
 80080b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080b4:	7cfb      	ldrb	r3, [r7, #19]
 80080b6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80080b8:	7c7b      	ldrb	r3, [r7, #17]
 80080ba:	2b01      	cmp	r3, #1
 80080bc:	d105      	bne.n	80080ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80080be:	4ba6      	ldr	r3, [pc, #664]	; (8008358 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80080c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080c2:	4aa5      	ldr	r2, [pc, #660]	; (8008358 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80080c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80080c8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f003 0301 	and.w	r3, r3, #1
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d00a      	beq.n	80080ec <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80080d6:	4ba0      	ldr	r3, [pc, #640]	; (8008358 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80080d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080dc:	f023 0203 	bic.w	r2, r3, #3
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	685b      	ldr	r3, [r3, #4]
 80080e4:	499c      	ldr	r1, [pc, #624]	; (8008358 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80080e6:	4313      	orrs	r3, r2
 80080e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f003 0302 	and.w	r3, r3, #2
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d00a      	beq.n	800810e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80080f8:	4b97      	ldr	r3, [pc, #604]	; (8008358 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80080fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080fe:	f023 020c 	bic.w	r2, r3, #12
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	689b      	ldr	r3, [r3, #8]
 8008106:	4994      	ldr	r1, [pc, #592]	; (8008358 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008108:	4313      	orrs	r3, r2
 800810a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f003 0304 	and.w	r3, r3, #4
 8008116:	2b00      	cmp	r3, #0
 8008118:	d00a      	beq.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800811a:	4b8f      	ldr	r3, [pc, #572]	; (8008358 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800811c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008120:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	68db      	ldr	r3, [r3, #12]
 8008128:	498b      	ldr	r1, [pc, #556]	; (8008358 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800812a:	4313      	orrs	r3, r2
 800812c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f003 0308 	and.w	r3, r3, #8
 8008138:	2b00      	cmp	r3, #0
 800813a:	d00a      	beq.n	8008152 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800813c:	4b86      	ldr	r3, [pc, #536]	; (8008358 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800813e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008142:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	691b      	ldr	r3, [r3, #16]
 800814a:	4983      	ldr	r1, [pc, #524]	; (8008358 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800814c:	4313      	orrs	r3, r2
 800814e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f003 0320 	and.w	r3, r3, #32
 800815a:	2b00      	cmp	r3, #0
 800815c:	d00a      	beq.n	8008174 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800815e:	4b7e      	ldr	r3, [pc, #504]	; (8008358 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008160:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008164:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	695b      	ldr	r3, [r3, #20]
 800816c:	497a      	ldr	r1, [pc, #488]	; (8008358 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800816e:	4313      	orrs	r3, r2
 8008170:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800817c:	2b00      	cmp	r3, #0
 800817e:	d00a      	beq.n	8008196 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008180:	4b75      	ldr	r3, [pc, #468]	; (8008358 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008186:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	699b      	ldr	r3, [r3, #24]
 800818e:	4972      	ldr	r1, [pc, #456]	; (8008358 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008190:	4313      	orrs	r3, r2
 8008192:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d00a      	beq.n	80081b8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80081a2:	4b6d      	ldr	r3, [pc, #436]	; (8008358 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80081a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081a8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	69db      	ldr	r3, [r3, #28]
 80081b0:	4969      	ldr	r1, [pc, #420]	; (8008358 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80081b2:	4313      	orrs	r3, r2
 80081b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d00a      	beq.n	80081da <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80081c4:	4b64      	ldr	r3, [pc, #400]	; (8008358 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80081c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081ca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6a1b      	ldr	r3, [r3, #32]
 80081d2:	4961      	ldr	r1, [pc, #388]	; (8008358 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80081d4:	4313      	orrs	r3, r2
 80081d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d00a      	beq.n	80081fc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80081e6:	4b5c      	ldr	r3, [pc, #368]	; (8008358 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80081e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081ec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081f4:	4958      	ldr	r1, [pc, #352]	; (8008358 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80081f6:	4313      	orrs	r3, r2
 80081f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008204:	2b00      	cmp	r3, #0
 8008206:	d015      	beq.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008208:	4b53      	ldr	r3, [pc, #332]	; (8008358 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800820a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800820e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008216:	4950      	ldr	r1, [pc, #320]	; (8008358 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008218:	4313      	orrs	r3, r2
 800821a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008222:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008226:	d105      	bne.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008228:	4b4b      	ldr	r3, [pc, #300]	; (8008358 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800822a:	68db      	ldr	r3, [r3, #12]
 800822c:	4a4a      	ldr	r2, [pc, #296]	; (8008358 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800822e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008232:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800823c:	2b00      	cmp	r3, #0
 800823e:	d015      	beq.n	800826c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008240:	4b45      	ldr	r3, [pc, #276]	; (8008358 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008246:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800824e:	4942      	ldr	r1, [pc, #264]	; (8008358 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008250:	4313      	orrs	r3, r2
 8008252:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800825a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800825e:	d105      	bne.n	800826c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008260:	4b3d      	ldr	r3, [pc, #244]	; (8008358 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008262:	68db      	ldr	r3, [r3, #12]
 8008264:	4a3c      	ldr	r2, [pc, #240]	; (8008358 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008266:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800826a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008274:	2b00      	cmp	r3, #0
 8008276:	d015      	beq.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008278:	4b37      	ldr	r3, [pc, #220]	; (8008358 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800827a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800827e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008286:	4934      	ldr	r1, [pc, #208]	; (8008358 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008288:	4313      	orrs	r3, r2
 800828a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008292:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008296:	d105      	bne.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008298:	4b2f      	ldr	r3, [pc, #188]	; (8008358 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800829a:	68db      	ldr	r3, [r3, #12]
 800829c:	4a2e      	ldr	r2, [pc, #184]	; (8008358 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800829e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80082a2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d015      	beq.n	80082dc <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80082b0:	4b29      	ldr	r3, [pc, #164]	; (8008358 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80082b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082be:	4926      	ldr	r1, [pc, #152]	; (8008358 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80082c0:	4313      	orrs	r3, r2
 80082c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80082ce:	d105      	bne.n	80082dc <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80082d0:	4b21      	ldr	r3, [pc, #132]	; (8008358 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80082d2:	68db      	ldr	r3, [r3, #12]
 80082d4:	4a20      	ldr	r2, [pc, #128]	; (8008358 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80082d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80082da:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d015      	beq.n	8008314 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80082e8:	4b1b      	ldr	r3, [pc, #108]	; (8008358 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80082ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082f6:	4918      	ldr	r1, [pc, #96]	; (8008358 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80082f8:	4313      	orrs	r3, r2
 80082fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008302:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008306:	d105      	bne.n	8008314 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008308:	4b13      	ldr	r3, [pc, #76]	; (8008358 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800830a:	68db      	ldr	r3, [r3, #12]
 800830c:	4a12      	ldr	r2, [pc, #72]	; (8008358 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800830e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008312:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800831c:	2b00      	cmp	r3, #0
 800831e:	d015      	beq.n	800834c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008320:	4b0d      	ldr	r3, [pc, #52]	; (8008358 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008326:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800832e:	490a      	ldr	r1, [pc, #40]	; (8008358 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008330:	4313      	orrs	r3, r2
 8008332:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800833a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800833e:	d105      	bne.n	800834c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008340:	4b05      	ldr	r3, [pc, #20]	; (8008358 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008342:	68db      	ldr	r3, [r3, #12]
 8008344:	4a04      	ldr	r2, [pc, #16]	; (8008358 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008346:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800834a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800834c:	7cbb      	ldrb	r3, [r7, #18]
}
 800834e:	4618      	mov	r0, r3
 8008350:	3718      	adds	r7, #24
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}
 8008356:	bf00      	nop
 8008358:	40021000 	.word	0x40021000

0800835c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b084      	sub	sp, #16
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d101      	bne.n	800836e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800836a:	2301      	movs	r3, #1
 800836c:	e09d      	b.n	80084aa <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008372:	2b00      	cmp	r3, #0
 8008374:	d108      	bne.n	8008388 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	685b      	ldr	r3, [r3, #4]
 800837a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800837e:	d009      	beq.n	8008394 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2200      	movs	r2, #0
 8008384:	61da      	str	r2, [r3, #28]
 8008386:	e005      	b.n	8008394 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2200      	movs	r2, #0
 800838c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2200      	movs	r2, #0
 8008392:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2200      	movs	r2, #0
 8008398:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80083a0:	b2db      	uxtb	r3, r3
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d106      	bne.n	80083b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2200      	movs	r2, #0
 80083aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f7fb f944 	bl	800363c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2202      	movs	r2, #2
 80083b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	681a      	ldr	r2, [r3, #0]
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80083ca:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	68db      	ldr	r3, [r3, #12]
 80083d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80083d4:	d902      	bls.n	80083dc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80083d6:	2300      	movs	r3, #0
 80083d8:	60fb      	str	r3, [r7, #12]
 80083da:	e002      	b.n	80083e2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80083dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80083e0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	68db      	ldr	r3, [r3, #12]
 80083e6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80083ea:	d007      	beq.n	80083fc <HAL_SPI_Init+0xa0>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	68db      	ldr	r3, [r3, #12]
 80083f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80083f4:	d002      	beq.n	80083fc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2200      	movs	r2, #0
 80083fa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	685b      	ldr	r3, [r3, #4]
 8008400:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	689b      	ldr	r3, [r3, #8]
 8008408:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800840c:	431a      	orrs	r2, r3
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	691b      	ldr	r3, [r3, #16]
 8008412:	f003 0302 	and.w	r3, r3, #2
 8008416:	431a      	orrs	r2, r3
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	695b      	ldr	r3, [r3, #20]
 800841c:	f003 0301 	and.w	r3, r3, #1
 8008420:	431a      	orrs	r2, r3
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	699b      	ldr	r3, [r3, #24]
 8008426:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800842a:	431a      	orrs	r2, r3
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	69db      	ldr	r3, [r3, #28]
 8008430:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008434:	431a      	orrs	r2, r3
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6a1b      	ldr	r3, [r3, #32]
 800843a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800843e:	ea42 0103 	orr.w	r1, r2, r3
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008446:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	430a      	orrs	r2, r1
 8008450:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	699b      	ldr	r3, [r3, #24]
 8008456:	0c1b      	lsrs	r3, r3, #16
 8008458:	f003 0204 	and.w	r2, r3, #4
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008460:	f003 0310 	and.w	r3, r3, #16
 8008464:	431a      	orrs	r2, r3
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800846a:	f003 0308 	and.w	r3, r3, #8
 800846e:	431a      	orrs	r2, r3
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	68db      	ldr	r3, [r3, #12]
 8008474:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008478:	ea42 0103 	orr.w	r1, r2, r3
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	430a      	orrs	r2, r1
 8008488:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	69da      	ldr	r2, [r3, #28]
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008498:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2200      	movs	r2, #0
 800849e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2201      	movs	r2, #1
 80084a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80084a8:	2300      	movs	r3, #0
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3710      	adds	r7, #16
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}

080084b2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80084b2:	b580      	push	{r7, lr}
 80084b4:	b082      	sub	sp, #8
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d101      	bne.n	80084c4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80084c0:	2301      	movs	r3, #1
 80084c2:	e049      	b.n	8008558 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084ca:	b2db      	uxtb	r3, r3
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d106      	bne.n	80084de <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2200      	movs	r2, #0
 80084d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f7fb f8f3 	bl	80036c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2202      	movs	r2, #2
 80084e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681a      	ldr	r2, [r3, #0]
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	3304      	adds	r3, #4
 80084ee:	4619      	mov	r1, r3
 80084f0:	4610      	mov	r0, r2
 80084f2:	f000 fea1 	bl	8009238 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2201      	movs	r2, #1
 80084fa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2201      	movs	r2, #1
 8008502:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2201      	movs	r2, #1
 800850a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2201      	movs	r2, #1
 8008512:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2201      	movs	r2, #1
 800851a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2201      	movs	r2, #1
 8008522:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2201      	movs	r2, #1
 800852a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2201      	movs	r2, #1
 8008532:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2201      	movs	r2, #1
 800853a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2201      	movs	r2, #1
 8008542:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2201      	movs	r2, #1
 800854a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2201      	movs	r2, #1
 8008552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008556:	2300      	movs	r3, #0
}
 8008558:	4618      	mov	r0, r3
 800855a:	3708      	adds	r7, #8
 800855c:	46bd      	mov	sp, r7
 800855e:	bd80      	pop	{r7, pc}

08008560 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b082      	sub	sp, #8
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d101      	bne.n	8008572 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800856e:	2301      	movs	r3, #1
 8008570:	e049      	b.n	8008606 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008578:	b2db      	uxtb	r3, r3
 800857a:	2b00      	cmp	r3, #0
 800857c:	d106      	bne.n	800858c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2200      	movs	r2, #0
 8008582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f000 f841 	bl	800860e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2202      	movs	r2, #2
 8008590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681a      	ldr	r2, [r3, #0]
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	3304      	adds	r3, #4
 800859c:	4619      	mov	r1, r3
 800859e:	4610      	mov	r0, r2
 80085a0:	f000 fe4a 	bl	8009238 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2201      	movs	r2, #1
 80085a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2201      	movs	r2, #1
 80085b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2201      	movs	r2, #1
 80085b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2201      	movs	r2, #1
 80085c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2201      	movs	r2, #1
 80085c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2201      	movs	r2, #1
 80085d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2201      	movs	r2, #1
 80085d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2201      	movs	r2, #1
 80085e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2201      	movs	r2, #1
 80085e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2201      	movs	r2, #1
 80085f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2201      	movs	r2, #1
 80085f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2201      	movs	r2, #1
 8008600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008604:	2300      	movs	r3, #0
}
 8008606:	4618      	mov	r0, r3
 8008608:	3708      	adds	r7, #8
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}

0800860e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800860e:	b480      	push	{r7}
 8008610:	b083      	sub	sp, #12
 8008612:	af00      	add	r7, sp, #0
 8008614:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008616:	bf00      	nop
 8008618:	370c      	adds	r7, #12
 800861a:	46bd      	mov	sp, r7
 800861c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008620:	4770      	bx	lr
	...

08008624 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b084      	sub	sp, #16
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
 800862c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d109      	bne.n	8008648 <HAL_TIM_PWM_Start+0x24>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800863a:	b2db      	uxtb	r3, r3
 800863c:	2b01      	cmp	r3, #1
 800863e:	bf14      	ite	ne
 8008640:	2301      	movne	r3, #1
 8008642:	2300      	moveq	r3, #0
 8008644:	b2db      	uxtb	r3, r3
 8008646:	e03c      	b.n	80086c2 <HAL_TIM_PWM_Start+0x9e>
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	2b04      	cmp	r3, #4
 800864c:	d109      	bne.n	8008662 <HAL_TIM_PWM_Start+0x3e>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008654:	b2db      	uxtb	r3, r3
 8008656:	2b01      	cmp	r3, #1
 8008658:	bf14      	ite	ne
 800865a:	2301      	movne	r3, #1
 800865c:	2300      	moveq	r3, #0
 800865e:	b2db      	uxtb	r3, r3
 8008660:	e02f      	b.n	80086c2 <HAL_TIM_PWM_Start+0x9e>
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	2b08      	cmp	r3, #8
 8008666:	d109      	bne.n	800867c <HAL_TIM_PWM_Start+0x58>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800866e:	b2db      	uxtb	r3, r3
 8008670:	2b01      	cmp	r3, #1
 8008672:	bf14      	ite	ne
 8008674:	2301      	movne	r3, #1
 8008676:	2300      	moveq	r3, #0
 8008678:	b2db      	uxtb	r3, r3
 800867a:	e022      	b.n	80086c2 <HAL_TIM_PWM_Start+0x9e>
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	2b0c      	cmp	r3, #12
 8008680:	d109      	bne.n	8008696 <HAL_TIM_PWM_Start+0x72>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008688:	b2db      	uxtb	r3, r3
 800868a:	2b01      	cmp	r3, #1
 800868c:	bf14      	ite	ne
 800868e:	2301      	movne	r3, #1
 8008690:	2300      	moveq	r3, #0
 8008692:	b2db      	uxtb	r3, r3
 8008694:	e015      	b.n	80086c2 <HAL_TIM_PWM_Start+0x9e>
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	2b10      	cmp	r3, #16
 800869a:	d109      	bne.n	80086b0 <HAL_TIM_PWM_Start+0x8c>
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80086a2:	b2db      	uxtb	r3, r3
 80086a4:	2b01      	cmp	r3, #1
 80086a6:	bf14      	ite	ne
 80086a8:	2301      	movne	r3, #1
 80086aa:	2300      	moveq	r3, #0
 80086ac:	b2db      	uxtb	r3, r3
 80086ae:	e008      	b.n	80086c2 <HAL_TIM_PWM_Start+0x9e>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80086b6:	b2db      	uxtb	r3, r3
 80086b8:	2b01      	cmp	r3, #1
 80086ba:	bf14      	ite	ne
 80086bc:	2301      	movne	r3, #1
 80086be:	2300      	moveq	r3, #0
 80086c0:	b2db      	uxtb	r3, r3
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d001      	beq.n	80086ca <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80086c6:	2301      	movs	r3, #1
 80086c8:	e097      	b.n	80087fa <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d104      	bne.n	80086da <HAL_TIM_PWM_Start+0xb6>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2202      	movs	r2, #2
 80086d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80086d8:	e023      	b.n	8008722 <HAL_TIM_PWM_Start+0xfe>
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	2b04      	cmp	r3, #4
 80086de:	d104      	bne.n	80086ea <HAL_TIM_PWM_Start+0xc6>
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2202      	movs	r2, #2
 80086e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80086e8:	e01b      	b.n	8008722 <HAL_TIM_PWM_Start+0xfe>
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	2b08      	cmp	r3, #8
 80086ee:	d104      	bne.n	80086fa <HAL_TIM_PWM_Start+0xd6>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2202      	movs	r2, #2
 80086f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80086f8:	e013      	b.n	8008722 <HAL_TIM_PWM_Start+0xfe>
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	2b0c      	cmp	r3, #12
 80086fe:	d104      	bne.n	800870a <HAL_TIM_PWM_Start+0xe6>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2202      	movs	r2, #2
 8008704:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008708:	e00b      	b.n	8008722 <HAL_TIM_PWM_Start+0xfe>
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	2b10      	cmp	r3, #16
 800870e:	d104      	bne.n	800871a <HAL_TIM_PWM_Start+0xf6>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2202      	movs	r2, #2
 8008714:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008718:	e003      	b.n	8008722 <HAL_TIM_PWM_Start+0xfe>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2202      	movs	r2, #2
 800871e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	2201      	movs	r2, #1
 8008728:	6839      	ldr	r1, [r7, #0]
 800872a:	4618      	mov	r0, r3
 800872c:	f001 f9a6 	bl	8009a7c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	4a33      	ldr	r2, [pc, #204]	; (8008804 <HAL_TIM_PWM_Start+0x1e0>)
 8008736:	4293      	cmp	r3, r2
 8008738:	d013      	beq.n	8008762 <HAL_TIM_PWM_Start+0x13e>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	4a32      	ldr	r2, [pc, #200]	; (8008808 <HAL_TIM_PWM_Start+0x1e4>)
 8008740:	4293      	cmp	r3, r2
 8008742:	d00e      	beq.n	8008762 <HAL_TIM_PWM_Start+0x13e>
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	4a30      	ldr	r2, [pc, #192]	; (800880c <HAL_TIM_PWM_Start+0x1e8>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d009      	beq.n	8008762 <HAL_TIM_PWM_Start+0x13e>
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	4a2f      	ldr	r2, [pc, #188]	; (8008810 <HAL_TIM_PWM_Start+0x1ec>)
 8008754:	4293      	cmp	r3, r2
 8008756:	d004      	beq.n	8008762 <HAL_TIM_PWM_Start+0x13e>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4a2d      	ldr	r2, [pc, #180]	; (8008814 <HAL_TIM_PWM_Start+0x1f0>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d101      	bne.n	8008766 <HAL_TIM_PWM_Start+0x142>
 8008762:	2301      	movs	r3, #1
 8008764:	e000      	b.n	8008768 <HAL_TIM_PWM_Start+0x144>
 8008766:	2300      	movs	r3, #0
 8008768:	2b00      	cmp	r3, #0
 800876a:	d007      	beq.n	800877c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800877a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4a20      	ldr	r2, [pc, #128]	; (8008804 <HAL_TIM_PWM_Start+0x1e0>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d018      	beq.n	80087b8 <HAL_TIM_PWM_Start+0x194>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800878e:	d013      	beq.n	80087b8 <HAL_TIM_PWM_Start+0x194>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	4a20      	ldr	r2, [pc, #128]	; (8008818 <HAL_TIM_PWM_Start+0x1f4>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d00e      	beq.n	80087b8 <HAL_TIM_PWM_Start+0x194>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	4a1f      	ldr	r2, [pc, #124]	; (800881c <HAL_TIM_PWM_Start+0x1f8>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d009      	beq.n	80087b8 <HAL_TIM_PWM_Start+0x194>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4a17      	ldr	r2, [pc, #92]	; (8008808 <HAL_TIM_PWM_Start+0x1e4>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d004      	beq.n	80087b8 <HAL_TIM_PWM_Start+0x194>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	4a16      	ldr	r2, [pc, #88]	; (800880c <HAL_TIM_PWM_Start+0x1e8>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d115      	bne.n	80087e4 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	689a      	ldr	r2, [r3, #8]
 80087be:	4b18      	ldr	r3, [pc, #96]	; (8008820 <HAL_TIM_PWM_Start+0x1fc>)
 80087c0:	4013      	ands	r3, r2
 80087c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	2b06      	cmp	r3, #6
 80087c8:	d015      	beq.n	80087f6 <HAL_TIM_PWM_Start+0x1d2>
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087d0:	d011      	beq.n	80087f6 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	681a      	ldr	r2, [r3, #0]
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f042 0201 	orr.w	r2, r2, #1
 80087e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087e2:	e008      	b.n	80087f6 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	681a      	ldr	r2, [r3, #0]
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f042 0201 	orr.w	r2, r2, #1
 80087f2:	601a      	str	r2, [r3, #0]
 80087f4:	e000      	b.n	80087f8 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80087f8:	2300      	movs	r3, #0
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3710      	adds	r7, #16
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}
 8008802:	bf00      	nop
 8008804:	40012c00 	.word	0x40012c00
 8008808:	40013400 	.word	0x40013400
 800880c:	40014000 	.word	0x40014000
 8008810:	40014400 	.word	0x40014400
 8008814:	40014800 	.word	0x40014800
 8008818:	40000400 	.word	0x40000400
 800881c:	40000800 	.word	0x40000800
 8008820:	00010007 	.word	0x00010007

08008824 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b086      	sub	sp, #24
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
 800882c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d101      	bne.n	8008838 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008834:	2301      	movs	r3, #1
 8008836:	e097      	b.n	8008968 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800883e:	b2db      	uxtb	r3, r3
 8008840:	2b00      	cmp	r3, #0
 8008842:	d106      	bne.n	8008852 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2200      	movs	r2, #0
 8008848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f7fa ff85 	bl	800375c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2202      	movs	r2, #2
 8008856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	689b      	ldr	r3, [r3, #8]
 8008860:	687a      	ldr	r2, [r7, #4]
 8008862:	6812      	ldr	r2, [r2, #0]
 8008864:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8008868:	f023 0307 	bic.w	r3, r3, #7
 800886c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681a      	ldr	r2, [r3, #0]
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	3304      	adds	r3, #4
 8008876:	4619      	mov	r1, r3
 8008878:	4610      	mov	r0, r2
 800887a:	f000 fcdd 	bl	8009238 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	689b      	ldr	r3, [r3, #8]
 8008884:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	699b      	ldr	r3, [r3, #24]
 800888c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	6a1b      	ldr	r3, [r3, #32]
 8008894:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	697a      	ldr	r2, [r7, #20]
 800889c:	4313      	orrs	r3, r2
 800889e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80088a0:	693b      	ldr	r3, [r7, #16]
 80088a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80088a6:	f023 0303 	bic.w	r3, r3, #3
 80088aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	689a      	ldr	r2, [r3, #8]
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	699b      	ldr	r3, [r3, #24]
 80088b4:	021b      	lsls	r3, r3, #8
 80088b6:	4313      	orrs	r3, r2
 80088b8:	693a      	ldr	r2, [r7, #16]
 80088ba:	4313      	orrs	r3, r2
 80088bc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80088be:	693b      	ldr	r3, [r7, #16]
 80088c0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80088c4:	f023 030c 	bic.w	r3, r3, #12
 80088c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80088ca:	693b      	ldr	r3, [r7, #16]
 80088cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80088d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80088d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	68da      	ldr	r2, [r3, #12]
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	69db      	ldr	r3, [r3, #28]
 80088de:	021b      	lsls	r3, r3, #8
 80088e0:	4313      	orrs	r3, r2
 80088e2:	693a      	ldr	r2, [r7, #16]
 80088e4:	4313      	orrs	r3, r2
 80088e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	691b      	ldr	r3, [r3, #16]
 80088ec:	011a      	lsls	r2, r3, #4
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	6a1b      	ldr	r3, [r3, #32]
 80088f2:	031b      	lsls	r3, r3, #12
 80088f4:	4313      	orrs	r3, r2
 80088f6:	693a      	ldr	r2, [r7, #16]
 80088f8:	4313      	orrs	r3, r2
 80088fa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008902:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800890a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	685a      	ldr	r2, [r3, #4]
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	695b      	ldr	r3, [r3, #20]
 8008914:	011b      	lsls	r3, r3, #4
 8008916:	4313      	orrs	r3, r2
 8008918:	68fa      	ldr	r2, [r7, #12]
 800891a:	4313      	orrs	r3, r2
 800891c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	697a      	ldr	r2, [r7, #20]
 8008924:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	693a      	ldr	r2, [r7, #16]
 800892c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	68fa      	ldr	r2, [r7, #12]
 8008934:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2201      	movs	r2, #1
 800893a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2201      	movs	r2, #1
 8008942:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2201      	movs	r2, #1
 800894a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2201      	movs	r2, #1
 8008952:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2201      	movs	r2, #1
 800895a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2201      	movs	r2, #1
 8008962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008966:	2300      	movs	r3, #0
}
 8008968:	4618      	mov	r0, r3
 800896a:	3718      	adds	r7, #24
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}

08008970 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b084      	sub	sp, #16
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
 8008978:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008980:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008988:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008990:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008998:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d110      	bne.n	80089c2 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80089a0:	7bfb      	ldrb	r3, [r7, #15]
 80089a2:	2b01      	cmp	r3, #1
 80089a4:	d102      	bne.n	80089ac <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80089a6:	7b7b      	ldrb	r3, [r7, #13]
 80089a8:	2b01      	cmp	r3, #1
 80089aa:	d001      	beq.n	80089b0 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80089ac:	2301      	movs	r3, #1
 80089ae:	e089      	b.n	8008ac4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2202      	movs	r2, #2
 80089b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2202      	movs	r2, #2
 80089bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80089c0:	e031      	b.n	8008a26 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	2b04      	cmp	r3, #4
 80089c6:	d110      	bne.n	80089ea <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80089c8:	7bbb      	ldrb	r3, [r7, #14]
 80089ca:	2b01      	cmp	r3, #1
 80089cc:	d102      	bne.n	80089d4 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80089ce:	7b3b      	ldrb	r3, [r7, #12]
 80089d0:	2b01      	cmp	r3, #1
 80089d2:	d001      	beq.n	80089d8 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80089d4:	2301      	movs	r3, #1
 80089d6:	e075      	b.n	8008ac4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2202      	movs	r2, #2
 80089dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2202      	movs	r2, #2
 80089e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80089e8:	e01d      	b.n	8008a26 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80089ea:	7bfb      	ldrb	r3, [r7, #15]
 80089ec:	2b01      	cmp	r3, #1
 80089ee:	d108      	bne.n	8008a02 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80089f0:	7bbb      	ldrb	r3, [r7, #14]
 80089f2:	2b01      	cmp	r3, #1
 80089f4:	d105      	bne.n	8008a02 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80089f6:	7b7b      	ldrb	r3, [r7, #13]
 80089f8:	2b01      	cmp	r3, #1
 80089fa:	d102      	bne.n	8008a02 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80089fc:	7b3b      	ldrb	r3, [r7, #12]
 80089fe:	2b01      	cmp	r3, #1
 8008a00:	d001      	beq.n	8008a06 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8008a02:	2301      	movs	r3, #1
 8008a04:	e05e      	b.n	8008ac4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2202      	movs	r2, #2
 8008a0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2202      	movs	r2, #2
 8008a12:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2202      	movs	r2, #2
 8008a1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2202      	movs	r2, #2
 8008a22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d003      	beq.n	8008a34 <HAL_TIM_Encoder_Start_IT+0xc4>
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	2b04      	cmp	r3, #4
 8008a30:	d010      	beq.n	8008a54 <HAL_TIM_Encoder_Start_IT+0xe4>
 8008a32:	e01f      	b.n	8008a74 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	2201      	movs	r2, #1
 8008a3a:	2100      	movs	r1, #0
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	f001 f81d 	bl	8009a7c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	68da      	ldr	r2, [r3, #12]
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f042 0202 	orr.w	r2, r2, #2
 8008a50:	60da      	str	r2, [r3, #12]
      break;
 8008a52:	e02e      	b.n	8008ab2 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	2201      	movs	r2, #1
 8008a5a:	2104      	movs	r1, #4
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	f001 f80d 	bl	8009a7c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	68da      	ldr	r2, [r3, #12]
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f042 0204 	orr.w	r2, r2, #4
 8008a70:	60da      	str	r2, [r3, #12]
      break;
 8008a72:	e01e      	b.n	8008ab2 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	2201      	movs	r2, #1
 8008a7a:	2100      	movs	r1, #0
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	f000 fffd 	bl	8009a7c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	2201      	movs	r2, #1
 8008a88:	2104      	movs	r1, #4
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f000 fff6 	bl	8009a7c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	68da      	ldr	r2, [r3, #12]
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f042 0202 	orr.w	r2, r2, #2
 8008a9e:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	68da      	ldr	r2, [r3, #12]
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f042 0204 	orr.w	r2, r2, #4
 8008aae:	60da      	str	r2, [r3, #12]
      break;
 8008ab0:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	681a      	ldr	r2, [r3, #0]
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f042 0201 	orr.w	r2, r2, #1
 8008ac0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008ac2:	2300      	movs	r3, #0
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3710      	adds	r7, #16
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}

08008acc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b082      	sub	sp, #8
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	691b      	ldr	r3, [r3, #16]
 8008ada:	f003 0302 	and.w	r3, r3, #2
 8008ade:	2b02      	cmp	r3, #2
 8008ae0:	d122      	bne.n	8008b28 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	68db      	ldr	r3, [r3, #12]
 8008ae8:	f003 0302 	and.w	r3, r3, #2
 8008aec:	2b02      	cmp	r3, #2
 8008aee:	d11b      	bne.n	8008b28 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f06f 0202 	mvn.w	r2, #2
 8008af8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2201      	movs	r2, #1
 8008afe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	699b      	ldr	r3, [r3, #24]
 8008b06:	f003 0303 	and.w	r3, r3, #3
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d003      	beq.n	8008b16 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f7f9 f8bc 	bl	8001c8c <HAL_TIM_IC_CaptureCallback>
 8008b14:	e005      	b.n	8008b22 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f000 fb70 	bl	80091fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f000 fb77 	bl	8009210 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2200      	movs	r2, #0
 8008b26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	691b      	ldr	r3, [r3, #16]
 8008b2e:	f003 0304 	and.w	r3, r3, #4
 8008b32:	2b04      	cmp	r3, #4
 8008b34:	d122      	bne.n	8008b7c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	68db      	ldr	r3, [r3, #12]
 8008b3c:	f003 0304 	and.w	r3, r3, #4
 8008b40:	2b04      	cmp	r3, #4
 8008b42:	d11b      	bne.n	8008b7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f06f 0204 	mvn.w	r2, #4
 8008b4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2202      	movs	r2, #2
 8008b52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	699b      	ldr	r3, [r3, #24]
 8008b5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d003      	beq.n	8008b6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f7f9 f892 	bl	8001c8c <HAL_TIM_IC_CaptureCallback>
 8008b68:	e005      	b.n	8008b76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f000 fb46 	bl	80091fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f000 fb4d 	bl	8009210 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	691b      	ldr	r3, [r3, #16]
 8008b82:	f003 0308 	and.w	r3, r3, #8
 8008b86:	2b08      	cmp	r3, #8
 8008b88:	d122      	bne.n	8008bd0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	68db      	ldr	r3, [r3, #12]
 8008b90:	f003 0308 	and.w	r3, r3, #8
 8008b94:	2b08      	cmp	r3, #8
 8008b96:	d11b      	bne.n	8008bd0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f06f 0208 	mvn.w	r2, #8
 8008ba0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2204      	movs	r2, #4
 8008ba6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	69db      	ldr	r3, [r3, #28]
 8008bae:	f003 0303 	and.w	r3, r3, #3
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d003      	beq.n	8008bbe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f7f9 f868 	bl	8001c8c <HAL_TIM_IC_CaptureCallback>
 8008bbc:	e005      	b.n	8008bca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f000 fb1c 	bl	80091fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f000 fb23 	bl	8009210 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2200      	movs	r2, #0
 8008bce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	691b      	ldr	r3, [r3, #16]
 8008bd6:	f003 0310 	and.w	r3, r3, #16
 8008bda:	2b10      	cmp	r3, #16
 8008bdc:	d122      	bne.n	8008c24 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	68db      	ldr	r3, [r3, #12]
 8008be4:	f003 0310 	and.w	r3, r3, #16
 8008be8:	2b10      	cmp	r3, #16
 8008bea:	d11b      	bne.n	8008c24 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f06f 0210 	mvn.w	r2, #16
 8008bf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2208      	movs	r2, #8
 8008bfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	69db      	ldr	r3, [r3, #28]
 8008c02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d003      	beq.n	8008c12 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f7f9 f83e 	bl	8001c8c <HAL_TIM_IC_CaptureCallback>
 8008c10:	e005      	b.n	8008c1e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f000 faf2 	bl	80091fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f000 faf9 	bl	8009210 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2200      	movs	r2, #0
 8008c22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	691b      	ldr	r3, [r3, #16]
 8008c2a:	f003 0301 	and.w	r3, r3, #1
 8008c2e:	2b01      	cmp	r3, #1
 8008c30:	d10e      	bne.n	8008c50 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	68db      	ldr	r3, [r3, #12]
 8008c38:	f003 0301 	and.w	r3, r3, #1
 8008c3c:	2b01      	cmp	r3, #1
 8008c3e:	d107      	bne.n	8008c50 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f06f 0201 	mvn.w	r2, #1
 8008c48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f000 facc 	bl	80091e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	691b      	ldr	r3, [r3, #16]
 8008c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c5a:	2b80      	cmp	r3, #128	; 0x80
 8008c5c:	d10e      	bne.n	8008c7c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	68db      	ldr	r3, [r3, #12]
 8008c64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c68:	2b80      	cmp	r3, #128	; 0x80
 8008c6a:	d107      	bne.n	8008c7c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008c74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f001 f852 	bl	8009d20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	691b      	ldr	r3, [r3, #16]
 8008c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c8a:	d10e      	bne.n	8008caa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	68db      	ldr	r3, [r3, #12]
 8008c92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c96:	2b80      	cmp	r3, #128	; 0x80
 8008c98:	d107      	bne.n	8008caa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008ca2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f001 f845 	bl	8009d34 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	691b      	ldr	r3, [r3, #16]
 8008cb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cb4:	2b40      	cmp	r3, #64	; 0x40
 8008cb6:	d10e      	bne.n	8008cd6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	68db      	ldr	r3, [r3, #12]
 8008cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cc2:	2b40      	cmp	r3, #64	; 0x40
 8008cc4:	d107      	bne.n	8008cd6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008cce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f000 faa7 	bl	8009224 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	691b      	ldr	r3, [r3, #16]
 8008cdc:	f003 0320 	and.w	r3, r3, #32
 8008ce0:	2b20      	cmp	r3, #32
 8008ce2:	d10e      	bne.n	8008d02 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	68db      	ldr	r3, [r3, #12]
 8008cea:	f003 0320 	and.w	r3, r3, #32
 8008cee:	2b20      	cmp	r3, #32
 8008cf0:	d107      	bne.n	8008d02 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f06f 0220 	mvn.w	r2, #32
 8008cfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f001 f805 	bl	8009d0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	691b      	ldr	r3, [r3, #16]
 8008d08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008d0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d10:	d10f      	bne.n	8008d32 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	68db      	ldr	r3, [r3, #12]
 8008d18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008d1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d20:	d107      	bne.n	8008d32 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8008d2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f001 f80b 	bl	8009d48 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	691b      	ldr	r3, [r3, #16]
 8008d38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008d3c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008d40:	d10f      	bne.n	8008d62 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	68db      	ldr	r3, [r3, #12]
 8008d48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008d4c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008d50:	d107      	bne.n	8008d62 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8008d5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f000 fffd 	bl	8009d5c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	691b      	ldr	r3, [r3, #16]
 8008d68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008d70:	d10f      	bne.n	8008d92 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	68db      	ldr	r3, [r3, #12]
 8008d78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008d80:	d107      	bne.n	8008d92 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8008d8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f000 ffef 	bl	8009d70 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	691b      	ldr	r3, [r3, #16]
 8008d98:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008d9c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008da0:	d10f      	bne.n	8008dc2 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	68db      	ldr	r3, [r3, #12]
 8008da8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008dac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008db0:	d107      	bne.n	8008dc2 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8008dba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f000 ffe1 	bl	8009d84 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008dc2:	bf00      	nop
 8008dc4:	3708      	adds	r7, #8
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}
	...

08008dcc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b086      	sub	sp, #24
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	60f8      	str	r0, [r7, #12]
 8008dd4:	60b9      	str	r1, [r7, #8]
 8008dd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008dd8:	2300      	movs	r3, #0
 8008dda:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008de2:	2b01      	cmp	r3, #1
 8008de4:	d101      	bne.n	8008dea <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008de6:	2302      	movs	r3, #2
 8008de8:	e0ff      	b.n	8008fea <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	2201      	movs	r2, #1
 8008dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2b14      	cmp	r3, #20
 8008df6:	f200 80f0 	bhi.w	8008fda <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008dfa:	a201      	add	r2, pc, #4	; (adr r2, 8008e00 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e00:	08008e55 	.word	0x08008e55
 8008e04:	08008fdb 	.word	0x08008fdb
 8008e08:	08008fdb 	.word	0x08008fdb
 8008e0c:	08008fdb 	.word	0x08008fdb
 8008e10:	08008e95 	.word	0x08008e95
 8008e14:	08008fdb 	.word	0x08008fdb
 8008e18:	08008fdb 	.word	0x08008fdb
 8008e1c:	08008fdb 	.word	0x08008fdb
 8008e20:	08008ed7 	.word	0x08008ed7
 8008e24:	08008fdb 	.word	0x08008fdb
 8008e28:	08008fdb 	.word	0x08008fdb
 8008e2c:	08008fdb 	.word	0x08008fdb
 8008e30:	08008f17 	.word	0x08008f17
 8008e34:	08008fdb 	.word	0x08008fdb
 8008e38:	08008fdb 	.word	0x08008fdb
 8008e3c:	08008fdb 	.word	0x08008fdb
 8008e40:	08008f59 	.word	0x08008f59
 8008e44:	08008fdb 	.word	0x08008fdb
 8008e48:	08008fdb 	.word	0x08008fdb
 8008e4c:	08008fdb 	.word	0x08008fdb
 8008e50:	08008f99 	.word	0x08008f99
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	68b9      	ldr	r1, [r7, #8]
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f000 fa7c 	bl	8009358 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	699a      	ldr	r2, [r3, #24]
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f042 0208 	orr.w	r2, r2, #8
 8008e6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	699a      	ldr	r2, [r3, #24]
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f022 0204 	bic.w	r2, r2, #4
 8008e7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	6999      	ldr	r1, [r3, #24]
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	691a      	ldr	r2, [r3, #16]
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	430a      	orrs	r2, r1
 8008e90:	619a      	str	r2, [r3, #24]
      break;
 8008e92:	e0a5      	b.n	8008fe0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	68b9      	ldr	r1, [r7, #8]
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	f000 faec 	bl	8009478 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	699a      	ldr	r2, [r3, #24]
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008eae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	699a      	ldr	r2, [r3, #24]
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ebe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	6999      	ldr	r1, [r3, #24]
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	691b      	ldr	r3, [r3, #16]
 8008eca:	021a      	lsls	r2, r3, #8
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	430a      	orrs	r2, r1
 8008ed2:	619a      	str	r2, [r3, #24]
      break;
 8008ed4:	e084      	b.n	8008fe0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	68b9      	ldr	r1, [r7, #8]
 8008edc:	4618      	mov	r0, r3
 8008ede:	f000 fb55 	bl	800958c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	69da      	ldr	r2, [r3, #28]
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f042 0208 	orr.w	r2, r2, #8
 8008ef0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	69da      	ldr	r2, [r3, #28]
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f022 0204 	bic.w	r2, r2, #4
 8008f00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	69d9      	ldr	r1, [r3, #28]
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	691a      	ldr	r2, [r3, #16]
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	430a      	orrs	r2, r1
 8008f12:	61da      	str	r2, [r3, #28]
      break;
 8008f14:	e064      	b.n	8008fe0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	68b9      	ldr	r1, [r7, #8]
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	f000 fbbd 	bl	800969c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	69da      	ldr	r2, [r3, #28]
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008f30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	69da      	ldr	r2, [r3, #28]
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	69d9      	ldr	r1, [r3, #28]
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	691b      	ldr	r3, [r3, #16]
 8008f4c:	021a      	lsls	r2, r3, #8
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	430a      	orrs	r2, r1
 8008f54:	61da      	str	r2, [r3, #28]
      break;
 8008f56:	e043      	b.n	8008fe0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	68b9      	ldr	r1, [r7, #8]
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f000 fc26 	bl	80097b0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f042 0208 	orr.w	r2, r2, #8
 8008f72:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f022 0204 	bic.w	r2, r2, #4
 8008f82:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	691a      	ldr	r2, [r3, #16]
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	430a      	orrs	r2, r1
 8008f94:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8008f96:	e023      	b.n	8008fe0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	68b9      	ldr	r1, [r7, #8]
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f000 fc6a 	bl	8009878 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008fb2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008fc2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008fca:	68bb      	ldr	r3, [r7, #8]
 8008fcc:	691b      	ldr	r3, [r3, #16]
 8008fce:	021a      	lsls	r2, r3, #8
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	430a      	orrs	r2, r1
 8008fd6:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8008fd8:	e002      	b.n	8008fe0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008fda:	2301      	movs	r3, #1
 8008fdc:	75fb      	strb	r3, [r7, #23]
      break;
 8008fde:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008fe8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fea:	4618      	mov	r0, r3
 8008fec:	3718      	adds	r7, #24
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}
 8008ff2:	bf00      	nop

08008ff4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b084      	sub	sp, #16
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
 8008ffc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008ffe:	2300      	movs	r3, #0
 8009000:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009008:	2b01      	cmp	r3, #1
 800900a:	d101      	bne.n	8009010 <HAL_TIM_ConfigClockSource+0x1c>
 800900c:	2302      	movs	r3, #2
 800900e:	e0de      	b.n	80091ce <HAL_TIM_ConfigClockSource+0x1da>
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2201      	movs	r2, #1
 8009014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2202      	movs	r2, #2
 800901c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	689b      	ldr	r3, [r3, #8]
 8009026:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800902e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009032:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800903a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	68ba      	ldr	r2, [r7, #8]
 8009042:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	4a63      	ldr	r2, [pc, #396]	; (80091d8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800904a:	4293      	cmp	r3, r2
 800904c:	f000 80a9 	beq.w	80091a2 <HAL_TIM_ConfigClockSource+0x1ae>
 8009050:	4a61      	ldr	r2, [pc, #388]	; (80091d8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009052:	4293      	cmp	r3, r2
 8009054:	f200 80ae 	bhi.w	80091b4 <HAL_TIM_ConfigClockSource+0x1c0>
 8009058:	4a60      	ldr	r2, [pc, #384]	; (80091dc <HAL_TIM_ConfigClockSource+0x1e8>)
 800905a:	4293      	cmp	r3, r2
 800905c:	f000 80a1 	beq.w	80091a2 <HAL_TIM_ConfigClockSource+0x1ae>
 8009060:	4a5e      	ldr	r2, [pc, #376]	; (80091dc <HAL_TIM_ConfigClockSource+0x1e8>)
 8009062:	4293      	cmp	r3, r2
 8009064:	f200 80a6 	bhi.w	80091b4 <HAL_TIM_ConfigClockSource+0x1c0>
 8009068:	4a5d      	ldr	r2, [pc, #372]	; (80091e0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800906a:	4293      	cmp	r3, r2
 800906c:	f000 8099 	beq.w	80091a2 <HAL_TIM_ConfigClockSource+0x1ae>
 8009070:	4a5b      	ldr	r2, [pc, #364]	; (80091e0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009072:	4293      	cmp	r3, r2
 8009074:	f200 809e 	bhi.w	80091b4 <HAL_TIM_ConfigClockSource+0x1c0>
 8009078:	4a5a      	ldr	r2, [pc, #360]	; (80091e4 <HAL_TIM_ConfigClockSource+0x1f0>)
 800907a:	4293      	cmp	r3, r2
 800907c:	f000 8091 	beq.w	80091a2 <HAL_TIM_ConfigClockSource+0x1ae>
 8009080:	4a58      	ldr	r2, [pc, #352]	; (80091e4 <HAL_TIM_ConfigClockSource+0x1f0>)
 8009082:	4293      	cmp	r3, r2
 8009084:	f200 8096 	bhi.w	80091b4 <HAL_TIM_ConfigClockSource+0x1c0>
 8009088:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800908c:	f000 8089 	beq.w	80091a2 <HAL_TIM_ConfigClockSource+0x1ae>
 8009090:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009094:	f200 808e 	bhi.w	80091b4 <HAL_TIM_ConfigClockSource+0x1c0>
 8009098:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800909c:	d03e      	beq.n	800911c <HAL_TIM_ConfigClockSource+0x128>
 800909e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090a2:	f200 8087 	bhi.w	80091b4 <HAL_TIM_ConfigClockSource+0x1c0>
 80090a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090aa:	f000 8086 	beq.w	80091ba <HAL_TIM_ConfigClockSource+0x1c6>
 80090ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090b2:	d87f      	bhi.n	80091b4 <HAL_TIM_ConfigClockSource+0x1c0>
 80090b4:	2b70      	cmp	r3, #112	; 0x70
 80090b6:	d01a      	beq.n	80090ee <HAL_TIM_ConfigClockSource+0xfa>
 80090b8:	2b70      	cmp	r3, #112	; 0x70
 80090ba:	d87b      	bhi.n	80091b4 <HAL_TIM_ConfigClockSource+0x1c0>
 80090bc:	2b60      	cmp	r3, #96	; 0x60
 80090be:	d050      	beq.n	8009162 <HAL_TIM_ConfigClockSource+0x16e>
 80090c0:	2b60      	cmp	r3, #96	; 0x60
 80090c2:	d877      	bhi.n	80091b4 <HAL_TIM_ConfigClockSource+0x1c0>
 80090c4:	2b50      	cmp	r3, #80	; 0x50
 80090c6:	d03c      	beq.n	8009142 <HAL_TIM_ConfigClockSource+0x14e>
 80090c8:	2b50      	cmp	r3, #80	; 0x50
 80090ca:	d873      	bhi.n	80091b4 <HAL_TIM_ConfigClockSource+0x1c0>
 80090cc:	2b40      	cmp	r3, #64	; 0x40
 80090ce:	d058      	beq.n	8009182 <HAL_TIM_ConfigClockSource+0x18e>
 80090d0:	2b40      	cmp	r3, #64	; 0x40
 80090d2:	d86f      	bhi.n	80091b4 <HAL_TIM_ConfigClockSource+0x1c0>
 80090d4:	2b30      	cmp	r3, #48	; 0x30
 80090d6:	d064      	beq.n	80091a2 <HAL_TIM_ConfigClockSource+0x1ae>
 80090d8:	2b30      	cmp	r3, #48	; 0x30
 80090da:	d86b      	bhi.n	80091b4 <HAL_TIM_ConfigClockSource+0x1c0>
 80090dc:	2b20      	cmp	r3, #32
 80090de:	d060      	beq.n	80091a2 <HAL_TIM_ConfigClockSource+0x1ae>
 80090e0:	2b20      	cmp	r3, #32
 80090e2:	d867      	bhi.n	80091b4 <HAL_TIM_ConfigClockSource+0x1c0>
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d05c      	beq.n	80091a2 <HAL_TIM_ConfigClockSource+0x1ae>
 80090e8:	2b10      	cmp	r3, #16
 80090ea:	d05a      	beq.n	80091a2 <HAL_TIM_ConfigClockSource+0x1ae>
 80090ec:	e062      	b.n	80091b4 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6818      	ldr	r0, [r3, #0]
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	6899      	ldr	r1, [r3, #8]
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	685a      	ldr	r2, [r3, #4]
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	68db      	ldr	r3, [r3, #12]
 80090fe:	f000 fc9d 	bl	8009a3c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	689b      	ldr	r3, [r3, #8]
 8009108:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009110:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	68ba      	ldr	r2, [r7, #8]
 8009118:	609a      	str	r2, [r3, #8]
      break;
 800911a:	e04f      	b.n	80091bc <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	6818      	ldr	r0, [r3, #0]
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	6899      	ldr	r1, [r3, #8]
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	685a      	ldr	r2, [r3, #4]
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	68db      	ldr	r3, [r3, #12]
 800912c:	f000 fc86 	bl	8009a3c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	689a      	ldr	r2, [r3, #8]
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800913e:	609a      	str	r2, [r3, #8]
      break;
 8009140:	e03c      	b.n	80091bc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6818      	ldr	r0, [r3, #0]
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	6859      	ldr	r1, [r3, #4]
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	68db      	ldr	r3, [r3, #12]
 800914e:	461a      	mov	r2, r3
 8009150:	f000 fbf8 	bl	8009944 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	2150      	movs	r1, #80	; 0x50
 800915a:	4618      	mov	r0, r3
 800915c:	f000 fc51 	bl	8009a02 <TIM_ITRx_SetConfig>
      break;
 8009160:	e02c      	b.n	80091bc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	6818      	ldr	r0, [r3, #0]
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	6859      	ldr	r1, [r3, #4]
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	68db      	ldr	r3, [r3, #12]
 800916e:	461a      	mov	r2, r3
 8009170:	f000 fc17 	bl	80099a2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	2160      	movs	r1, #96	; 0x60
 800917a:	4618      	mov	r0, r3
 800917c:	f000 fc41 	bl	8009a02 <TIM_ITRx_SetConfig>
      break;
 8009180:	e01c      	b.n	80091bc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6818      	ldr	r0, [r3, #0]
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	6859      	ldr	r1, [r3, #4]
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	68db      	ldr	r3, [r3, #12]
 800918e:	461a      	mov	r2, r3
 8009190:	f000 fbd8 	bl	8009944 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	2140      	movs	r1, #64	; 0x40
 800919a:	4618      	mov	r0, r3
 800919c:	f000 fc31 	bl	8009a02 <TIM_ITRx_SetConfig>
      break;
 80091a0:	e00c      	b.n	80091bc <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681a      	ldr	r2, [r3, #0]
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	4619      	mov	r1, r3
 80091ac:	4610      	mov	r0, r2
 80091ae:	f000 fc28 	bl	8009a02 <TIM_ITRx_SetConfig>
      break;
 80091b2:	e003      	b.n	80091bc <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80091b4:	2301      	movs	r3, #1
 80091b6:	73fb      	strb	r3, [r7, #15]
      break;
 80091b8:	e000      	b.n	80091bc <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80091ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2201      	movs	r2, #1
 80091c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2200      	movs	r2, #0
 80091c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80091cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80091ce:	4618      	mov	r0, r3
 80091d0:	3710      	adds	r7, #16
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}
 80091d6:	bf00      	nop
 80091d8:	00100070 	.word	0x00100070
 80091dc:	00100040 	.word	0x00100040
 80091e0:	00100030 	.word	0x00100030
 80091e4:	00100020 	.word	0x00100020

080091e8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80091e8:	b480      	push	{r7}
 80091ea:	b083      	sub	sp, #12
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80091f0:	bf00      	nop
 80091f2:	370c      	adds	r7, #12
 80091f4:	46bd      	mov	sp, r7
 80091f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fa:	4770      	bx	lr

080091fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80091fc:	b480      	push	{r7}
 80091fe:	b083      	sub	sp, #12
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009204:	bf00      	nop
 8009206:	370c      	adds	r7, #12
 8009208:	46bd      	mov	sp, r7
 800920a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920e:	4770      	bx	lr

08009210 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009210:	b480      	push	{r7}
 8009212:	b083      	sub	sp, #12
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009218:	bf00      	nop
 800921a:	370c      	adds	r7, #12
 800921c:	46bd      	mov	sp, r7
 800921e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009222:	4770      	bx	lr

08009224 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009224:	b480      	push	{r7}
 8009226:	b083      	sub	sp, #12
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800922c:	bf00      	nop
 800922e:	370c      	adds	r7, #12
 8009230:	46bd      	mov	sp, r7
 8009232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009236:	4770      	bx	lr

08009238 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009238:	b480      	push	{r7}
 800923a:	b085      	sub	sp, #20
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
 8009240:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	4a3c      	ldr	r2, [pc, #240]	; (800933c <TIM_Base_SetConfig+0x104>)
 800924c:	4293      	cmp	r3, r2
 800924e:	d00f      	beq.n	8009270 <TIM_Base_SetConfig+0x38>
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009256:	d00b      	beq.n	8009270 <TIM_Base_SetConfig+0x38>
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	4a39      	ldr	r2, [pc, #228]	; (8009340 <TIM_Base_SetConfig+0x108>)
 800925c:	4293      	cmp	r3, r2
 800925e:	d007      	beq.n	8009270 <TIM_Base_SetConfig+0x38>
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	4a38      	ldr	r2, [pc, #224]	; (8009344 <TIM_Base_SetConfig+0x10c>)
 8009264:	4293      	cmp	r3, r2
 8009266:	d003      	beq.n	8009270 <TIM_Base_SetConfig+0x38>
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	4a37      	ldr	r2, [pc, #220]	; (8009348 <TIM_Base_SetConfig+0x110>)
 800926c:	4293      	cmp	r3, r2
 800926e:	d108      	bne.n	8009282 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009276:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	685b      	ldr	r3, [r3, #4]
 800927c:	68fa      	ldr	r2, [r7, #12]
 800927e:	4313      	orrs	r3, r2
 8009280:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	4a2d      	ldr	r2, [pc, #180]	; (800933c <TIM_Base_SetConfig+0x104>)
 8009286:	4293      	cmp	r3, r2
 8009288:	d01b      	beq.n	80092c2 <TIM_Base_SetConfig+0x8a>
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009290:	d017      	beq.n	80092c2 <TIM_Base_SetConfig+0x8a>
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	4a2a      	ldr	r2, [pc, #168]	; (8009340 <TIM_Base_SetConfig+0x108>)
 8009296:	4293      	cmp	r3, r2
 8009298:	d013      	beq.n	80092c2 <TIM_Base_SetConfig+0x8a>
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	4a29      	ldr	r2, [pc, #164]	; (8009344 <TIM_Base_SetConfig+0x10c>)
 800929e:	4293      	cmp	r3, r2
 80092a0:	d00f      	beq.n	80092c2 <TIM_Base_SetConfig+0x8a>
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	4a28      	ldr	r2, [pc, #160]	; (8009348 <TIM_Base_SetConfig+0x110>)
 80092a6:	4293      	cmp	r3, r2
 80092a8:	d00b      	beq.n	80092c2 <TIM_Base_SetConfig+0x8a>
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	4a27      	ldr	r2, [pc, #156]	; (800934c <TIM_Base_SetConfig+0x114>)
 80092ae:	4293      	cmp	r3, r2
 80092b0:	d007      	beq.n	80092c2 <TIM_Base_SetConfig+0x8a>
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	4a26      	ldr	r2, [pc, #152]	; (8009350 <TIM_Base_SetConfig+0x118>)
 80092b6:	4293      	cmp	r3, r2
 80092b8:	d003      	beq.n	80092c2 <TIM_Base_SetConfig+0x8a>
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	4a25      	ldr	r2, [pc, #148]	; (8009354 <TIM_Base_SetConfig+0x11c>)
 80092be:	4293      	cmp	r3, r2
 80092c0:	d108      	bne.n	80092d4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80092c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	68db      	ldr	r3, [r3, #12]
 80092ce:	68fa      	ldr	r2, [r7, #12]
 80092d0:	4313      	orrs	r3, r2
 80092d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	695b      	ldr	r3, [r3, #20]
 80092de:	4313      	orrs	r3, r2
 80092e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	68fa      	ldr	r2, [r7, #12]
 80092e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	689a      	ldr	r2, [r3, #8]
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	681a      	ldr	r2, [r3, #0]
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	4a10      	ldr	r2, [pc, #64]	; (800933c <TIM_Base_SetConfig+0x104>)
 80092fc:	4293      	cmp	r3, r2
 80092fe:	d00f      	beq.n	8009320 <TIM_Base_SetConfig+0xe8>
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	4a11      	ldr	r2, [pc, #68]	; (8009348 <TIM_Base_SetConfig+0x110>)
 8009304:	4293      	cmp	r3, r2
 8009306:	d00b      	beq.n	8009320 <TIM_Base_SetConfig+0xe8>
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	4a10      	ldr	r2, [pc, #64]	; (800934c <TIM_Base_SetConfig+0x114>)
 800930c:	4293      	cmp	r3, r2
 800930e:	d007      	beq.n	8009320 <TIM_Base_SetConfig+0xe8>
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	4a0f      	ldr	r2, [pc, #60]	; (8009350 <TIM_Base_SetConfig+0x118>)
 8009314:	4293      	cmp	r3, r2
 8009316:	d003      	beq.n	8009320 <TIM_Base_SetConfig+0xe8>
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	4a0e      	ldr	r2, [pc, #56]	; (8009354 <TIM_Base_SetConfig+0x11c>)
 800931c:	4293      	cmp	r3, r2
 800931e:	d103      	bne.n	8009328 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	691a      	ldr	r2, [r3, #16]
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2201      	movs	r2, #1
 800932c:	615a      	str	r2, [r3, #20]
}
 800932e:	bf00      	nop
 8009330:	3714      	adds	r7, #20
 8009332:	46bd      	mov	sp, r7
 8009334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009338:	4770      	bx	lr
 800933a:	bf00      	nop
 800933c:	40012c00 	.word	0x40012c00
 8009340:	40000400 	.word	0x40000400
 8009344:	40000800 	.word	0x40000800
 8009348:	40013400 	.word	0x40013400
 800934c:	40014000 	.word	0x40014000
 8009350:	40014400 	.word	0x40014400
 8009354:	40014800 	.word	0x40014800

08009358 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009358:	b480      	push	{r7}
 800935a:	b087      	sub	sp, #28
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
 8009360:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6a1b      	ldr	r3, [r3, #32]
 8009366:	f023 0201 	bic.w	r2, r3, #1
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6a1b      	ldr	r3, [r3, #32]
 8009372:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	685b      	ldr	r3, [r3, #4]
 8009378:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	699b      	ldr	r3, [r3, #24]
 800937e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800938a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	f023 0303 	bic.w	r3, r3, #3
 8009392:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	68fa      	ldr	r2, [r7, #12]
 800939a:	4313      	orrs	r3, r2
 800939c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800939e:	697b      	ldr	r3, [r7, #20]
 80093a0:	f023 0302 	bic.w	r3, r3, #2
 80093a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	689b      	ldr	r3, [r3, #8]
 80093aa:	697a      	ldr	r2, [r7, #20]
 80093ac:	4313      	orrs	r3, r2
 80093ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	4a2c      	ldr	r2, [pc, #176]	; (8009464 <TIM_OC1_SetConfig+0x10c>)
 80093b4:	4293      	cmp	r3, r2
 80093b6:	d00f      	beq.n	80093d8 <TIM_OC1_SetConfig+0x80>
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	4a2b      	ldr	r2, [pc, #172]	; (8009468 <TIM_OC1_SetConfig+0x110>)
 80093bc:	4293      	cmp	r3, r2
 80093be:	d00b      	beq.n	80093d8 <TIM_OC1_SetConfig+0x80>
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	4a2a      	ldr	r2, [pc, #168]	; (800946c <TIM_OC1_SetConfig+0x114>)
 80093c4:	4293      	cmp	r3, r2
 80093c6:	d007      	beq.n	80093d8 <TIM_OC1_SetConfig+0x80>
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	4a29      	ldr	r2, [pc, #164]	; (8009470 <TIM_OC1_SetConfig+0x118>)
 80093cc:	4293      	cmp	r3, r2
 80093ce:	d003      	beq.n	80093d8 <TIM_OC1_SetConfig+0x80>
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	4a28      	ldr	r2, [pc, #160]	; (8009474 <TIM_OC1_SetConfig+0x11c>)
 80093d4:	4293      	cmp	r3, r2
 80093d6:	d10c      	bne.n	80093f2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80093d8:	697b      	ldr	r3, [r7, #20]
 80093da:	f023 0308 	bic.w	r3, r3, #8
 80093de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	68db      	ldr	r3, [r3, #12]
 80093e4:	697a      	ldr	r2, [r7, #20]
 80093e6:	4313      	orrs	r3, r2
 80093e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	f023 0304 	bic.w	r3, r3, #4
 80093f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	4a1b      	ldr	r2, [pc, #108]	; (8009464 <TIM_OC1_SetConfig+0x10c>)
 80093f6:	4293      	cmp	r3, r2
 80093f8:	d00f      	beq.n	800941a <TIM_OC1_SetConfig+0xc2>
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	4a1a      	ldr	r2, [pc, #104]	; (8009468 <TIM_OC1_SetConfig+0x110>)
 80093fe:	4293      	cmp	r3, r2
 8009400:	d00b      	beq.n	800941a <TIM_OC1_SetConfig+0xc2>
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	4a19      	ldr	r2, [pc, #100]	; (800946c <TIM_OC1_SetConfig+0x114>)
 8009406:	4293      	cmp	r3, r2
 8009408:	d007      	beq.n	800941a <TIM_OC1_SetConfig+0xc2>
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	4a18      	ldr	r2, [pc, #96]	; (8009470 <TIM_OC1_SetConfig+0x118>)
 800940e:	4293      	cmp	r3, r2
 8009410:	d003      	beq.n	800941a <TIM_OC1_SetConfig+0xc2>
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	4a17      	ldr	r2, [pc, #92]	; (8009474 <TIM_OC1_SetConfig+0x11c>)
 8009416:	4293      	cmp	r3, r2
 8009418:	d111      	bne.n	800943e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800941a:	693b      	ldr	r3, [r7, #16]
 800941c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009420:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009422:	693b      	ldr	r3, [r7, #16]
 8009424:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009428:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	695b      	ldr	r3, [r3, #20]
 800942e:	693a      	ldr	r2, [r7, #16]
 8009430:	4313      	orrs	r3, r2
 8009432:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	699b      	ldr	r3, [r3, #24]
 8009438:	693a      	ldr	r2, [r7, #16]
 800943a:	4313      	orrs	r3, r2
 800943c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	693a      	ldr	r2, [r7, #16]
 8009442:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	68fa      	ldr	r2, [r7, #12]
 8009448:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	685a      	ldr	r2, [r3, #4]
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	697a      	ldr	r2, [r7, #20]
 8009456:	621a      	str	r2, [r3, #32]
}
 8009458:	bf00      	nop
 800945a:	371c      	adds	r7, #28
 800945c:	46bd      	mov	sp, r7
 800945e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009462:	4770      	bx	lr
 8009464:	40012c00 	.word	0x40012c00
 8009468:	40013400 	.word	0x40013400
 800946c:	40014000 	.word	0x40014000
 8009470:	40014400 	.word	0x40014400
 8009474:	40014800 	.word	0x40014800

08009478 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009478:	b480      	push	{r7}
 800947a:	b087      	sub	sp, #28
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
 8009480:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6a1b      	ldr	r3, [r3, #32]
 8009486:	f023 0210 	bic.w	r2, r3, #16
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6a1b      	ldr	r3, [r3, #32]
 8009492:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	685b      	ldr	r3, [r3, #4]
 8009498:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	699b      	ldr	r3, [r3, #24]
 800949e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80094a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80094aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80094b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	021b      	lsls	r3, r3, #8
 80094ba:	68fa      	ldr	r2, [r7, #12]
 80094bc:	4313      	orrs	r3, r2
 80094be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80094c0:	697b      	ldr	r3, [r7, #20]
 80094c2:	f023 0320 	bic.w	r3, r3, #32
 80094c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	689b      	ldr	r3, [r3, #8]
 80094cc:	011b      	lsls	r3, r3, #4
 80094ce:	697a      	ldr	r2, [r7, #20]
 80094d0:	4313      	orrs	r3, r2
 80094d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	4a28      	ldr	r2, [pc, #160]	; (8009578 <TIM_OC2_SetConfig+0x100>)
 80094d8:	4293      	cmp	r3, r2
 80094da:	d003      	beq.n	80094e4 <TIM_OC2_SetConfig+0x6c>
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	4a27      	ldr	r2, [pc, #156]	; (800957c <TIM_OC2_SetConfig+0x104>)
 80094e0:	4293      	cmp	r3, r2
 80094e2:	d10d      	bne.n	8009500 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80094e4:	697b      	ldr	r3, [r7, #20]
 80094e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80094ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	68db      	ldr	r3, [r3, #12]
 80094f0:	011b      	lsls	r3, r3, #4
 80094f2:	697a      	ldr	r2, [r7, #20]
 80094f4:	4313      	orrs	r3, r2
 80094f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80094f8:	697b      	ldr	r3, [r7, #20]
 80094fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80094fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	4a1d      	ldr	r2, [pc, #116]	; (8009578 <TIM_OC2_SetConfig+0x100>)
 8009504:	4293      	cmp	r3, r2
 8009506:	d00f      	beq.n	8009528 <TIM_OC2_SetConfig+0xb0>
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	4a1c      	ldr	r2, [pc, #112]	; (800957c <TIM_OC2_SetConfig+0x104>)
 800950c:	4293      	cmp	r3, r2
 800950e:	d00b      	beq.n	8009528 <TIM_OC2_SetConfig+0xb0>
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	4a1b      	ldr	r2, [pc, #108]	; (8009580 <TIM_OC2_SetConfig+0x108>)
 8009514:	4293      	cmp	r3, r2
 8009516:	d007      	beq.n	8009528 <TIM_OC2_SetConfig+0xb0>
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	4a1a      	ldr	r2, [pc, #104]	; (8009584 <TIM_OC2_SetConfig+0x10c>)
 800951c:	4293      	cmp	r3, r2
 800951e:	d003      	beq.n	8009528 <TIM_OC2_SetConfig+0xb0>
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	4a19      	ldr	r2, [pc, #100]	; (8009588 <TIM_OC2_SetConfig+0x110>)
 8009524:	4293      	cmp	r3, r2
 8009526:	d113      	bne.n	8009550 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009528:	693b      	ldr	r3, [r7, #16]
 800952a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800952e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009530:	693b      	ldr	r3, [r7, #16]
 8009532:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009536:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	695b      	ldr	r3, [r3, #20]
 800953c:	009b      	lsls	r3, r3, #2
 800953e:	693a      	ldr	r2, [r7, #16]
 8009540:	4313      	orrs	r3, r2
 8009542:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	699b      	ldr	r3, [r3, #24]
 8009548:	009b      	lsls	r3, r3, #2
 800954a:	693a      	ldr	r2, [r7, #16]
 800954c:	4313      	orrs	r3, r2
 800954e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	693a      	ldr	r2, [r7, #16]
 8009554:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	68fa      	ldr	r2, [r7, #12]
 800955a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	685a      	ldr	r2, [r3, #4]
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	697a      	ldr	r2, [r7, #20]
 8009568:	621a      	str	r2, [r3, #32]
}
 800956a:	bf00      	nop
 800956c:	371c      	adds	r7, #28
 800956e:	46bd      	mov	sp, r7
 8009570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009574:	4770      	bx	lr
 8009576:	bf00      	nop
 8009578:	40012c00 	.word	0x40012c00
 800957c:	40013400 	.word	0x40013400
 8009580:	40014000 	.word	0x40014000
 8009584:	40014400 	.word	0x40014400
 8009588:	40014800 	.word	0x40014800

0800958c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800958c:	b480      	push	{r7}
 800958e:	b087      	sub	sp, #28
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
 8009594:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	6a1b      	ldr	r3, [r3, #32]
 800959a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	6a1b      	ldr	r3, [r3, #32]
 80095a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	685b      	ldr	r3, [r3, #4]
 80095ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	69db      	ldr	r3, [r3, #28]
 80095b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80095ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	f023 0303 	bic.w	r3, r3, #3
 80095c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	68fa      	ldr	r2, [r7, #12]
 80095ce:	4313      	orrs	r3, r2
 80095d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80095d2:	697b      	ldr	r3, [r7, #20]
 80095d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80095d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	689b      	ldr	r3, [r3, #8]
 80095de:	021b      	lsls	r3, r3, #8
 80095e0:	697a      	ldr	r2, [r7, #20]
 80095e2:	4313      	orrs	r3, r2
 80095e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	4a27      	ldr	r2, [pc, #156]	; (8009688 <TIM_OC3_SetConfig+0xfc>)
 80095ea:	4293      	cmp	r3, r2
 80095ec:	d003      	beq.n	80095f6 <TIM_OC3_SetConfig+0x6a>
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	4a26      	ldr	r2, [pc, #152]	; (800968c <TIM_OC3_SetConfig+0x100>)
 80095f2:	4293      	cmp	r3, r2
 80095f4:	d10d      	bne.n	8009612 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80095f6:	697b      	ldr	r3, [r7, #20]
 80095f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80095fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	68db      	ldr	r3, [r3, #12]
 8009602:	021b      	lsls	r3, r3, #8
 8009604:	697a      	ldr	r2, [r7, #20]
 8009606:	4313      	orrs	r3, r2
 8009608:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800960a:	697b      	ldr	r3, [r7, #20]
 800960c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009610:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	4a1c      	ldr	r2, [pc, #112]	; (8009688 <TIM_OC3_SetConfig+0xfc>)
 8009616:	4293      	cmp	r3, r2
 8009618:	d00f      	beq.n	800963a <TIM_OC3_SetConfig+0xae>
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	4a1b      	ldr	r2, [pc, #108]	; (800968c <TIM_OC3_SetConfig+0x100>)
 800961e:	4293      	cmp	r3, r2
 8009620:	d00b      	beq.n	800963a <TIM_OC3_SetConfig+0xae>
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	4a1a      	ldr	r2, [pc, #104]	; (8009690 <TIM_OC3_SetConfig+0x104>)
 8009626:	4293      	cmp	r3, r2
 8009628:	d007      	beq.n	800963a <TIM_OC3_SetConfig+0xae>
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	4a19      	ldr	r2, [pc, #100]	; (8009694 <TIM_OC3_SetConfig+0x108>)
 800962e:	4293      	cmp	r3, r2
 8009630:	d003      	beq.n	800963a <TIM_OC3_SetConfig+0xae>
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	4a18      	ldr	r2, [pc, #96]	; (8009698 <TIM_OC3_SetConfig+0x10c>)
 8009636:	4293      	cmp	r3, r2
 8009638:	d113      	bne.n	8009662 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800963a:	693b      	ldr	r3, [r7, #16]
 800963c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009640:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009642:	693b      	ldr	r3, [r7, #16]
 8009644:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009648:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	695b      	ldr	r3, [r3, #20]
 800964e:	011b      	lsls	r3, r3, #4
 8009650:	693a      	ldr	r2, [r7, #16]
 8009652:	4313      	orrs	r3, r2
 8009654:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	699b      	ldr	r3, [r3, #24]
 800965a:	011b      	lsls	r3, r3, #4
 800965c:	693a      	ldr	r2, [r7, #16]
 800965e:	4313      	orrs	r3, r2
 8009660:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	693a      	ldr	r2, [r7, #16]
 8009666:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	68fa      	ldr	r2, [r7, #12]
 800966c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	685a      	ldr	r2, [r3, #4]
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	697a      	ldr	r2, [r7, #20]
 800967a:	621a      	str	r2, [r3, #32]
}
 800967c:	bf00      	nop
 800967e:	371c      	adds	r7, #28
 8009680:	46bd      	mov	sp, r7
 8009682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009686:	4770      	bx	lr
 8009688:	40012c00 	.word	0x40012c00
 800968c:	40013400 	.word	0x40013400
 8009690:	40014000 	.word	0x40014000
 8009694:	40014400 	.word	0x40014400
 8009698:	40014800 	.word	0x40014800

0800969c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800969c:	b480      	push	{r7}
 800969e:	b087      	sub	sp, #28
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
 80096a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6a1b      	ldr	r3, [r3, #32]
 80096aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6a1b      	ldr	r3, [r3, #32]
 80096b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	685b      	ldr	r3, [r3, #4]
 80096bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	69db      	ldr	r3, [r3, #28]
 80096c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80096ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80096ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80096d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	021b      	lsls	r3, r3, #8
 80096de:	68fa      	ldr	r2, [r7, #12]
 80096e0:	4313      	orrs	r3, r2
 80096e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80096e4:	697b      	ldr	r3, [r7, #20]
 80096e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80096ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	689b      	ldr	r3, [r3, #8]
 80096f0:	031b      	lsls	r3, r3, #12
 80096f2:	697a      	ldr	r2, [r7, #20]
 80096f4:	4313      	orrs	r3, r2
 80096f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	4a28      	ldr	r2, [pc, #160]	; (800979c <TIM_OC4_SetConfig+0x100>)
 80096fc:	4293      	cmp	r3, r2
 80096fe:	d003      	beq.n	8009708 <TIM_OC4_SetConfig+0x6c>
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	4a27      	ldr	r2, [pc, #156]	; (80097a0 <TIM_OC4_SetConfig+0x104>)
 8009704:	4293      	cmp	r3, r2
 8009706:	d10d      	bne.n	8009724 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8009708:	697b      	ldr	r3, [r7, #20]
 800970a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800970e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	68db      	ldr	r3, [r3, #12]
 8009714:	031b      	lsls	r3, r3, #12
 8009716:	697a      	ldr	r2, [r7, #20]
 8009718:	4313      	orrs	r3, r2
 800971a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009722:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	4a1d      	ldr	r2, [pc, #116]	; (800979c <TIM_OC4_SetConfig+0x100>)
 8009728:	4293      	cmp	r3, r2
 800972a:	d00f      	beq.n	800974c <TIM_OC4_SetConfig+0xb0>
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	4a1c      	ldr	r2, [pc, #112]	; (80097a0 <TIM_OC4_SetConfig+0x104>)
 8009730:	4293      	cmp	r3, r2
 8009732:	d00b      	beq.n	800974c <TIM_OC4_SetConfig+0xb0>
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	4a1b      	ldr	r2, [pc, #108]	; (80097a4 <TIM_OC4_SetConfig+0x108>)
 8009738:	4293      	cmp	r3, r2
 800973a:	d007      	beq.n	800974c <TIM_OC4_SetConfig+0xb0>
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	4a1a      	ldr	r2, [pc, #104]	; (80097a8 <TIM_OC4_SetConfig+0x10c>)
 8009740:	4293      	cmp	r3, r2
 8009742:	d003      	beq.n	800974c <TIM_OC4_SetConfig+0xb0>
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	4a19      	ldr	r2, [pc, #100]	; (80097ac <TIM_OC4_SetConfig+0x110>)
 8009748:	4293      	cmp	r3, r2
 800974a:	d113      	bne.n	8009774 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800974c:	693b      	ldr	r3, [r7, #16]
 800974e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009752:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009754:	693b      	ldr	r3, [r7, #16]
 8009756:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800975a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	695b      	ldr	r3, [r3, #20]
 8009760:	019b      	lsls	r3, r3, #6
 8009762:	693a      	ldr	r2, [r7, #16]
 8009764:	4313      	orrs	r3, r2
 8009766:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	699b      	ldr	r3, [r3, #24]
 800976c:	019b      	lsls	r3, r3, #6
 800976e:	693a      	ldr	r2, [r7, #16]
 8009770:	4313      	orrs	r3, r2
 8009772:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	693a      	ldr	r2, [r7, #16]
 8009778:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	68fa      	ldr	r2, [r7, #12]
 800977e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	685a      	ldr	r2, [r3, #4]
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	697a      	ldr	r2, [r7, #20]
 800978c:	621a      	str	r2, [r3, #32]
}
 800978e:	bf00      	nop
 8009790:	371c      	adds	r7, #28
 8009792:	46bd      	mov	sp, r7
 8009794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009798:	4770      	bx	lr
 800979a:	bf00      	nop
 800979c:	40012c00 	.word	0x40012c00
 80097a0:	40013400 	.word	0x40013400
 80097a4:	40014000 	.word	0x40014000
 80097a8:	40014400 	.word	0x40014400
 80097ac:	40014800 	.word	0x40014800

080097b0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80097b0:	b480      	push	{r7}
 80097b2:	b087      	sub	sp, #28
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
 80097b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6a1b      	ldr	r3, [r3, #32]
 80097be:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6a1b      	ldr	r3, [r3, #32]
 80097ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	685b      	ldr	r3, [r3, #4]
 80097d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80097de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	68fa      	ldr	r2, [r7, #12]
 80097ea:	4313      	orrs	r3, r2
 80097ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80097ee:	693b      	ldr	r3, [r7, #16]
 80097f0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80097f4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	689b      	ldr	r3, [r3, #8]
 80097fa:	041b      	lsls	r3, r3, #16
 80097fc:	693a      	ldr	r2, [r7, #16]
 80097fe:	4313      	orrs	r3, r2
 8009800:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	4a17      	ldr	r2, [pc, #92]	; (8009864 <TIM_OC5_SetConfig+0xb4>)
 8009806:	4293      	cmp	r3, r2
 8009808:	d00f      	beq.n	800982a <TIM_OC5_SetConfig+0x7a>
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	4a16      	ldr	r2, [pc, #88]	; (8009868 <TIM_OC5_SetConfig+0xb8>)
 800980e:	4293      	cmp	r3, r2
 8009810:	d00b      	beq.n	800982a <TIM_OC5_SetConfig+0x7a>
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	4a15      	ldr	r2, [pc, #84]	; (800986c <TIM_OC5_SetConfig+0xbc>)
 8009816:	4293      	cmp	r3, r2
 8009818:	d007      	beq.n	800982a <TIM_OC5_SetConfig+0x7a>
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	4a14      	ldr	r2, [pc, #80]	; (8009870 <TIM_OC5_SetConfig+0xc0>)
 800981e:	4293      	cmp	r3, r2
 8009820:	d003      	beq.n	800982a <TIM_OC5_SetConfig+0x7a>
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	4a13      	ldr	r2, [pc, #76]	; (8009874 <TIM_OC5_SetConfig+0xc4>)
 8009826:	4293      	cmp	r3, r2
 8009828:	d109      	bne.n	800983e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800982a:	697b      	ldr	r3, [r7, #20]
 800982c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009830:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	695b      	ldr	r3, [r3, #20]
 8009836:	021b      	lsls	r3, r3, #8
 8009838:	697a      	ldr	r2, [r7, #20]
 800983a:	4313      	orrs	r3, r2
 800983c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	697a      	ldr	r2, [r7, #20]
 8009842:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	68fa      	ldr	r2, [r7, #12]
 8009848:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	685a      	ldr	r2, [r3, #4]
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	693a      	ldr	r2, [r7, #16]
 8009856:	621a      	str	r2, [r3, #32]
}
 8009858:	bf00      	nop
 800985a:	371c      	adds	r7, #28
 800985c:	46bd      	mov	sp, r7
 800985e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009862:	4770      	bx	lr
 8009864:	40012c00 	.word	0x40012c00
 8009868:	40013400 	.word	0x40013400
 800986c:	40014000 	.word	0x40014000
 8009870:	40014400 	.word	0x40014400
 8009874:	40014800 	.word	0x40014800

08009878 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009878:	b480      	push	{r7}
 800987a:	b087      	sub	sp, #28
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
 8009880:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6a1b      	ldr	r3, [r3, #32]
 8009886:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	6a1b      	ldr	r3, [r3, #32]
 8009892:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	685b      	ldr	r3, [r3, #4]
 8009898:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800989e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80098a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80098aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	021b      	lsls	r3, r3, #8
 80098b2:	68fa      	ldr	r2, [r7, #12]
 80098b4:	4313      	orrs	r3, r2
 80098b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80098b8:	693b      	ldr	r3, [r7, #16]
 80098ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80098be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	689b      	ldr	r3, [r3, #8]
 80098c4:	051b      	lsls	r3, r3, #20
 80098c6:	693a      	ldr	r2, [r7, #16]
 80098c8:	4313      	orrs	r3, r2
 80098ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	4a18      	ldr	r2, [pc, #96]	; (8009930 <TIM_OC6_SetConfig+0xb8>)
 80098d0:	4293      	cmp	r3, r2
 80098d2:	d00f      	beq.n	80098f4 <TIM_OC6_SetConfig+0x7c>
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	4a17      	ldr	r2, [pc, #92]	; (8009934 <TIM_OC6_SetConfig+0xbc>)
 80098d8:	4293      	cmp	r3, r2
 80098da:	d00b      	beq.n	80098f4 <TIM_OC6_SetConfig+0x7c>
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	4a16      	ldr	r2, [pc, #88]	; (8009938 <TIM_OC6_SetConfig+0xc0>)
 80098e0:	4293      	cmp	r3, r2
 80098e2:	d007      	beq.n	80098f4 <TIM_OC6_SetConfig+0x7c>
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	4a15      	ldr	r2, [pc, #84]	; (800993c <TIM_OC6_SetConfig+0xc4>)
 80098e8:	4293      	cmp	r3, r2
 80098ea:	d003      	beq.n	80098f4 <TIM_OC6_SetConfig+0x7c>
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	4a14      	ldr	r2, [pc, #80]	; (8009940 <TIM_OC6_SetConfig+0xc8>)
 80098f0:	4293      	cmp	r3, r2
 80098f2:	d109      	bne.n	8009908 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80098f4:	697b      	ldr	r3, [r7, #20]
 80098f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80098fa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	695b      	ldr	r3, [r3, #20]
 8009900:	029b      	lsls	r3, r3, #10
 8009902:	697a      	ldr	r2, [r7, #20]
 8009904:	4313      	orrs	r3, r2
 8009906:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	697a      	ldr	r2, [r7, #20]
 800990c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	68fa      	ldr	r2, [r7, #12]
 8009912:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	685a      	ldr	r2, [r3, #4]
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	693a      	ldr	r2, [r7, #16]
 8009920:	621a      	str	r2, [r3, #32]
}
 8009922:	bf00      	nop
 8009924:	371c      	adds	r7, #28
 8009926:	46bd      	mov	sp, r7
 8009928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992c:	4770      	bx	lr
 800992e:	bf00      	nop
 8009930:	40012c00 	.word	0x40012c00
 8009934:	40013400 	.word	0x40013400
 8009938:	40014000 	.word	0x40014000
 800993c:	40014400 	.word	0x40014400
 8009940:	40014800 	.word	0x40014800

08009944 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009944:	b480      	push	{r7}
 8009946:	b087      	sub	sp, #28
 8009948:	af00      	add	r7, sp, #0
 800994a:	60f8      	str	r0, [r7, #12]
 800994c:	60b9      	str	r1, [r7, #8]
 800994e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	6a1b      	ldr	r3, [r3, #32]
 8009954:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	6a1b      	ldr	r3, [r3, #32]
 800995a:	f023 0201 	bic.w	r2, r3, #1
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	699b      	ldr	r3, [r3, #24]
 8009966:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009968:	693b      	ldr	r3, [r7, #16]
 800996a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800996e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	011b      	lsls	r3, r3, #4
 8009974:	693a      	ldr	r2, [r7, #16]
 8009976:	4313      	orrs	r3, r2
 8009978:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800997a:	697b      	ldr	r3, [r7, #20]
 800997c:	f023 030a 	bic.w	r3, r3, #10
 8009980:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009982:	697a      	ldr	r2, [r7, #20]
 8009984:	68bb      	ldr	r3, [r7, #8]
 8009986:	4313      	orrs	r3, r2
 8009988:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	693a      	ldr	r2, [r7, #16]
 800998e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	697a      	ldr	r2, [r7, #20]
 8009994:	621a      	str	r2, [r3, #32]
}
 8009996:	bf00      	nop
 8009998:	371c      	adds	r7, #28
 800999a:	46bd      	mov	sp, r7
 800999c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a0:	4770      	bx	lr

080099a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80099a2:	b480      	push	{r7}
 80099a4:	b087      	sub	sp, #28
 80099a6:	af00      	add	r7, sp, #0
 80099a8:	60f8      	str	r0, [r7, #12]
 80099aa:	60b9      	str	r1, [r7, #8]
 80099ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	6a1b      	ldr	r3, [r3, #32]
 80099b2:	f023 0210 	bic.w	r2, r3, #16
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	699b      	ldr	r3, [r3, #24]
 80099be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	6a1b      	ldr	r3, [r3, #32]
 80099c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80099c6:	697b      	ldr	r3, [r7, #20]
 80099c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80099cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	031b      	lsls	r3, r3, #12
 80099d2:	697a      	ldr	r2, [r7, #20]
 80099d4:	4313      	orrs	r3, r2
 80099d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80099d8:	693b      	ldr	r3, [r7, #16]
 80099da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80099de:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	011b      	lsls	r3, r3, #4
 80099e4:	693a      	ldr	r2, [r7, #16]
 80099e6:	4313      	orrs	r3, r2
 80099e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	697a      	ldr	r2, [r7, #20]
 80099ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	693a      	ldr	r2, [r7, #16]
 80099f4:	621a      	str	r2, [r3, #32]
}
 80099f6:	bf00      	nop
 80099f8:	371c      	adds	r7, #28
 80099fa:	46bd      	mov	sp, r7
 80099fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a00:	4770      	bx	lr

08009a02 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009a02:	b480      	push	{r7}
 8009a04:	b085      	sub	sp, #20
 8009a06:	af00      	add	r7, sp, #0
 8009a08:	6078      	str	r0, [r7, #4]
 8009a0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	689b      	ldr	r3, [r3, #8]
 8009a10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8009a18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009a1e:	683a      	ldr	r2, [r7, #0]
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	4313      	orrs	r3, r2
 8009a24:	f043 0307 	orr.w	r3, r3, #7
 8009a28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	68fa      	ldr	r2, [r7, #12]
 8009a2e:	609a      	str	r2, [r3, #8]
}
 8009a30:	bf00      	nop
 8009a32:	3714      	adds	r7, #20
 8009a34:	46bd      	mov	sp, r7
 8009a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3a:	4770      	bx	lr

08009a3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009a3c:	b480      	push	{r7}
 8009a3e:	b087      	sub	sp, #28
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	60f8      	str	r0, [r7, #12]
 8009a44:	60b9      	str	r1, [r7, #8]
 8009a46:	607a      	str	r2, [r7, #4]
 8009a48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	689b      	ldr	r3, [r3, #8]
 8009a4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009a50:	697b      	ldr	r3, [r7, #20]
 8009a52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009a56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	021a      	lsls	r2, r3, #8
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	431a      	orrs	r2, r3
 8009a60:	68bb      	ldr	r3, [r7, #8]
 8009a62:	4313      	orrs	r3, r2
 8009a64:	697a      	ldr	r2, [r7, #20]
 8009a66:	4313      	orrs	r3, r2
 8009a68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	697a      	ldr	r2, [r7, #20]
 8009a6e:	609a      	str	r2, [r3, #8]
}
 8009a70:	bf00      	nop
 8009a72:	371c      	adds	r7, #28
 8009a74:	46bd      	mov	sp, r7
 8009a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7a:	4770      	bx	lr

08009a7c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009a7c:	b480      	push	{r7}
 8009a7e:	b087      	sub	sp, #28
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	60f8      	str	r0, [r7, #12]
 8009a84:	60b9      	str	r1, [r7, #8]
 8009a86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009a88:	68bb      	ldr	r3, [r7, #8]
 8009a8a:	f003 031f 	and.w	r3, r3, #31
 8009a8e:	2201      	movs	r2, #1
 8009a90:	fa02 f303 	lsl.w	r3, r2, r3
 8009a94:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	6a1a      	ldr	r2, [r3, #32]
 8009a9a:	697b      	ldr	r3, [r7, #20]
 8009a9c:	43db      	mvns	r3, r3
 8009a9e:	401a      	ands	r2, r3
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	6a1a      	ldr	r2, [r3, #32]
 8009aa8:	68bb      	ldr	r3, [r7, #8]
 8009aaa:	f003 031f 	and.w	r3, r3, #31
 8009aae:	6879      	ldr	r1, [r7, #4]
 8009ab0:	fa01 f303 	lsl.w	r3, r1, r3
 8009ab4:	431a      	orrs	r2, r3
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	621a      	str	r2, [r3, #32]
}
 8009aba:	bf00      	nop
 8009abc:	371c      	adds	r7, #28
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac4:	4770      	bx	lr
	...

08009ac8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009ac8:	b480      	push	{r7}
 8009aca:	b085      	sub	sp, #20
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
 8009ad0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ad8:	2b01      	cmp	r3, #1
 8009ada:	d101      	bne.n	8009ae0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009adc:	2302      	movs	r3, #2
 8009ade:	e065      	b.n	8009bac <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2201      	movs	r2, #1
 8009ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2202      	movs	r2, #2
 8009aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	685b      	ldr	r3, [r3, #4]
 8009af6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	689b      	ldr	r3, [r3, #8]
 8009afe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	4a2c      	ldr	r2, [pc, #176]	; (8009bb8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009b06:	4293      	cmp	r3, r2
 8009b08:	d004      	beq.n	8009b14 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	4a2b      	ldr	r2, [pc, #172]	; (8009bbc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009b10:	4293      	cmp	r3, r2
 8009b12:	d108      	bne.n	8009b26 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009b1a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	685b      	ldr	r3, [r3, #4]
 8009b20:	68fa      	ldr	r2, [r7, #12]
 8009b22:	4313      	orrs	r3, r2
 8009b24:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8009b2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b30:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	68fa      	ldr	r2, [r7, #12]
 8009b38:	4313      	orrs	r3, r2
 8009b3a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	68fa      	ldr	r2, [r7, #12]
 8009b42:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	4a1b      	ldr	r2, [pc, #108]	; (8009bb8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009b4a:	4293      	cmp	r3, r2
 8009b4c:	d018      	beq.n	8009b80 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b56:	d013      	beq.n	8009b80 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	4a18      	ldr	r2, [pc, #96]	; (8009bc0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009b5e:	4293      	cmp	r3, r2
 8009b60:	d00e      	beq.n	8009b80 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	4a17      	ldr	r2, [pc, #92]	; (8009bc4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009b68:	4293      	cmp	r3, r2
 8009b6a:	d009      	beq.n	8009b80 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	4a12      	ldr	r2, [pc, #72]	; (8009bbc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009b72:	4293      	cmp	r3, r2
 8009b74:	d004      	beq.n	8009b80 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	4a13      	ldr	r2, [pc, #76]	; (8009bc8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009b7c:	4293      	cmp	r3, r2
 8009b7e:	d10c      	bne.n	8009b9a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b86:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	689b      	ldr	r3, [r3, #8]
 8009b8c:	68ba      	ldr	r2, [r7, #8]
 8009b8e:	4313      	orrs	r3, r2
 8009b90:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	68ba      	ldr	r2, [r7, #8]
 8009b98:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	2201      	movs	r2, #1
 8009b9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009baa:	2300      	movs	r3, #0
}
 8009bac:	4618      	mov	r0, r3
 8009bae:	3714      	adds	r7, #20
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb6:	4770      	bx	lr
 8009bb8:	40012c00 	.word	0x40012c00
 8009bbc:	40013400 	.word	0x40013400
 8009bc0:	40000400 	.word	0x40000400
 8009bc4:	40000800 	.word	0x40000800
 8009bc8:	40014000 	.word	0x40014000

08009bcc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009bcc:	b480      	push	{r7}
 8009bce:	b085      	sub	sp, #20
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
 8009bd4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009be0:	2b01      	cmp	r3, #1
 8009be2:	d101      	bne.n	8009be8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009be4:	2302      	movs	r3, #2
 8009be6:	e087      	b.n	8009cf8 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2201      	movs	r2, #1
 8009bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	68db      	ldr	r3, [r3, #12]
 8009bfa:	4313      	orrs	r3, r2
 8009bfc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009c04:	683b      	ldr	r3, [r7, #0]
 8009c06:	689b      	ldr	r3, [r3, #8]
 8009c08:	4313      	orrs	r3, r2
 8009c0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	685b      	ldr	r3, [r3, #4]
 8009c16:	4313      	orrs	r3, r2
 8009c18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	4313      	orrs	r3, r2
 8009c26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	691b      	ldr	r3, [r3, #16]
 8009c32:	4313      	orrs	r3, r2
 8009c34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	695b      	ldr	r3, [r3, #20]
 8009c40:	4313      	orrs	r3, r2
 8009c42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c4e:	4313      	orrs	r3, r2
 8009c50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	699b      	ldr	r3, [r3, #24]
 8009c5c:	041b      	lsls	r3, r3, #16
 8009c5e:	4313      	orrs	r3, r2
 8009c60:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	4a27      	ldr	r2, [pc, #156]	; (8009d04 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8009c68:	4293      	cmp	r3, r2
 8009c6a:	d004      	beq.n	8009c76 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	4a25      	ldr	r2, [pc, #148]	; (8009d08 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8009c72:	4293      	cmp	r3, r2
 8009c74:	d106      	bne.n	8009c84 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	69db      	ldr	r3, [r3, #28]
 8009c80:	4313      	orrs	r3, r2
 8009c82:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	4a1e      	ldr	r2, [pc, #120]	; (8009d04 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	d004      	beq.n	8009c98 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	4a1d      	ldr	r2, [pc, #116]	; (8009d08 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8009c94:	4293      	cmp	r3, r2
 8009c96:	d126      	bne.n	8009ce6 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ca2:	051b      	lsls	r3, r3, #20
 8009ca4:	4313      	orrs	r3, r2
 8009ca6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	6a1b      	ldr	r3, [r3, #32]
 8009cb2:	4313      	orrs	r3, r2
 8009cb4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cc0:	4313      	orrs	r3, r2
 8009cc2:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	4a0e      	ldr	r2, [pc, #56]	; (8009d04 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8009cca:	4293      	cmp	r3, r2
 8009ccc:	d004      	beq.n	8009cd8 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	4a0d      	ldr	r2, [pc, #52]	; (8009d08 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8009cd4:	4293      	cmp	r3, r2
 8009cd6:	d106      	bne.n	8009ce6 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ce2:	4313      	orrs	r3, r2
 8009ce4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	68fa      	ldr	r2, [r7, #12]
 8009cec:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009cf6:	2300      	movs	r3, #0
}
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	3714      	adds	r7, #20
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d02:	4770      	bx	lr
 8009d04:	40012c00 	.word	0x40012c00
 8009d08:	40013400 	.word	0x40013400

08009d0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009d0c:	b480      	push	{r7}
 8009d0e:	b083      	sub	sp, #12
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009d14:	bf00      	nop
 8009d16:	370c      	adds	r7, #12
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1e:	4770      	bx	lr

08009d20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009d20:	b480      	push	{r7}
 8009d22:	b083      	sub	sp, #12
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009d28:	bf00      	nop
 8009d2a:	370c      	adds	r7, #12
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d32:	4770      	bx	lr

08009d34 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009d34:	b480      	push	{r7}
 8009d36:	b083      	sub	sp, #12
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009d3c:	bf00      	nop
 8009d3e:	370c      	adds	r7, #12
 8009d40:	46bd      	mov	sp, r7
 8009d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d46:	4770      	bx	lr

08009d48 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009d48:	b480      	push	{r7}
 8009d4a:	b083      	sub	sp, #12
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009d50:	bf00      	nop
 8009d52:	370c      	adds	r7, #12
 8009d54:	46bd      	mov	sp, r7
 8009d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5a:	4770      	bx	lr

08009d5c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009d5c:	b480      	push	{r7}
 8009d5e:	b083      	sub	sp, #12
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009d64:	bf00      	nop
 8009d66:	370c      	adds	r7, #12
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6e:	4770      	bx	lr

08009d70 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009d70:	b480      	push	{r7}
 8009d72:	b083      	sub	sp, #12
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009d78:	bf00      	nop
 8009d7a:	370c      	adds	r7, #12
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d82:	4770      	bx	lr

08009d84 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009d84:	b480      	push	{r7}
 8009d86:	b083      	sub	sp, #12
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009d8c:	bf00      	nop
 8009d8e:	370c      	adds	r7, #12
 8009d90:	46bd      	mov	sp, r7
 8009d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d96:	4770      	bx	lr

08009d98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b082      	sub	sp, #8
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d101      	bne.n	8009daa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009da6:	2301      	movs	r3, #1
 8009da8:	e042      	b.n	8009e30 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d106      	bne.n	8009dc2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2200      	movs	r2, #0
 8009db8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009dbc:	6878      	ldr	r0, [r7, #4]
 8009dbe:	f7f9 fd71 	bl	80038a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2224      	movs	r2, #36	; 0x24
 8009dc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	681a      	ldr	r2, [r3, #0]
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	f022 0201 	bic.w	r2, r2, #1
 8009dd8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f000 fc02 	bl	800a5e4 <UART_SetConfig>
 8009de0:	4603      	mov	r3, r0
 8009de2:	2b01      	cmp	r3, #1
 8009de4:	d101      	bne.n	8009dea <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009de6:	2301      	movs	r3, #1
 8009de8:	e022      	b.n	8009e30 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d002      	beq.n	8009df8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	f000 fec2 	bl	800ab7c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	685a      	ldr	r2, [r3, #4]
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009e06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	689a      	ldr	r2, [r3, #8]
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009e16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	681a      	ldr	r2, [r3, #0]
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	f042 0201 	orr.w	r2, r2, #1
 8009e26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009e28:	6878      	ldr	r0, [r7, #4]
 8009e2a:	f000 ff49 	bl	800acc0 <UART_CheckIdleState>
 8009e2e:	4603      	mov	r3, r0
}
 8009e30:	4618      	mov	r0, r3
 8009e32:	3708      	adds	r7, #8
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bd80      	pop	{r7, pc}

08009e38 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009e38:	b480      	push	{r7}
 8009e3a:	b091      	sub	sp, #68	; 0x44
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	60f8      	str	r0, [r7, #12]
 8009e40:	60b9      	str	r1, [r7, #8]
 8009e42:	4613      	mov	r3, r2
 8009e44:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e4c:	2b20      	cmp	r3, #32
 8009e4e:	f040 808c 	bne.w	8009f6a <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8009e52:	68bb      	ldr	r3, [r7, #8]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d002      	beq.n	8009e5e <HAL_UART_Transmit_IT+0x26>
 8009e58:	88fb      	ldrh	r3, [r7, #6]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d101      	bne.n	8009e62 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8009e5e:	2301      	movs	r3, #1
 8009e60:	e084      	b.n	8009f6c <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009e68:	2b01      	cmp	r3, #1
 8009e6a:	d101      	bne.n	8009e70 <HAL_UART_Transmit_IT+0x38>
 8009e6c:	2302      	movs	r3, #2
 8009e6e:	e07d      	b.n	8009f6c <HAL_UART_Transmit_IT+0x134>
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	2201      	movs	r2, #1
 8009e74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	68ba      	ldr	r2, [r7, #8]
 8009e7c:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	88fa      	ldrh	r2, [r7, #6]
 8009e82:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	88fa      	ldrh	r2, [r7, #6]
 8009e8a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	2200      	movs	r2, #0
 8009e92:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	2200      	movs	r2, #0
 8009e98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	2221      	movs	r2, #33	; 0x21
 8009ea0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ea8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009eac:	d12e      	bne.n	8009f0c <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	689b      	ldr	r3, [r3, #8]
 8009eb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009eb6:	d107      	bne.n	8009ec8 <HAL_UART_Transmit_IT+0x90>
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	691b      	ldr	r3, [r3, #16]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d103      	bne.n	8009ec8 <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	4a2d      	ldr	r2, [pc, #180]	; (8009f78 <HAL_UART_Transmit_IT+0x140>)
 8009ec4:	675a      	str	r2, [r3, #116]	; 0x74
 8009ec6:	e002      	b.n	8009ece <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	4a2c      	ldr	r2, [pc, #176]	; (8009f7c <HAL_UART_Transmit_IT+0x144>)
 8009ecc:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	3308      	adds	r3, #8
 8009edc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ee0:	e853 3f00 	ldrex	r3, [r3]
 8009ee4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ee8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009eec:	63bb      	str	r3, [r7, #56]	; 0x38
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	3308      	adds	r3, #8
 8009ef4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009ef6:	637a      	str	r2, [r7, #52]	; 0x34
 8009ef8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009efa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009efc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009efe:	e841 2300 	strex	r3, r2, [r1]
 8009f02:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d1e5      	bne.n	8009ed6 <HAL_UART_Transmit_IT+0x9e>
 8009f0a:	e02c      	b.n	8009f66 <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	689b      	ldr	r3, [r3, #8]
 8009f10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f14:	d107      	bne.n	8009f26 <HAL_UART_Transmit_IT+0xee>
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	691b      	ldr	r3, [r3, #16]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d103      	bne.n	8009f26 <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	4a17      	ldr	r2, [pc, #92]	; (8009f80 <HAL_UART_Transmit_IT+0x148>)
 8009f22:	675a      	str	r2, [r3, #116]	; 0x74
 8009f24:	e002      	b.n	8009f2c <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	4a16      	ldr	r2, [pc, #88]	; (8009f84 <HAL_UART_Transmit_IT+0x14c>)
 8009f2a:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f3a:	697b      	ldr	r3, [r7, #20]
 8009f3c:	e853 3f00 	ldrex	r3, [r3]
 8009f40:	613b      	str	r3, [r7, #16]
   return(result);
 8009f42:	693b      	ldr	r3, [r7, #16]
 8009f44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	461a      	mov	r2, r3
 8009f50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f52:	623b      	str	r3, [r7, #32]
 8009f54:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f56:	69f9      	ldr	r1, [r7, #28]
 8009f58:	6a3a      	ldr	r2, [r7, #32]
 8009f5a:	e841 2300 	strex	r3, r2, [r1]
 8009f5e:	61bb      	str	r3, [r7, #24]
   return(result);
 8009f60:	69bb      	ldr	r3, [r7, #24]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d1e6      	bne.n	8009f34 <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 8009f66:	2300      	movs	r3, #0
 8009f68:	e000      	b.n	8009f6c <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 8009f6a:	2302      	movs	r3, #2
  }
}
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	3744      	adds	r7, #68	; 0x44
 8009f70:	46bd      	mov	sp, r7
 8009f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f76:	4770      	bx	lr
 8009f78:	0800b239 	.word	0x0800b239
 8009f7c:	0800b159 	.word	0x0800b159
 8009f80:	0800b097 	.word	0x0800b097
 8009f84:	0800afdf 	.word	0x0800afdf

08009f88 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b0ba      	sub	sp, #232	; 0xe8
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	69db      	ldr	r3, [r3, #28]
 8009f96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	689b      	ldr	r3, [r3, #8]
 8009faa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009fae:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009fb2:	f640 030f 	movw	r3, #2063	; 0x80f
 8009fb6:	4013      	ands	r3, r2
 8009fb8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009fbc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d11b      	bne.n	8009ffc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009fc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009fc8:	f003 0320 	and.w	r3, r3, #32
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d015      	beq.n	8009ffc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009fd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009fd4:	f003 0320 	and.w	r3, r3, #32
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d105      	bne.n	8009fe8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009fdc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009fe0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d009      	beq.n	8009ffc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	f000 82d6 	beq.w	800a59e <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ff6:	6878      	ldr	r0, [r7, #4]
 8009ff8:	4798      	blx	r3
      }
      return;
 8009ffa:	e2d0      	b.n	800a59e <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009ffc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a000:	2b00      	cmp	r3, #0
 800a002:	f000 811f 	beq.w	800a244 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a006:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a00a:	4b8b      	ldr	r3, [pc, #556]	; (800a238 <HAL_UART_IRQHandler+0x2b0>)
 800a00c:	4013      	ands	r3, r2
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d106      	bne.n	800a020 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a012:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800a016:	4b89      	ldr	r3, [pc, #548]	; (800a23c <HAL_UART_IRQHandler+0x2b4>)
 800a018:	4013      	ands	r3, r2
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	f000 8112 	beq.w	800a244 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a020:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a024:	f003 0301 	and.w	r3, r3, #1
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d011      	beq.n	800a050 <HAL_UART_IRQHandler+0xc8>
 800a02c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a034:	2b00      	cmp	r3, #0
 800a036:	d00b      	beq.n	800a050 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	2201      	movs	r2, #1
 800a03e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a046:	f043 0201 	orr.w	r2, r3, #1
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a050:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a054:	f003 0302 	and.w	r3, r3, #2
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d011      	beq.n	800a080 <HAL_UART_IRQHandler+0xf8>
 800a05c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a060:	f003 0301 	and.w	r3, r3, #1
 800a064:	2b00      	cmp	r3, #0
 800a066:	d00b      	beq.n	800a080 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	2202      	movs	r2, #2
 800a06e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a076:	f043 0204 	orr.w	r2, r3, #4
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a080:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a084:	f003 0304 	and.w	r3, r3, #4
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d011      	beq.n	800a0b0 <HAL_UART_IRQHandler+0x128>
 800a08c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a090:	f003 0301 	and.w	r3, r3, #1
 800a094:	2b00      	cmp	r3, #0
 800a096:	d00b      	beq.n	800a0b0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	2204      	movs	r2, #4
 800a09e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a0a6:	f043 0202 	orr.w	r2, r3, #2
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a0b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a0b4:	f003 0308 	and.w	r3, r3, #8
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d017      	beq.n	800a0ec <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a0bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a0c0:	f003 0320 	and.w	r3, r3, #32
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d105      	bne.n	800a0d4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a0c8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a0cc:	4b5a      	ldr	r3, [pc, #360]	; (800a238 <HAL_UART_IRQHandler+0x2b0>)
 800a0ce:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d00b      	beq.n	800a0ec <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	2208      	movs	r2, #8
 800a0da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a0e2:	f043 0208 	orr.w	r2, r3, #8
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a0ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a0f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d012      	beq.n	800a11e <HAL_UART_IRQHandler+0x196>
 800a0f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a0fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a100:	2b00      	cmp	r3, #0
 800a102:	d00c      	beq.n	800a11e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a10c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a114:	f043 0220 	orr.w	r2, r3, #32
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a124:	2b00      	cmp	r3, #0
 800a126:	f000 823c 	beq.w	800a5a2 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a12a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a12e:	f003 0320 	and.w	r3, r3, #32
 800a132:	2b00      	cmp	r3, #0
 800a134:	d013      	beq.n	800a15e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a136:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a13a:	f003 0320 	and.w	r3, r3, #32
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d105      	bne.n	800a14e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a142:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d007      	beq.n	800a15e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a152:	2b00      	cmp	r3, #0
 800a154:	d003      	beq.n	800a15e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a15a:	6878      	ldr	r0, [r7, #4]
 800a15c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a164:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	689b      	ldr	r3, [r3, #8]
 800a16e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a172:	2b40      	cmp	r3, #64	; 0x40
 800a174:	d005      	beq.n	800a182 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a176:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a17a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d04f      	beq.n	800a222 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a182:	6878      	ldr	r0, [r7, #4]
 800a184:	f000 feaf 	bl	800aee6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	689b      	ldr	r3, [r3, #8]
 800a18e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a192:	2b40      	cmp	r3, #64	; 0x40
 800a194:	d141      	bne.n	800a21a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	3308      	adds	r3, #8
 800a19c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a1a4:	e853 3f00 	ldrex	r3, [r3]
 800a1a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a1ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a1b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a1b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	3308      	adds	r3, #8
 800a1be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a1c2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a1c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a1ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a1d2:	e841 2300 	strex	r3, r2, [r1]
 800a1d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a1da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d1d9      	bne.n	800a196 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d013      	beq.n	800a212 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a1ee:	4a14      	ldr	r2, [pc, #80]	; (800a240 <HAL_UART_IRQHandler+0x2b8>)
 800a1f0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	f7fc f9c0 	bl	800657c <HAL_DMA_Abort_IT>
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d017      	beq.n	800a232 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a208:	687a      	ldr	r2, [r7, #4]
 800a20a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800a20c:	4610      	mov	r0, r2
 800a20e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a210:	e00f      	b.n	800a232 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a212:	6878      	ldr	r0, [r7, #4]
 800a214:	f000 f9d0 	bl	800a5b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a218:	e00b      	b.n	800a232 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a21a:	6878      	ldr	r0, [r7, #4]
 800a21c:	f000 f9cc 	bl	800a5b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a220:	e007      	b.n	800a232 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f000 f9c8 	bl	800a5b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2200      	movs	r2, #0
 800a22c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800a230:	e1b7      	b.n	800a5a2 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a232:	bf00      	nop
    return;
 800a234:	e1b5      	b.n	800a5a2 <HAL_UART_IRQHandler+0x61a>
 800a236:	bf00      	nop
 800a238:	10000001 	.word	0x10000001
 800a23c:	04000120 	.word	0x04000120
 800a240:	0800afb3 	.word	0x0800afb3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a248:	2b01      	cmp	r3, #1
 800a24a:	f040 814a 	bne.w	800a4e2 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a24e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a252:	f003 0310 	and.w	r3, r3, #16
 800a256:	2b00      	cmp	r3, #0
 800a258:	f000 8143 	beq.w	800a4e2 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a25c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a260:	f003 0310 	and.w	r3, r3, #16
 800a264:	2b00      	cmp	r3, #0
 800a266:	f000 813c 	beq.w	800a4e2 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	2210      	movs	r2, #16
 800a270:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	689b      	ldr	r3, [r3, #8]
 800a278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a27c:	2b40      	cmp	r3, #64	; 0x40
 800a27e:	f040 80b5 	bne.w	800a3ec <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	685b      	ldr	r3, [r3, #4]
 800a28a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a28e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a292:	2b00      	cmp	r3, #0
 800a294:	f000 8187 	beq.w	800a5a6 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a29e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a2a2:	429a      	cmp	r2, r3
 800a2a4:	f080 817f 	bcs.w	800a5a6 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a2ae:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	f003 0320 	and.w	r3, r3, #32
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	f040 8086 	bne.w	800a3d0 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a2d0:	e853 3f00 	ldrex	r3, [r3]
 800a2d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a2d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a2dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a2e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	461a      	mov	r2, r3
 800a2ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a2ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a2f2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a2fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a2fe:	e841 2300 	strex	r3, r2, [r1]
 800a302:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a306:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d1da      	bne.n	800a2c4 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	3308      	adds	r3, #8
 800a314:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a316:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a318:	e853 3f00 	ldrex	r3, [r3]
 800a31c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a31e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a320:	f023 0301 	bic.w	r3, r3, #1
 800a324:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	3308      	adds	r3, #8
 800a32e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a332:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a336:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a338:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a33a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a33e:	e841 2300 	strex	r3, r2, [r1]
 800a342:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a344:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a346:	2b00      	cmp	r3, #0
 800a348:	d1e1      	bne.n	800a30e <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	3308      	adds	r3, #8
 800a350:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a352:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a354:	e853 3f00 	ldrex	r3, [r3]
 800a358:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a35a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a35c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a360:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	3308      	adds	r3, #8
 800a36a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a36e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a370:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a372:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a374:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a376:	e841 2300 	strex	r3, r2, [r1]
 800a37a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a37c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d1e3      	bne.n	800a34a <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2220      	movs	r2, #32
 800a386:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	2200      	movs	r2, #0
 800a38e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a396:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a398:	e853 3f00 	ldrex	r3, [r3]
 800a39c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a39e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a3a0:	f023 0310 	bic.w	r3, r3, #16
 800a3a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	461a      	mov	r2, r3
 800a3ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a3b2:	65bb      	str	r3, [r7, #88]	; 0x58
 800a3b4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3b6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a3b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a3ba:	e841 2300 	strex	r3, r2, [r1]
 800a3be:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a3c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d1e4      	bne.n	800a390 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f7fc f87d 	bl	80064ca <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a3dc:	b29b      	uxth	r3, r3
 800a3de:	1ad3      	subs	r3, r2, r3
 800a3e0:	b29b      	uxth	r3, r3
 800a3e2:	4619      	mov	r1, r3
 800a3e4:	6878      	ldr	r0, [r7, #4]
 800a3e6:	f000 f8f1 	bl	800a5cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a3ea:	e0dc      	b.n	800a5a6 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a3f8:	b29b      	uxth	r3, r3
 800a3fa:	1ad3      	subs	r3, r2, r3
 800a3fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a406:	b29b      	uxth	r3, r3
 800a408:	2b00      	cmp	r3, #0
 800a40a:	f000 80ce 	beq.w	800a5aa <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800a40e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a412:	2b00      	cmp	r3, #0
 800a414:	f000 80c9 	beq.w	800a5aa <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a41e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a420:	e853 3f00 	ldrex	r3, [r3]
 800a424:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a428:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a42c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	461a      	mov	r2, r3
 800a436:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a43a:	647b      	str	r3, [r7, #68]	; 0x44
 800a43c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a43e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a440:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a442:	e841 2300 	strex	r3, r2, [r1]
 800a446:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a448:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d1e4      	bne.n	800a418 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	3308      	adds	r3, #8
 800a454:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a458:	e853 3f00 	ldrex	r3, [r3]
 800a45c:	623b      	str	r3, [r7, #32]
   return(result);
 800a45e:	6a3b      	ldr	r3, [r7, #32]
 800a460:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a464:	f023 0301 	bic.w	r3, r3, #1
 800a468:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	3308      	adds	r3, #8
 800a472:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a476:	633a      	str	r2, [r7, #48]	; 0x30
 800a478:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a47a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a47c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a47e:	e841 2300 	strex	r3, r2, [r1]
 800a482:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a486:	2b00      	cmp	r3, #0
 800a488:	d1e1      	bne.n	800a44e <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	2220      	movs	r2, #32
 800a48e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	2200      	movs	r2, #0
 800a496:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2200      	movs	r2, #0
 800a49c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4a4:	693b      	ldr	r3, [r7, #16]
 800a4a6:	e853 3f00 	ldrex	r3, [r3]
 800a4aa:	60fb      	str	r3, [r7, #12]
   return(result);
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	f023 0310 	bic.w	r3, r3, #16
 800a4b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	461a      	mov	r2, r3
 800a4bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a4c0:	61fb      	str	r3, [r7, #28]
 800a4c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4c4:	69b9      	ldr	r1, [r7, #24]
 800a4c6:	69fa      	ldr	r2, [r7, #28]
 800a4c8:	e841 2300 	strex	r3, r2, [r1]
 800a4cc:	617b      	str	r3, [r7, #20]
   return(result);
 800a4ce:	697b      	ldr	r3, [r7, #20]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d1e4      	bne.n	800a49e <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a4d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a4d8:	4619      	mov	r1, r3
 800a4da:	6878      	ldr	r0, [r7, #4]
 800a4dc:	f000 f876 	bl	800a5cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a4e0:	e063      	b.n	800a5aa <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a4e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a4e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d00e      	beq.n	800a50c <HAL_UART_IRQHandler+0x584>
 800a4ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a4f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d008      	beq.n	800a50c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a502:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a504:	6878      	ldr	r0, [r7, #4]
 800a506:	f000 ff37 	bl	800b378 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a50a:	e051      	b.n	800a5b0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a50c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a510:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a514:	2b00      	cmp	r3, #0
 800a516:	d014      	beq.n	800a542 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a518:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a51c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a520:	2b00      	cmp	r3, #0
 800a522:	d105      	bne.n	800a530 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a524:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a528:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d008      	beq.n	800a542 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a534:	2b00      	cmp	r3, #0
 800a536:	d03a      	beq.n	800a5ae <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a53c:	6878      	ldr	r0, [r7, #4]
 800a53e:	4798      	blx	r3
    }
    return;
 800a540:	e035      	b.n	800a5ae <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d009      	beq.n	800a562 <HAL_UART_IRQHandler+0x5da>
 800a54e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a556:	2b00      	cmp	r3, #0
 800a558:	d003      	beq.n	800a562 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800a55a:	6878      	ldr	r0, [r7, #4]
 800a55c:	f000 fee1 	bl	800b322 <UART_EndTransmit_IT>
    return;
 800a560:	e026      	b.n	800a5b0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a566:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d009      	beq.n	800a582 <HAL_UART_IRQHandler+0x5fa>
 800a56e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a572:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a576:	2b00      	cmp	r3, #0
 800a578:	d003      	beq.n	800a582 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a57a:	6878      	ldr	r0, [r7, #4]
 800a57c:	f000 ff10 	bl	800b3a0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a580:	e016      	b.n	800a5b0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a582:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a586:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d010      	beq.n	800a5b0 <HAL_UART_IRQHandler+0x628>
 800a58e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a592:	2b00      	cmp	r3, #0
 800a594:	da0c      	bge.n	800a5b0 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a596:	6878      	ldr	r0, [r7, #4]
 800a598:	f000 fef8 	bl	800b38c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a59c:	e008      	b.n	800a5b0 <HAL_UART_IRQHandler+0x628>
      return;
 800a59e:	bf00      	nop
 800a5a0:	e006      	b.n	800a5b0 <HAL_UART_IRQHandler+0x628>
    return;
 800a5a2:	bf00      	nop
 800a5a4:	e004      	b.n	800a5b0 <HAL_UART_IRQHandler+0x628>
      return;
 800a5a6:	bf00      	nop
 800a5a8:	e002      	b.n	800a5b0 <HAL_UART_IRQHandler+0x628>
      return;
 800a5aa:	bf00      	nop
 800a5ac:	e000      	b.n	800a5b0 <HAL_UART_IRQHandler+0x628>
    return;
 800a5ae:	bf00      	nop
  }
}
 800a5b0:	37e8      	adds	r7, #232	; 0xe8
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	bd80      	pop	{r7, pc}
 800a5b6:	bf00      	nop

0800a5b8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a5b8:	b480      	push	{r7}
 800a5ba:	b083      	sub	sp, #12
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a5c0:	bf00      	nop
 800a5c2:	370c      	adds	r7, #12
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ca:	4770      	bx	lr

0800a5cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a5cc:	b480      	push	{r7}
 800a5ce:	b083      	sub	sp, #12
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
 800a5d4:	460b      	mov	r3, r1
 800a5d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a5d8:	bf00      	nop
 800a5da:	370c      	adds	r7, #12
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e2:	4770      	bx	lr

0800a5e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a5e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a5e8:	b08c      	sub	sp, #48	; 0x30
 800a5ea:	af00      	add	r7, sp, #0
 800a5ec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a5f4:	697b      	ldr	r3, [r7, #20]
 800a5f6:	689a      	ldr	r2, [r3, #8]
 800a5f8:	697b      	ldr	r3, [r7, #20]
 800a5fa:	691b      	ldr	r3, [r3, #16]
 800a5fc:	431a      	orrs	r2, r3
 800a5fe:	697b      	ldr	r3, [r7, #20]
 800a600:	695b      	ldr	r3, [r3, #20]
 800a602:	431a      	orrs	r2, r3
 800a604:	697b      	ldr	r3, [r7, #20]
 800a606:	69db      	ldr	r3, [r3, #28]
 800a608:	4313      	orrs	r3, r2
 800a60a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a60c:	697b      	ldr	r3, [r7, #20]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	681a      	ldr	r2, [r3, #0]
 800a612:	4bab      	ldr	r3, [pc, #684]	; (800a8c0 <UART_SetConfig+0x2dc>)
 800a614:	4013      	ands	r3, r2
 800a616:	697a      	ldr	r2, [r7, #20]
 800a618:	6812      	ldr	r2, [r2, #0]
 800a61a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a61c:	430b      	orrs	r3, r1
 800a61e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a620:	697b      	ldr	r3, [r7, #20]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	685b      	ldr	r3, [r3, #4]
 800a626:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a62a:	697b      	ldr	r3, [r7, #20]
 800a62c:	68da      	ldr	r2, [r3, #12]
 800a62e:	697b      	ldr	r3, [r7, #20]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	430a      	orrs	r2, r1
 800a634:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a636:	697b      	ldr	r3, [r7, #20]
 800a638:	699b      	ldr	r3, [r3, #24]
 800a63a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a63c:	697b      	ldr	r3, [r7, #20]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	4aa0      	ldr	r2, [pc, #640]	; (800a8c4 <UART_SetConfig+0x2e0>)
 800a642:	4293      	cmp	r3, r2
 800a644:	d004      	beq.n	800a650 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a646:	697b      	ldr	r3, [r7, #20]
 800a648:	6a1b      	ldr	r3, [r3, #32]
 800a64a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a64c:	4313      	orrs	r3, r2
 800a64e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a650:	697b      	ldr	r3, [r7, #20]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	689b      	ldr	r3, [r3, #8]
 800a656:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800a65a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800a65e:	697a      	ldr	r2, [r7, #20]
 800a660:	6812      	ldr	r2, [r2, #0]
 800a662:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a664:	430b      	orrs	r3, r1
 800a666:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a668:	697b      	ldr	r3, [r7, #20]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a66e:	f023 010f 	bic.w	r1, r3, #15
 800a672:	697b      	ldr	r3, [r7, #20]
 800a674:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a676:	697b      	ldr	r3, [r7, #20]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	430a      	orrs	r2, r1
 800a67c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a67e:	697b      	ldr	r3, [r7, #20]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	4a91      	ldr	r2, [pc, #580]	; (800a8c8 <UART_SetConfig+0x2e4>)
 800a684:	4293      	cmp	r3, r2
 800a686:	d125      	bne.n	800a6d4 <UART_SetConfig+0xf0>
 800a688:	4b90      	ldr	r3, [pc, #576]	; (800a8cc <UART_SetConfig+0x2e8>)
 800a68a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a68e:	f003 0303 	and.w	r3, r3, #3
 800a692:	2b03      	cmp	r3, #3
 800a694:	d81a      	bhi.n	800a6cc <UART_SetConfig+0xe8>
 800a696:	a201      	add	r2, pc, #4	; (adr r2, 800a69c <UART_SetConfig+0xb8>)
 800a698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a69c:	0800a6ad 	.word	0x0800a6ad
 800a6a0:	0800a6bd 	.word	0x0800a6bd
 800a6a4:	0800a6b5 	.word	0x0800a6b5
 800a6a8:	0800a6c5 	.word	0x0800a6c5
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a6b2:	e0d6      	b.n	800a862 <UART_SetConfig+0x27e>
 800a6b4:	2302      	movs	r3, #2
 800a6b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a6ba:	e0d2      	b.n	800a862 <UART_SetConfig+0x27e>
 800a6bc:	2304      	movs	r3, #4
 800a6be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a6c2:	e0ce      	b.n	800a862 <UART_SetConfig+0x27e>
 800a6c4:	2308      	movs	r3, #8
 800a6c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a6ca:	e0ca      	b.n	800a862 <UART_SetConfig+0x27e>
 800a6cc:	2310      	movs	r3, #16
 800a6ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a6d2:	e0c6      	b.n	800a862 <UART_SetConfig+0x27e>
 800a6d4:	697b      	ldr	r3, [r7, #20]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	4a7d      	ldr	r2, [pc, #500]	; (800a8d0 <UART_SetConfig+0x2ec>)
 800a6da:	4293      	cmp	r3, r2
 800a6dc:	d138      	bne.n	800a750 <UART_SetConfig+0x16c>
 800a6de:	4b7b      	ldr	r3, [pc, #492]	; (800a8cc <UART_SetConfig+0x2e8>)
 800a6e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6e4:	f003 030c 	and.w	r3, r3, #12
 800a6e8:	2b0c      	cmp	r3, #12
 800a6ea:	d82d      	bhi.n	800a748 <UART_SetConfig+0x164>
 800a6ec:	a201      	add	r2, pc, #4	; (adr r2, 800a6f4 <UART_SetConfig+0x110>)
 800a6ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6f2:	bf00      	nop
 800a6f4:	0800a729 	.word	0x0800a729
 800a6f8:	0800a749 	.word	0x0800a749
 800a6fc:	0800a749 	.word	0x0800a749
 800a700:	0800a749 	.word	0x0800a749
 800a704:	0800a739 	.word	0x0800a739
 800a708:	0800a749 	.word	0x0800a749
 800a70c:	0800a749 	.word	0x0800a749
 800a710:	0800a749 	.word	0x0800a749
 800a714:	0800a731 	.word	0x0800a731
 800a718:	0800a749 	.word	0x0800a749
 800a71c:	0800a749 	.word	0x0800a749
 800a720:	0800a749 	.word	0x0800a749
 800a724:	0800a741 	.word	0x0800a741
 800a728:	2300      	movs	r3, #0
 800a72a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a72e:	e098      	b.n	800a862 <UART_SetConfig+0x27e>
 800a730:	2302      	movs	r3, #2
 800a732:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a736:	e094      	b.n	800a862 <UART_SetConfig+0x27e>
 800a738:	2304      	movs	r3, #4
 800a73a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a73e:	e090      	b.n	800a862 <UART_SetConfig+0x27e>
 800a740:	2308      	movs	r3, #8
 800a742:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a746:	e08c      	b.n	800a862 <UART_SetConfig+0x27e>
 800a748:	2310      	movs	r3, #16
 800a74a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a74e:	e088      	b.n	800a862 <UART_SetConfig+0x27e>
 800a750:	697b      	ldr	r3, [r7, #20]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	4a5f      	ldr	r2, [pc, #380]	; (800a8d4 <UART_SetConfig+0x2f0>)
 800a756:	4293      	cmp	r3, r2
 800a758:	d125      	bne.n	800a7a6 <UART_SetConfig+0x1c2>
 800a75a:	4b5c      	ldr	r3, [pc, #368]	; (800a8cc <UART_SetConfig+0x2e8>)
 800a75c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a760:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a764:	2b30      	cmp	r3, #48	; 0x30
 800a766:	d016      	beq.n	800a796 <UART_SetConfig+0x1b2>
 800a768:	2b30      	cmp	r3, #48	; 0x30
 800a76a:	d818      	bhi.n	800a79e <UART_SetConfig+0x1ba>
 800a76c:	2b20      	cmp	r3, #32
 800a76e:	d00a      	beq.n	800a786 <UART_SetConfig+0x1a2>
 800a770:	2b20      	cmp	r3, #32
 800a772:	d814      	bhi.n	800a79e <UART_SetConfig+0x1ba>
 800a774:	2b00      	cmp	r3, #0
 800a776:	d002      	beq.n	800a77e <UART_SetConfig+0x19a>
 800a778:	2b10      	cmp	r3, #16
 800a77a:	d008      	beq.n	800a78e <UART_SetConfig+0x1aa>
 800a77c:	e00f      	b.n	800a79e <UART_SetConfig+0x1ba>
 800a77e:	2300      	movs	r3, #0
 800a780:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a784:	e06d      	b.n	800a862 <UART_SetConfig+0x27e>
 800a786:	2302      	movs	r3, #2
 800a788:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a78c:	e069      	b.n	800a862 <UART_SetConfig+0x27e>
 800a78e:	2304      	movs	r3, #4
 800a790:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a794:	e065      	b.n	800a862 <UART_SetConfig+0x27e>
 800a796:	2308      	movs	r3, #8
 800a798:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a79c:	e061      	b.n	800a862 <UART_SetConfig+0x27e>
 800a79e:	2310      	movs	r3, #16
 800a7a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a7a4:	e05d      	b.n	800a862 <UART_SetConfig+0x27e>
 800a7a6:	697b      	ldr	r3, [r7, #20]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	4a4b      	ldr	r2, [pc, #300]	; (800a8d8 <UART_SetConfig+0x2f4>)
 800a7ac:	4293      	cmp	r3, r2
 800a7ae:	d125      	bne.n	800a7fc <UART_SetConfig+0x218>
 800a7b0:	4b46      	ldr	r3, [pc, #280]	; (800a8cc <UART_SetConfig+0x2e8>)
 800a7b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7b6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a7ba:	2bc0      	cmp	r3, #192	; 0xc0
 800a7bc:	d016      	beq.n	800a7ec <UART_SetConfig+0x208>
 800a7be:	2bc0      	cmp	r3, #192	; 0xc0
 800a7c0:	d818      	bhi.n	800a7f4 <UART_SetConfig+0x210>
 800a7c2:	2b80      	cmp	r3, #128	; 0x80
 800a7c4:	d00a      	beq.n	800a7dc <UART_SetConfig+0x1f8>
 800a7c6:	2b80      	cmp	r3, #128	; 0x80
 800a7c8:	d814      	bhi.n	800a7f4 <UART_SetConfig+0x210>
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d002      	beq.n	800a7d4 <UART_SetConfig+0x1f0>
 800a7ce:	2b40      	cmp	r3, #64	; 0x40
 800a7d0:	d008      	beq.n	800a7e4 <UART_SetConfig+0x200>
 800a7d2:	e00f      	b.n	800a7f4 <UART_SetConfig+0x210>
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a7da:	e042      	b.n	800a862 <UART_SetConfig+0x27e>
 800a7dc:	2302      	movs	r3, #2
 800a7de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a7e2:	e03e      	b.n	800a862 <UART_SetConfig+0x27e>
 800a7e4:	2304      	movs	r3, #4
 800a7e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a7ea:	e03a      	b.n	800a862 <UART_SetConfig+0x27e>
 800a7ec:	2308      	movs	r3, #8
 800a7ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a7f2:	e036      	b.n	800a862 <UART_SetConfig+0x27e>
 800a7f4:	2310      	movs	r3, #16
 800a7f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a7fa:	e032      	b.n	800a862 <UART_SetConfig+0x27e>
 800a7fc:	697b      	ldr	r3, [r7, #20]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	4a30      	ldr	r2, [pc, #192]	; (800a8c4 <UART_SetConfig+0x2e0>)
 800a802:	4293      	cmp	r3, r2
 800a804:	d12a      	bne.n	800a85c <UART_SetConfig+0x278>
 800a806:	4b31      	ldr	r3, [pc, #196]	; (800a8cc <UART_SetConfig+0x2e8>)
 800a808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a80c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a810:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a814:	d01a      	beq.n	800a84c <UART_SetConfig+0x268>
 800a816:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a81a:	d81b      	bhi.n	800a854 <UART_SetConfig+0x270>
 800a81c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a820:	d00c      	beq.n	800a83c <UART_SetConfig+0x258>
 800a822:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a826:	d815      	bhi.n	800a854 <UART_SetConfig+0x270>
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d003      	beq.n	800a834 <UART_SetConfig+0x250>
 800a82c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a830:	d008      	beq.n	800a844 <UART_SetConfig+0x260>
 800a832:	e00f      	b.n	800a854 <UART_SetConfig+0x270>
 800a834:	2300      	movs	r3, #0
 800a836:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a83a:	e012      	b.n	800a862 <UART_SetConfig+0x27e>
 800a83c:	2302      	movs	r3, #2
 800a83e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a842:	e00e      	b.n	800a862 <UART_SetConfig+0x27e>
 800a844:	2304      	movs	r3, #4
 800a846:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a84a:	e00a      	b.n	800a862 <UART_SetConfig+0x27e>
 800a84c:	2308      	movs	r3, #8
 800a84e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a852:	e006      	b.n	800a862 <UART_SetConfig+0x27e>
 800a854:	2310      	movs	r3, #16
 800a856:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a85a:	e002      	b.n	800a862 <UART_SetConfig+0x27e>
 800a85c:	2310      	movs	r3, #16
 800a85e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a862:	697b      	ldr	r3, [r7, #20]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	4a17      	ldr	r2, [pc, #92]	; (800a8c4 <UART_SetConfig+0x2e0>)
 800a868:	4293      	cmp	r3, r2
 800a86a:	f040 80a8 	bne.w	800a9be <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a86e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a872:	2b08      	cmp	r3, #8
 800a874:	d834      	bhi.n	800a8e0 <UART_SetConfig+0x2fc>
 800a876:	a201      	add	r2, pc, #4	; (adr r2, 800a87c <UART_SetConfig+0x298>)
 800a878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a87c:	0800a8a1 	.word	0x0800a8a1
 800a880:	0800a8e1 	.word	0x0800a8e1
 800a884:	0800a8a9 	.word	0x0800a8a9
 800a888:	0800a8e1 	.word	0x0800a8e1
 800a88c:	0800a8af 	.word	0x0800a8af
 800a890:	0800a8e1 	.word	0x0800a8e1
 800a894:	0800a8e1 	.word	0x0800a8e1
 800a898:	0800a8e1 	.word	0x0800a8e1
 800a89c:	0800a8b7 	.word	0x0800a8b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a8a0:	f7fd fafa 	bl	8007e98 <HAL_RCC_GetPCLK1Freq>
 800a8a4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a8a6:	e021      	b.n	800a8ec <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a8a8:	4b0c      	ldr	r3, [pc, #48]	; (800a8dc <UART_SetConfig+0x2f8>)
 800a8aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a8ac:	e01e      	b.n	800a8ec <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a8ae:	f7fd fa85 	bl	8007dbc <HAL_RCC_GetSysClockFreq>
 800a8b2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a8b4:	e01a      	b.n	800a8ec <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a8b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a8ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a8bc:	e016      	b.n	800a8ec <UART_SetConfig+0x308>
 800a8be:	bf00      	nop
 800a8c0:	cfff69f3 	.word	0xcfff69f3
 800a8c4:	40008000 	.word	0x40008000
 800a8c8:	40013800 	.word	0x40013800
 800a8cc:	40021000 	.word	0x40021000
 800a8d0:	40004400 	.word	0x40004400
 800a8d4:	40004800 	.word	0x40004800
 800a8d8:	40004c00 	.word	0x40004c00
 800a8dc:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a8e4:	2301      	movs	r3, #1
 800a8e6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a8ea:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a8ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	f000 812a 	beq.w	800ab48 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a8f4:	697b      	ldr	r3, [r7, #20]
 800a8f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8f8:	4a9e      	ldr	r2, [pc, #632]	; (800ab74 <UART_SetConfig+0x590>)
 800a8fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a8fe:	461a      	mov	r2, r3
 800a900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a902:	fbb3 f3f2 	udiv	r3, r3, r2
 800a906:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a908:	697b      	ldr	r3, [r7, #20]
 800a90a:	685a      	ldr	r2, [r3, #4]
 800a90c:	4613      	mov	r3, r2
 800a90e:	005b      	lsls	r3, r3, #1
 800a910:	4413      	add	r3, r2
 800a912:	69ba      	ldr	r2, [r7, #24]
 800a914:	429a      	cmp	r2, r3
 800a916:	d305      	bcc.n	800a924 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a918:	697b      	ldr	r3, [r7, #20]
 800a91a:	685b      	ldr	r3, [r3, #4]
 800a91c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a91e:	69ba      	ldr	r2, [r7, #24]
 800a920:	429a      	cmp	r2, r3
 800a922:	d903      	bls.n	800a92c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800a924:	2301      	movs	r3, #1
 800a926:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a92a:	e10d      	b.n	800ab48 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a92c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a92e:	2200      	movs	r2, #0
 800a930:	60bb      	str	r3, [r7, #8]
 800a932:	60fa      	str	r2, [r7, #12]
 800a934:	697b      	ldr	r3, [r7, #20]
 800a936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a938:	4a8e      	ldr	r2, [pc, #568]	; (800ab74 <UART_SetConfig+0x590>)
 800a93a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a93e:	b29b      	uxth	r3, r3
 800a940:	2200      	movs	r2, #0
 800a942:	603b      	str	r3, [r7, #0]
 800a944:	607a      	str	r2, [r7, #4]
 800a946:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a94a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a94e:	f7f6 f9c3 	bl	8000cd8 <__aeabi_uldivmod>
 800a952:	4602      	mov	r2, r0
 800a954:	460b      	mov	r3, r1
 800a956:	4610      	mov	r0, r2
 800a958:	4619      	mov	r1, r3
 800a95a:	f04f 0200 	mov.w	r2, #0
 800a95e:	f04f 0300 	mov.w	r3, #0
 800a962:	020b      	lsls	r3, r1, #8
 800a964:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a968:	0202      	lsls	r2, r0, #8
 800a96a:	6979      	ldr	r1, [r7, #20]
 800a96c:	6849      	ldr	r1, [r1, #4]
 800a96e:	0849      	lsrs	r1, r1, #1
 800a970:	2000      	movs	r0, #0
 800a972:	460c      	mov	r4, r1
 800a974:	4605      	mov	r5, r0
 800a976:	eb12 0804 	adds.w	r8, r2, r4
 800a97a:	eb43 0905 	adc.w	r9, r3, r5
 800a97e:	697b      	ldr	r3, [r7, #20]
 800a980:	685b      	ldr	r3, [r3, #4]
 800a982:	2200      	movs	r2, #0
 800a984:	469a      	mov	sl, r3
 800a986:	4693      	mov	fp, r2
 800a988:	4652      	mov	r2, sl
 800a98a:	465b      	mov	r3, fp
 800a98c:	4640      	mov	r0, r8
 800a98e:	4649      	mov	r1, r9
 800a990:	f7f6 f9a2 	bl	8000cd8 <__aeabi_uldivmod>
 800a994:	4602      	mov	r2, r0
 800a996:	460b      	mov	r3, r1
 800a998:	4613      	mov	r3, r2
 800a99a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a99c:	6a3b      	ldr	r3, [r7, #32]
 800a99e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a9a2:	d308      	bcc.n	800a9b6 <UART_SetConfig+0x3d2>
 800a9a4:	6a3b      	ldr	r3, [r7, #32]
 800a9a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a9aa:	d204      	bcs.n	800a9b6 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800a9ac:	697b      	ldr	r3, [r7, #20]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	6a3a      	ldr	r2, [r7, #32]
 800a9b2:	60da      	str	r2, [r3, #12]
 800a9b4:	e0c8      	b.n	800ab48 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800a9b6:	2301      	movs	r3, #1
 800a9b8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a9bc:	e0c4      	b.n	800ab48 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a9be:	697b      	ldr	r3, [r7, #20]
 800a9c0:	69db      	ldr	r3, [r3, #28]
 800a9c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a9c6:	d167      	bne.n	800aa98 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800a9c8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a9cc:	2b08      	cmp	r3, #8
 800a9ce:	d828      	bhi.n	800aa22 <UART_SetConfig+0x43e>
 800a9d0:	a201      	add	r2, pc, #4	; (adr r2, 800a9d8 <UART_SetConfig+0x3f4>)
 800a9d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9d6:	bf00      	nop
 800a9d8:	0800a9fd 	.word	0x0800a9fd
 800a9dc:	0800aa05 	.word	0x0800aa05
 800a9e0:	0800aa0d 	.word	0x0800aa0d
 800a9e4:	0800aa23 	.word	0x0800aa23
 800a9e8:	0800aa13 	.word	0x0800aa13
 800a9ec:	0800aa23 	.word	0x0800aa23
 800a9f0:	0800aa23 	.word	0x0800aa23
 800a9f4:	0800aa23 	.word	0x0800aa23
 800a9f8:	0800aa1b 	.word	0x0800aa1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a9fc:	f7fd fa4c 	bl	8007e98 <HAL_RCC_GetPCLK1Freq>
 800aa00:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800aa02:	e014      	b.n	800aa2e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aa04:	f7fd fa5e 	bl	8007ec4 <HAL_RCC_GetPCLK2Freq>
 800aa08:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800aa0a:	e010      	b.n	800aa2e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800aa0c:	4b5a      	ldr	r3, [pc, #360]	; (800ab78 <UART_SetConfig+0x594>)
 800aa0e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800aa10:	e00d      	b.n	800aa2e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aa12:	f7fd f9d3 	bl	8007dbc <HAL_RCC_GetSysClockFreq>
 800aa16:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800aa18:	e009      	b.n	800aa2e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aa1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aa1e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800aa20:	e005      	b.n	800aa2e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800aa22:	2300      	movs	r3, #0
 800aa24:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800aa26:	2301      	movs	r3, #1
 800aa28:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800aa2c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800aa2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	f000 8089 	beq.w	800ab48 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aa36:	697b      	ldr	r3, [r7, #20]
 800aa38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa3a:	4a4e      	ldr	r2, [pc, #312]	; (800ab74 <UART_SetConfig+0x590>)
 800aa3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aa40:	461a      	mov	r2, r3
 800aa42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa44:	fbb3 f3f2 	udiv	r3, r3, r2
 800aa48:	005a      	lsls	r2, r3, #1
 800aa4a:	697b      	ldr	r3, [r7, #20]
 800aa4c:	685b      	ldr	r3, [r3, #4]
 800aa4e:	085b      	lsrs	r3, r3, #1
 800aa50:	441a      	add	r2, r3
 800aa52:	697b      	ldr	r3, [r7, #20]
 800aa54:	685b      	ldr	r3, [r3, #4]
 800aa56:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa5a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aa5c:	6a3b      	ldr	r3, [r7, #32]
 800aa5e:	2b0f      	cmp	r3, #15
 800aa60:	d916      	bls.n	800aa90 <UART_SetConfig+0x4ac>
 800aa62:	6a3b      	ldr	r3, [r7, #32]
 800aa64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa68:	d212      	bcs.n	800aa90 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800aa6a:	6a3b      	ldr	r3, [r7, #32]
 800aa6c:	b29b      	uxth	r3, r3
 800aa6e:	f023 030f 	bic.w	r3, r3, #15
 800aa72:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800aa74:	6a3b      	ldr	r3, [r7, #32]
 800aa76:	085b      	lsrs	r3, r3, #1
 800aa78:	b29b      	uxth	r3, r3
 800aa7a:	f003 0307 	and.w	r3, r3, #7
 800aa7e:	b29a      	uxth	r2, r3
 800aa80:	8bfb      	ldrh	r3, [r7, #30]
 800aa82:	4313      	orrs	r3, r2
 800aa84:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800aa86:	697b      	ldr	r3, [r7, #20]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	8bfa      	ldrh	r2, [r7, #30]
 800aa8c:	60da      	str	r2, [r3, #12]
 800aa8e:	e05b      	b.n	800ab48 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800aa90:	2301      	movs	r3, #1
 800aa92:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800aa96:	e057      	b.n	800ab48 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800aa98:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800aa9c:	2b08      	cmp	r3, #8
 800aa9e:	d828      	bhi.n	800aaf2 <UART_SetConfig+0x50e>
 800aaa0:	a201      	add	r2, pc, #4	; (adr r2, 800aaa8 <UART_SetConfig+0x4c4>)
 800aaa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaa6:	bf00      	nop
 800aaa8:	0800aacd 	.word	0x0800aacd
 800aaac:	0800aad5 	.word	0x0800aad5
 800aab0:	0800aadd 	.word	0x0800aadd
 800aab4:	0800aaf3 	.word	0x0800aaf3
 800aab8:	0800aae3 	.word	0x0800aae3
 800aabc:	0800aaf3 	.word	0x0800aaf3
 800aac0:	0800aaf3 	.word	0x0800aaf3
 800aac4:	0800aaf3 	.word	0x0800aaf3
 800aac8:	0800aaeb 	.word	0x0800aaeb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aacc:	f7fd f9e4 	bl	8007e98 <HAL_RCC_GetPCLK1Freq>
 800aad0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800aad2:	e014      	b.n	800aafe <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aad4:	f7fd f9f6 	bl	8007ec4 <HAL_RCC_GetPCLK2Freq>
 800aad8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800aada:	e010      	b.n	800aafe <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800aadc:	4b26      	ldr	r3, [pc, #152]	; (800ab78 <UART_SetConfig+0x594>)
 800aade:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800aae0:	e00d      	b.n	800aafe <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aae2:	f7fd f96b 	bl	8007dbc <HAL_RCC_GetSysClockFreq>
 800aae6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800aae8:	e009      	b.n	800aafe <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aaea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aaee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800aaf0:	e005      	b.n	800aafe <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800aaf6:	2301      	movs	r3, #1
 800aaf8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800aafc:	bf00      	nop
    }

    if (pclk != 0U)
 800aafe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d021      	beq.n	800ab48 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ab04:	697b      	ldr	r3, [r7, #20]
 800ab06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab08:	4a1a      	ldr	r2, [pc, #104]	; (800ab74 <UART_SetConfig+0x590>)
 800ab0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ab0e:	461a      	mov	r2, r3
 800ab10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab12:	fbb3 f2f2 	udiv	r2, r3, r2
 800ab16:	697b      	ldr	r3, [r7, #20]
 800ab18:	685b      	ldr	r3, [r3, #4]
 800ab1a:	085b      	lsrs	r3, r3, #1
 800ab1c:	441a      	add	r2, r3
 800ab1e:	697b      	ldr	r3, [r7, #20]
 800ab20:	685b      	ldr	r3, [r3, #4]
 800ab22:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab26:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ab28:	6a3b      	ldr	r3, [r7, #32]
 800ab2a:	2b0f      	cmp	r3, #15
 800ab2c:	d909      	bls.n	800ab42 <UART_SetConfig+0x55e>
 800ab2e:	6a3b      	ldr	r3, [r7, #32]
 800ab30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab34:	d205      	bcs.n	800ab42 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ab36:	6a3b      	ldr	r3, [r7, #32]
 800ab38:	b29a      	uxth	r2, r3
 800ab3a:	697b      	ldr	r3, [r7, #20]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	60da      	str	r2, [r3, #12]
 800ab40:	e002      	b.n	800ab48 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800ab42:	2301      	movs	r3, #1
 800ab44:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ab48:	697b      	ldr	r3, [r7, #20]
 800ab4a:	2201      	movs	r2, #1
 800ab4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ab50:	697b      	ldr	r3, [r7, #20]
 800ab52:	2201      	movs	r2, #1
 800ab54:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ab58:	697b      	ldr	r3, [r7, #20]
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800ab5e:	697b      	ldr	r3, [r7, #20]
 800ab60:	2200      	movs	r2, #0
 800ab62:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800ab64:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800ab68:	4618      	mov	r0, r3
 800ab6a:	3730      	adds	r7, #48	; 0x30
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ab72:	bf00      	nop
 800ab74:	080108a8 	.word	0x080108a8
 800ab78:	00f42400 	.word	0x00f42400

0800ab7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ab7c:	b480      	push	{r7}
 800ab7e:	b083      	sub	sp, #12
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab88:	f003 0301 	and.w	r3, r3, #1
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d00a      	beq.n	800aba6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	685b      	ldr	r3, [r3, #4]
 800ab96:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	430a      	orrs	r2, r1
 800aba4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abaa:	f003 0302 	and.w	r3, r3, #2
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d00a      	beq.n	800abc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	685b      	ldr	r3, [r3, #4]
 800abb8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	430a      	orrs	r2, r1
 800abc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abcc:	f003 0304 	and.w	r3, r3, #4
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d00a      	beq.n	800abea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	685b      	ldr	r3, [r3, #4]
 800abda:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	430a      	orrs	r2, r1
 800abe8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abee:	f003 0308 	and.w	r3, r3, #8
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d00a      	beq.n	800ac0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	685b      	ldr	r3, [r3, #4]
 800abfc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	430a      	orrs	r2, r1
 800ac0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac10:	f003 0310 	and.w	r3, r3, #16
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d00a      	beq.n	800ac2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	689b      	ldr	r3, [r3, #8]
 800ac1e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	430a      	orrs	r2, r1
 800ac2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac32:	f003 0320 	and.w	r3, r3, #32
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d00a      	beq.n	800ac50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	689b      	ldr	r3, [r3, #8]
 800ac40:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	430a      	orrs	r2, r1
 800ac4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d01a      	beq.n	800ac92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	685b      	ldr	r3, [r3, #4]
 800ac62:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	430a      	orrs	r2, r1
 800ac70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ac7a:	d10a      	bne.n	800ac92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	685b      	ldr	r3, [r3, #4]
 800ac82:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	430a      	orrs	r2, r1
 800ac90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d00a      	beq.n	800acb4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	685b      	ldr	r3, [r3, #4]
 800aca4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	430a      	orrs	r2, r1
 800acb2:	605a      	str	r2, [r3, #4]
  }
}
 800acb4:	bf00      	nop
 800acb6:	370c      	adds	r7, #12
 800acb8:	46bd      	mov	sp, r7
 800acba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acbe:	4770      	bx	lr

0800acc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b086      	sub	sp, #24
 800acc4:	af02      	add	r7, sp, #8
 800acc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2200      	movs	r2, #0
 800accc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800acd0:	f7f9 f812 	bl	8003cf8 <HAL_GetTick>
 800acd4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	f003 0308 	and.w	r3, r3, #8
 800ace0:	2b08      	cmp	r3, #8
 800ace2:	d10e      	bne.n	800ad02 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ace4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ace8:	9300      	str	r3, [sp, #0]
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	2200      	movs	r2, #0
 800acee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800acf2:	6878      	ldr	r0, [r7, #4]
 800acf4:	f000 f82f 	bl	800ad56 <UART_WaitOnFlagUntilTimeout>
 800acf8:	4603      	mov	r3, r0
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d001      	beq.n	800ad02 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800acfe:	2303      	movs	r3, #3
 800ad00:	e025      	b.n	800ad4e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	f003 0304 	and.w	r3, r3, #4
 800ad0c:	2b04      	cmp	r3, #4
 800ad0e:	d10e      	bne.n	800ad2e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ad10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ad14:	9300      	str	r3, [sp, #0]
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	2200      	movs	r2, #0
 800ad1a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ad1e:	6878      	ldr	r0, [r7, #4]
 800ad20:	f000 f819 	bl	800ad56 <UART_WaitOnFlagUntilTimeout>
 800ad24:	4603      	mov	r3, r0
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d001      	beq.n	800ad2e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ad2a:	2303      	movs	r3, #3
 800ad2c:	e00f      	b.n	800ad4e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	2220      	movs	r2, #32
 800ad32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	2220      	movs	r2, #32
 800ad3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	2200      	movs	r2, #0
 800ad42:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	2200      	movs	r2, #0
 800ad48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ad4c:	2300      	movs	r3, #0
}
 800ad4e:	4618      	mov	r0, r3
 800ad50:	3710      	adds	r7, #16
 800ad52:	46bd      	mov	sp, r7
 800ad54:	bd80      	pop	{r7, pc}

0800ad56 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ad56:	b580      	push	{r7, lr}
 800ad58:	b09c      	sub	sp, #112	; 0x70
 800ad5a:	af00      	add	r7, sp, #0
 800ad5c:	60f8      	str	r0, [r7, #12]
 800ad5e:	60b9      	str	r1, [r7, #8]
 800ad60:	603b      	str	r3, [r7, #0]
 800ad62:	4613      	mov	r3, r2
 800ad64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ad66:	e0a9      	b.n	800aebc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ad68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad6e:	f000 80a5 	beq.w	800aebc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ad72:	f7f8 ffc1 	bl	8003cf8 <HAL_GetTick>
 800ad76:	4602      	mov	r2, r0
 800ad78:	683b      	ldr	r3, [r7, #0]
 800ad7a:	1ad3      	subs	r3, r2, r3
 800ad7c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ad7e:	429a      	cmp	r2, r3
 800ad80:	d302      	bcc.n	800ad88 <UART_WaitOnFlagUntilTimeout+0x32>
 800ad82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d140      	bne.n	800ae0a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad90:	e853 3f00 	ldrex	r3, [r3]
 800ad94:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ad96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad98:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ad9c:	667b      	str	r3, [r7, #100]	; 0x64
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	461a      	mov	r2, r3
 800ada4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ada6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ada8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adaa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800adac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800adae:	e841 2300 	strex	r3, r2, [r1]
 800adb2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800adb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d1e6      	bne.n	800ad88 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	3308      	adds	r3, #8
 800adc0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adc4:	e853 3f00 	ldrex	r3, [r3]
 800adc8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800adca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adcc:	f023 0301 	bic.w	r3, r3, #1
 800add0:	663b      	str	r3, [r7, #96]	; 0x60
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	3308      	adds	r3, #8
 800add8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800adda:	64ba      	str	r2, [r7, #72]	; 0x48
 800addc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adde:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ade0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ade2:	e841 2300 	strex	r3, r2, [r1]
 800ade6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ade8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800adea:	2b00      	cmp	r3, #0
 800adec:	d1e5      	bne.n	800adba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	2220      	movs	r2, #32
 800adf2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	2220      	movs	r2, #32
 800adfa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	2200      	movs	r2, #0
 800ae02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800ae06:	2303      	movs	r3, #3
 800ae08:	e069      	b.n	800aede <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	f003 0304 	and.w	r3, r3, #4
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d051      	beq.n	800aebc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	69db      	ldr	r3, [r3, #28]
 800ae1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ae22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ae26:	d149      	bne.n	800aebc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ae30:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae3a:	e853 3f00 	ldrex	r3, [r3]
 800ae3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ae40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae42:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ae46:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	461a      	mov	r2, r3
 800ae4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae50:	637b      	str	r3, [r7, #52]	; 0x34
 800ae52:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ae56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ae58:	e841 2300 	strex	r3, r2, [r1]
 800ae5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ae5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d1e6      	bne.n	800ae32 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	3308      	adds	r3, #8
 800ae6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae6c:	697b      	ldr	r3, [r7, #20]
 800ae6e:	e853 3f00 	ldrex	r3, [r3]
 800ae72:	613b      	str	r3, [r7, #16]
   return(result);
 800ae74:	693b      	ldr	r3, [r7, #16]
 800ae76:	f023 0301 	bic.w	r3, r3, #1
 800ae7a:	66bb      	str	r3, [r7, #104]	; 0x68
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	3308      	adds	r3, #8
 800ae82:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ae84:	623a      	str	r2, [r7, #32]
 800ae86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae88:	69f9      	ldr	r1, [r7, #28]
 800ae8a:	6a3a      	ldr	r2, [r7, #32]
 800ae8c:	e841 2300 	strex	r3, r2, [r1]
 800ae90:	61bb      	str	r3, [r7, #24]
   return(result);
 800ae92:	69bb      	ldr	r3, [r7, #24]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d1e5      	bne.n	800ae64 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	2220      	movs	r2, #32
 800ae9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	2220      	movs	r2, #32
 800aea4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	2220      	movs	r2, #32
 800aeac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800aeb8:	2303      	movs	r3, #3
 800aeba:	e010      	b.n	800aede <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	69da      	ldr	r2, [r3, #28]
 800aec2:	68bb      	ldr	r3, [r7, #8]
 800aec4:	4013      	ands	r3, r2
 800aec6:	68ba      	ldr	r2, [r7, #8]
 800aec8:	429a      	cmp	r2, r3
 800aeca:	bf0c      	ite	eq
 800aecc:	2301      	moveq	r3, #1
 800aece:	2300      	movne	r3, #0
 800aed0:	b2db      	uxtb	r3, r3
 800aed2:	461a      	mov	r2, r3
 800aed4:	79fb      	ldrb	r3, [r7, #7]
 800aed6:	429a      	cmp	r2, r3
 800aed8:	f43f af46 	beq.w	800ad68 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aedc:	2300      	movs	r3, #0
}
 800aede:	4618      	mov	r0, r3
 800aee0:	3770      	adds	r7, #112	; 0x70
 800aee2:	46bd      	mov	sp, r7
 800aee4:	bd80      	pop	{r7, pc}

0800aee6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aee6:	b480      	push	{r7}
 800aee8:	b095      	sub	sp, #84	; 0x54
 800aeea:	af00      	add	r7, sp, #0
 800aeec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aef6:	e853 3f00 	ldrex	r3, [r3]
 800aefa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800aefc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aefe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800af02:	64fb      	str	r3, [r7, #76]	; 0x4c
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	461a      	mov	r2, r3
 800af0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af0c:	643b      	str	r3, [r7, #64]	; 0x40
 800af0e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af10:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800af12:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800af14:	e841 2300 	strex	r3, r2, [r1]
 800af18:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800af1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d1e6      	bne.n	800aeee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	3308      	adds	r3, #8
 800af26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af28:	6a3b      	ldr	r3, [r7, #32]
 800af2a:	e853 3f00 	ldrex	r3, [r3]
 800af2e:	61fb      	str	r3, [r7, #28]
   return(result);
 800af30:	69fb      	ldr	r3, [r7, #28]
 800af32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800af36:	f023 0301 	bic.w	r3, r3, #1
 800af3a:	64bb      	str	r3, [r7, #72]	; 0x48
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	3308      	adds	r3, #8
 800af42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800af44:	62fa      	str	r2, [r7, #44]	; 0x2c
 800af46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800af4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af4c:	e841 2300 	strex	r3, r2, [r1]
 800af50:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800af52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af54:	2b00      	cmp	r3, #0
 800af56:	d1e3      	bne.n	800af20 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af5c:	2b01      	cmp	r3, #1
 800af5e:	d118      	bne.n	800af92 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	e853 3f00 	ldrex	r3, [r3]
 800af6c:	60bb      	str	r3, [r7, #8]
   return(result);
 800af6e:	68bb      	ldr	r3, [r7, #8]
 800af70:	f023 0310 	bic.w	r3, r3, #16
 800af74:	647b      	str	r3, [r7, #68]	; 0x44
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	461a      	mov	r2, r3
 800af7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af7e:	61bb      	str	r3, [r7, #24]
 800af80:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af82:	6979      	ldr	r1, [r7, #20]
 800af84:	69ba      	ldr	r2, [r7, #24]
 800af86:	e841 2300 	strex	r3, r2, [r1]
 800af8a:	613b      	str	r3, [r7, #16]
   return(result);
 800af8c:	693b      	ldr	r3, [r7, #16]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d1e6      	bne.n	800af60 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	2220      	movs	r2, #32
 800af96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	2200      	movs	r2, #0
 800af9e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2200      	movs	r2, #0
 800afa4:	671a      	str	r2, [r3, #112]	; 0x70
}
 800afa6:	bf00      	nop
 800afa8:	3754      	adds	r7, #84	; 0x54
 800afaa:	46bd      	mov	sp, r7
 800afac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb0:	4770      	bx	lr

0800afb2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800afb2:	b580      	push	{r7, lr}
 800afb4:	b084      	sub	sp, #16
 800afb6:	af00      	add	r7, sp, #0
 800afb8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afbe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	2200      	movs	r2, #0
 800afc4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	2200      	movs	r2, #0
 800afcc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800afd0:	68f8      	ldr	r0, [r7, #12]
 800afd2:	f7ff faf1 	bl	800a5b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800afd6:	bf00      	nop
 800afd8:	3710      	adds	r7, #16
 800afda:	46bd      	mov	sp, r7
 800afdc:	bd80      	pop	{r7, pc}

0800afde <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800afde:	b480      	push	{r7}
 800afe0:	b08f      	sub	sp, #60	; 0x3c
 800afe2:	af00      	add	r7, sp, #0
 800afe4:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800afec:	2b21      	cmp	r3, #33	; 0x21
 800afee:	d14c      	bne.n	800b08a <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800aff6:	b29b      	uxth	r3, r3
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d132      	bne.n	800b062 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b002:	6a3b      	ldr	r3, [r7, #32]
 800b004:	e853 3f00 	ldrex	r3, [r3]
 800b008:	61fb      	str	r3, [r7, #28]
   return(result);
 800b00a:	69fb      	ldr	r3, [r7, #28]
 800b00c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b010:	637b      	str	r3, [r7, #52]	; 0x34
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	461a      	mov	r2, r3
 800b018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b01a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b01c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b01e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b020:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b022:	e841 2300 	strex	r3, r2, [r1]
 800b026:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d1e6      	bne.n	800affc <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	e853 3f00 	ldrex	r3, [r3]
 800b03a:	60bb      	str	r3, [r7, #8]
   return(result);
 800b03c:	68bb      	ldr	r3, [r7, #8]
 800b03e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b042:	633b      	str	r3, [r7, #48]	; 0x30
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	461a      	mov	r2, r3
 800b04a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b04c:	61bb      	str	r3, [r7, #24]
 800b04e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b050:	6979      	ldr	r1, [r7, #20]
 800b052:	69ba      	ldr	r2, [r7, #24]
 800b054:	e841 2300 	strex	r3, r2, [r1]
 800b058:	613b      	str	r3, [r7, #16]
   return(result);
 800b05a:	693b      	ldr	r3, [r7, #16]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d1e6      	bne.n	800b02e <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800b060:	e013      	b.n	800b08a <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b066:	781a      	ldrb	r2, [r3, #0]
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b072:	1c5a      	adds	r2, r3, #1
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b07e:	b29b      	uxth	r3, r3
 800b080:	3b01      	subs	r3, #1
 800b082:	b29a      	uxth	r2, r3
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800b08a:	bf00      	nop
 800b08c:	373c      	adds	r7, #60	; 0x3c
 800b08e:	46bd      	mov	sp, r7
 800b090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b094:	4770      	bx	lr

0800b096 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b096:	b480      	push	{r7}
 800b098:	b091      	sub	sp, #68	; 0x44
 800b09a:	af00      	add	r7, sp, #0
 800b09c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b0a4:	2b21      	cmp	r3, #33	; 0x21
 800b0a6:	d151      	bne.n	800b14c <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b0ae:	b29b      	uxth	r3, r3
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d132      	bne.n	800b11a <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0bc:	e853 3f00 	ldrex	r3, [r3]
 800b0c0:	623b      	str	r3, [r7, #32]
   return(result);
 800b0c2:	6a3b      	ldr	r3, [r7, #32]
 800b0c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b0c8:	63bb      	str	r3, [r7, #56]	; 0x38
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	461a      	mov	r2, r3
 800b0d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0d2:	633b      	str	r3, [r7, #48]	; 0x30
 800b0d4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b0d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b0da:	e841 2300 	strex	r3, r2, [r1]
 800b0de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b0e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d1e6      	bne.n	800b0b4 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0ec:	693b      	ldr	r3, [r7, #16]
 800b0ee:	e853 3f00 	ldrex	r3, [r3]
 800b0f2:	60fb      	str	r3, [r7, #12]
   return(result);
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0fa:	637b      	str	r3, [r7, #52]	; 0x34
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	461a      	mov	r2, r3
 800b102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b104:	61fb      	str	r3, [r7, #28]
 800b106:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b108:	69b9      	ldr	r1, [r7, #24]
 800b10a:	69fa      	ldr	r2, [r7, #28]
 800b10c:	e841 2300 	strex	r3, r2, [r1]
 800b110:	617b      	str	r3, [r7, #20]
   return(result);
 800b112:	697b      	ldr	r3, [r7, #20]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d1e6      	bne.n	800b0e6 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800b118:	e018      	b.n	800b14c <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b11e:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800b120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b122:	881b      	ldrh	r3, [r3, #0]
 800b124:	461a      	mov	r2, r3
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b12e:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b134:	1c9a      	adds	r2, r3, #2
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b140:	b29b      	uxth	r3, r3
 800b142:	3b01      	subs	r3, #1
 800b144:	b29a      	uxth	r2, r3
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800b14c:	bf00      	nop
 800b14e:	3744      	adds	r7, #68	; 0x44
 800b150:	46bd      	mov	sp, r7
 800b152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b156:	4770      	bx	lr

0800b158 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b158:	b480      	push	{r7}
 800b15a:	b091      	sub	sp, #68	; 0x44
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b166:	2b21      	cmp	r3, #33	; 0x21
 800b168:	d160      	bne.n	800b22c <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b170:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800b172:	e057      	b.n	800b224 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b17a:	b29b      	uxth	r3, r3
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d133      	bne.n	800b1e8 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	3308      	adds	r3, #8
 800b186:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b18a:	e853 3f00 	ldrex	r3, [r3]
 800b18e:	623b      	str	r3, [r7, #32]
   return(result);
 800b190:	6a3b      	ldr	r3, [r7, #32]
 800b192:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800b196:	63bb      	str	r3, [r7, #56]	; 0x38
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	3308      	adds	r3, #8
 800b19e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b1a0:	633a      	str	r2, [r7, #48]	; 0x30
 800b1a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b1a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b1a8:	e841 2300 	strex	r3, r2, [r1]
 800b1ac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b1ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d1e5      	bne.n	800b180 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1ba:	693b      	ldr	r3, [r7, #16]
 800b1bc:	e853 3f00 	ldrex	r3, [r3]
 800b1c0:	60fb      	str	r3, [r7, #12]
   return(result);
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1c8:	637b      	str	r3, [r7, #52]	; 0x34
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	461a      	mov	r2, r3
 800b1d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1d2:	61fb      	str	r3, [r7, #28]
 800b1d4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1d6:	69b9      	ldr	r1, [r7, #24]
 800b1d8:	69fa      	ldr	r2, [r7, #28]
 800b1da:	e841 2300 	strex	r3, r2, [r1]
 800b1de:	617b      	str	r3, [r7, #20]
   return(result);
 800b1e0:	697b      	ldr	r3, [r7, #20]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d1e6      	bne.n	800b1b4 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800b1e6:	e021      	b.n	800b22c <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	69db      	ldr	r3, [r3, #28]
 800b1ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d013      	beq.n	800b21e <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1fa:	781a      	ldrb	r2, [r3, #0]
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b206:	1c5a      	adds	r2, r3, #1
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b212:	b29b      	uxth	r3, r3
 800b214:	3b01      	subs	r3, #1
 800b216:	b29a      	uxth	r2, r3
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800b21e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b220:	3b01      	subs	r3, #1
 800b222:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800b224:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b226:	2b00      	cmp	r3, #0
 800b228:	d1a4      	bne.n	800b174 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800b22a:	e7ff      	b.n	800b22c <UART_TxISR_8BIT_FIFOEN+0xd4>
 800b22c:	bf00      	nop
 800b22e:	3744      	adds	r7, #68	; 0x44
 800b230:	46bd      	mov	sp, r7
 800b232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b236:	4770      	bx	lr

0800b238 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b238:	b480      	push	{r7}
 800b23a:	b091      	sub	sp, #68	; 0x44
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b246:	2b21      	cmp	r3, #33	; 0x21
 800b248:	d165      	bne.n	800b316 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b250:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800b252:	e05c      	b.n	800b30e <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b25a:	b29b      	uxth	r3, r3
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d133      	bne.n	800b2c8 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	3308      	adds	r3, #8
 800b266:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b268:	6a3b      	ldr	r3, [r7, #32]
 800b26a:	e853 3f00 	ldrex	r3, [r3]
 800b26e:	61fb      	str	r3, [r7, #28]
   return(result);
 800b270:	69fb      	ldr	r3, [r7, #28]
 800b272:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800b276:	637b      	str	r3, [r7, #52]	; 0x34
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	3308      	adds	r3, #8
 800b27e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b280:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b282:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b284:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b286:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b288:	e841 2300 	strex	r3, r2, [r1]
 800b28c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b28e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b290:	2b00      	cmp	r3, #0
 800b292:	d1e5      	bne.n	800b260 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	e853 3f00 	ldrex	r3, [r3]
 800b2a0:	60bb      	str	r3, [r7, #8]
   return(result);
 800b2a2:	68bb      	ldr	r3, [r7, #8]
 800b2a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2a8:	633b      	str	r3, [r7, #48]	; 0x30
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	461a      	mov	r2, r3
 800b2b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2b2:	61bb      	str	r3, [r7, #24]
 800b2b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2b6:	6979      	ldr	r1, [r7, #20]
 800b2b8:	69ba      	ldr	r2, [r7, #24]
 800b2ba:	e841 2300 	strex	r3, r2, [r1]
 800b2be:	613b      	str	r3, [r7, #16]
   return(result);
 800b2c0:	693b      	ldr	r3, [r7, #16]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d1e6      	bne.n	800b294 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800b2c6:	e026      	b.n	800b316 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	69db      	ldr	r3, [r3, #28]
 800b2ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d018      	beq.n	800b308 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2da:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800b2dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2de:	881b      	ldrh	r3, [r3, #0]
 800b2e0:	461a      	mov	r2, r3
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b2ea:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2f0:	1c9a      	adds	r2, r3, #2
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b2fc:	b29b      	uxth	r3, r3
 800b2fe:	3b01      	subs	r3, #1
 800b300:	b29a      	uxth	r2, r3
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800b308:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b30a:	3b01      	subs	r3, #1
 800b30c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800b30e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b310:	2b00      	cmp	r3, #0
 800b312:	d19f      	bne.n	800b254 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800b314:	e7ff      	b.n	800b316 <UART_TxISR_16BIT_FIFOEN+0xde>
 800b316:	bf00      	nop
 800b318:	3744      	adds	r7, #68	; 0x44
 800b31a:	46bd      	mov	sp, r7
 800b31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b320:	4770      	bx	lr

0800b322 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b322:	b580      	push	{r7, lr}
 800b324:	b088      	sub	sp, #32
 800b326:	af00      	add	r7, sp, #0
 800b328:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	e853 3f00 	ldrex	r3, [r3]
 800b336:	60bb      	str	r3, [r7, #8]
   return(result);
 800b338:	68bb      	ldr	r3, [r7, #8]
 800b33a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b33e:	61fb      	str	r3, [r7, #28]
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	461a      	mov	r2, r3
 800b346:	69fb      	ldr	r3, [r7, #28]
 800b348:	61bb      	str	r3, [r7, #24]
 800b34a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b34c:	6979      	ldr	r1, [r7, #20]
 800b34e:	69ba      	ldr	r2, [r7, #24]
 800b350:	e841 2300 	strex	r3, r2, [r1]
 800b354:	613b      	str	r3, [r7, #16]
   return(result);
 800b356:	693b      	ldr	r3, [r7, #16]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d1e6      	bne.n	800b32a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	2220      	movs	r2, #32
 800b360:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	2200      	movs	r2, #0
 800b368:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b36a:	6878      	ldr	r0, [r7, #4]
 800b36c:	f7f5 fec0 	bl	80010f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b370:	bf00      	nop
 800b372:	3720      	adds	r7, #32
 800b374:	46bd      	mov	sp, r7
 800b376:	bd80      	pop	{r7, pc}

0800b378 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b378:	b480      	push	{r7}
 800b37a:	b083      	sub	sp, #12
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b380:	bf00      	nop
 800b382:	370c      	adds	r7, #12
 800b384:	46bd      	mov	sp, r7
 800b386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38a:	4770      	bx	lr

0800b38c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b38c:	b480      	push	{r7}
 800b38e:	b083      	sub	sp, #12
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b394:	bf00      	nop
 800b396:	370c      	adds	r7, #12
 800b398:	46bd      	mov	sp, r7
 800b39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39e:	4770      	bx	lr

0800b3a0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b3a0:	b480      	push	{r7}
 800b3a2:	b083      	sub	sp, #12
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b3a8:	bf00      	nop
 800b3aa:	370c      	adds	r7, #12
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b2:	4770      	bx	lr

0800b3b4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b3b4:	b480      	push	{r7}
 800b3b6:	b085      	sub	sp, #20
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b3c2:	2b01      	cmp	r3, #1
 800b3c4:	d101      	bne.n	800b3ca <HAL_UARTEx_DisableFifoMode+0x16>
 800b3c6:	2302      	movs	r3, #2
 800b3c8:	e027      	b.n	800b41a <HAL_UARTEx_DisableFifoMode+0x66>
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	2201      	movs	r2, #1
 800b3ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	2224      	movs	r2, #36	; 0x24
 800b3d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	681a      	ldr	r2, [r3, #0]
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	f022 0201 	bic.w	r2, r2, #1
 800b3f0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b3f8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	68fa      	ldr	r2, [r7, #12]
 800b406:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	2220      	movs	r2, #32
 800b40c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	2200      	movs	r2, #0
 800b414:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b418:	2300      	movs	r3, #0
}
 800b41a:	4618      	mov	r0, r3
 800b41c:	3714      	adds	r7, #20
 800b41e:	46bd      	mov	sp, r7
 800b420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b424:	4770      	bx	lr

0800b426 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b426:	b580      	push	{r7, lr}
 800b428:	b084      	sub	sp, #16
 800b42a:	af00      	add	r7, sp, #0
 800b42c:	6078      	str	r0, [r7, #4]
 800b42e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b436:	2b01      	cmp	r3, #1
 800b438:	d101      	bne.n	800b43e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b43a:	2302      	movs	r3, #2
 800b43c:	e02d      	b.n	800b49a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	2201      	movs	r2, #1
 800b442:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	2224      	movs	r2, #36	; 0x24
 800b44a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	681a      	ldr	r2, [r3, #0]
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	f022 0201 	bic.w	r2, r2, #1
 800b464:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	689b      	ldr	r3, [r3, #8]
 800b46c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	683a      	ldr	r2, [r7, #0]
 800b476:	430a      	orrs	r2, r1
 800b478:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b47a:	6878      	ldr	r0, [r7, #4]
 800b47c:	f000 f850 	bl	800b520 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	68fa      	ldr	r2, [r7, #12]
 800b486:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	2220      	movs	r2, #32
 800b48c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	2200      	movs	r2, #0
 800b494:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b498:	2300      	movs	r3, #0
}
 800b49a:	4618      	mov	r0, r3
 800b49c:	3710      	adds	r7, #16
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	bd80      	pop	{r7, pc}

0800b4a2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b4a2:	b580      	push	{r7, lr}
 800b4a4:	b084      	sub	sp, #16
 800b4a6:	af00      	add	r7, sp, #0
 800b4a8:	6078      	str	r0, [r7, #4]
 800b4aa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b4b2:	2b01      	cmp	r3, #1
 800b4b4:	d101      	bne.n	800b4ba <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b4b6:	2302      	movs	r3, #2
 800b4b8:	e02d      	b.n	800b516 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	2201      	movs	r2, #1
 800b4be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	2224      	movs	r2, #36	; 0x24
 800b4c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	681a      	ldr	r2, [r3, #0]
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	f022 0201 	bic.w	r2, r2, #1
 800b4e0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	689b      	ldr	r3, [r3, #8]
 800b4e8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	683a      	ldr	r2, [r7, #0]
 800b4f2:	430a      	orrs	r2, r1
 800b4f4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b4f6:	6878      	ldr	r0, [r7, #4]
 800b4f8:	f000 f812 	bl	800b520 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	68fa      	ldr	r2, [r7, #12]
 800b502:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	2220      	movs	r2, #32
 800b508:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	2200      	movs	r2, #0
 800b510:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b514:	2300      	movs	r3, #0
}
 800b516:	4618      	mov	r0, r3
 800b518:	3710      	adds	r7, #16
 800b51a:	46bd      	mov	sp, r7
 800b51c:	bd80      	pop	{r7, pc}
	...

0800b520 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b520:	b480      	push	{r7}
 800b522:	b085      	sub	sp, #20
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d108      	bne.n	800b542 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	2201      	movs	r2, #1
 800b534:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	2201      	movs	r2, #1
 800b53c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b540:	e031      	b.n	800b5a6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b542:	2308      	movs	r3, #8
 800b544:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b546:	2308      	movs	r3, #8
 800b548:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	689b      	ldr	r3, [r3, #8]
 800b550:	0e5b      	lsrs	r3, r3, #25
 800b552:	b2db      	uxtb	r3, r3
 800b554:	f003 0307 	and.w	r3, r3, #7
 800b558:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	689b      	ldr	r3, [r3, #8]
 800b560:	0f5b      	lsrs	r3, r3, #29
 800b562:	b2db      	uxtb	r3, r3
 800b564:	f003 0307 	and.w	r3, r3, #7
 800b568:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b56a:	7bbb      	ldrb	r3, [r7, #14]
 800b56c:	7b3a      	ldrb	r2, [r7, #12]
 800b56e:	4911      	ldr	r1, [pc, #68]	; (800b5b4 <UARTEx_SetNbDataToProcess+0x94>)
 800b570:	5c8a      	ldrb	r2, [r1, r2]
 800b572:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b576:	7b3a      	ldrb	r2, [r7, #12]
 800b578:	490f      	ldr	r1, [pc, #60]	; (800b5b8 <UARTEx_SetNbDataToProcess+0x98>)
 800b57a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b57c:	fb93 f3f2 	sdiv	r3, r3, r2
 800b580:	b29a      	uxth	r2, r3
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b588:	7bfb      	ldrb	r3, [r7, #15]
 800b58a:	7b7a      	ldrb	r2, [r7, #13]
 800b58c:	4909      	ldr	r1, [pc, #36]	; (800b5b4 <UARTEx_SetNbDataToProcess+0x94>)
 800b58e:	5c8a      	ldrb	r2, [r1, r2]
 800b590:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b594:	7b7a      	ldrb	r2, [r7, #13]
 800b596:	4908      	ldr	r1, [pc, #32]	; (800b5b8 <UARTEx_SetNbDataToProcess+0x98>)
 800b598:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b59a:	fb93 f3f2 	sdiv	r3, r3, r2
 800b59e:	b29a      	uxth	r2, r3
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b5a6:	bf00      	nop
 800b5a8:	3714      	adds	r7, #20
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b0:	4770      	bx	lr
 800b5b2:	bf00      	nop
 800b5b4:	080108c0 	.word	0x080108c0
 800b5b8:	080108c8 	.word	0x080108c8

0800b5bc <SPI4W_Write_Byte>:
		Gpio analog SPI
	I2C_Write_Byte(value, cmd):
		HAL library hardware I2C
********************************************************************************/
uint8_t SPI4W_Write_Byte(uint8_t value)
{
 800b5bc:	b480      	push	{r7}
 800b5be:	b083      	sub	sp, #12
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	4603      	mov	r3, r0
 800b5c4:	71fb      	strb	r3, [r7, #7]
        SPI_SCK_1;
        Driver_Delay_us(10);
        value = (value << 1);
    }
#else
    __HAL_SPI_ENABLE(&hspi1);
 800b5c6:	4b17      	ldr	r3, [pc, #92]	; (800b624 <SPI4W_Write_Byte+0x68>)
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	681a      	ldr	r2, [r3, #0]
 800b5cc:	4b15      	ldr	r3, [pc, #84]	; (800b624 <SPI4W_Write_Byte+0x68>)
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b5d4:	601a      	str	r2, [r3, #0]
    SPI1->CR2 |= (1) << 12;
 800b5d6:	4b14      	ldr	r3, [pc, #80]	; (800b628 <SPI4W_Write_Byte+0x6c>)
 800b5d8:	685b      	ldr	r3, [r3, #4]
 800b5da:	4a13      	ldr	r2, [pc, #76]	; (800b628 <SPI4W_Write_Byte+0x6c>)
 800b5dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b5e0:	6053      	str	r3, [r2, #4]

    while((SPI1->SR & (1 << 1)) == 0)
 800b5e2:	bf00      	nop
 800b5e4:	4b10      	ldr	r3, [pc, #64]	; (800b628 <SPI4W_Write_Byte+0x6c>)
 800b5e6:	689b      	ldr	r3, [r3, #8]
 800b5e8:	f003 0302 	and.w	r3, r3, #2
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d0f9      	beq.n	800b5e4 <SPI4W_Write_Byte+0x28>
        ;

    *((__IO uint8_t *)(&SPI1->DR)) = value;
 800b5f0:	4a0e      	ldr	r2, [pc, #56]	; (800b62c <SPI4W_Write_Byte+0x70>)
 800b5f2:	79fb      	ldrb	r3, [r7, #7]
 800b5f4:	7013      	strb	r3, [r2, #0]

    while(SPI1->SR & (1 << 7)) ; //Wait for not busy
 800b5f6:	bf00      	nop
 800b5f8:	4b0b      	ldr	r3, [pc, #44]	; (800b628 <SPI4W_Write_Byte+0x6c>)
 800b5fa:	689b      	ldr	r3, [r3, #8]
 800b5fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b600:	2b00      	cmp	r3, #0
 800b602:	d1f9      	bne.n	800b5f8 <SPI4W_Write_Byte+0x3c>

    while((SPI1->SR & (1 << 0)) == 0) ; // Wait for the receiving area to be empty
 800b604:	bf00      	nop
 800b606:	4b08      	ldr	r3, [pc, #32]	; (800b628 <SPI4W_Write_Byte+0x6c>)
 800b608:	689b      	ldr	r3, [r3, #8]
 800b60a:	f003 0301 	and.w	r3, r3, #1
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d0f9      	beq.n	800b606 <SPI4W_Write_Byte+0x4a>

    return *((__IO uint8_t *)(&SPI1->DR));
 800b612:	4b06      	ldr	r3, [pc, #24]	; (800b62c <SPI4W_Write_Byte+0x70>)
 800b614:	781b      	ldrb	r3, [r3, #0]
 800b616:	b2db      	uxtb	r3, r3
#endif
}
 800b618:	4618      	mov	r0, r3
 800b61a:	370c      	adds	r7, #12
 800b61c:	46bd      	mov	sp, r7
 800b61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b622:	4770      	bx	lr
 800b624:	20001788 	.word	0x20001788
 800b628:	40013000 	.word	0x40013000
 800b62c:	4001300c 	.word	0x4001300c

0800b630 <Driver_Delay_ms>:
note:
	Driver_Delay_ms(xms) : Delay x ms
	Driver_Delay_us(xus) : Delay x us
********************************************************************************/
void Driver_Delay_ms(uint32_t xms)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b082      	sub	sp, #8
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
    HAL_Delay(xms);
 800b638:	6878      	ldr	r0, [r7, #4]
 800b63a:	f7f8 fb69 	bl	8003d10 <HAL_Delay>
}
 800b63e:	bf00      	nop
 800b640:	3708      	adds	r7, #8
 800b642:	46bd      	mov	sp, r7
 800b644:	bd80      	pop	{r7, pc}
	...

0800b648 <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(UBYTE *image, UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 800b648:	b480      	push	{r7}
 800b64a:	b085      	sub	sp, #20
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	60f8      	str	r0, [r7, #12]
 800b650:	4608      	mov	r0, r1
 800b652:	4611      	mov	r1, r2
 800b654:	461a      	mov	r2, r3
 800b656:	4603      	mov	r3, r0
 800b658:	817b      	strh	r3, [r7, #10]
 800b65a:	460b      	mov	r3, r1
 800b65c:	813b      	strh	r3, [r7, #8]
 800b65e:	4613      	mov	r3, r2
 800b660:	80fb      	strh	r3, [r7, #6]
    Paint.Image = NULL;
 800b662:	4b23      	ldr	r3, [pc, #140]	; (800b6f0 <Paint_NewImage+0xa8>)
 800b664:	2200      	movs	r2, #0
 800b666:	601a      	str	r2, [r3, #0]
    Paint.Image = image;
 800b668:	4a21      	ldr	r2, [pc, #132]	; (800b6f0 <Paint_NewImage+0xa8>)
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	6013      	str	r3, [r2, #0]

    Paint.WidthMemory = Width;
 800b66e:	4a20      	ldr	r2, [pc, #128]	; (800b6f0 <Paint_NewImage+0xa8>)
 800b670:	897b      	ldrh	r3, [r7, #10]
 800b672:	8113      	strh	r3, [r2, #8]
    Paint.HeightMemory = Height;
 800b674:	4a1e      	ldr	r2, [pc, #120]	; (800b6f0 <Paint_NewImage+0xa8>)
 800b676:	893b      	ldrh	r3, [r7, #8]
 800b678:	8153      	strh	r3, [r2, #10]
    Paint.Color = Color;    
 800b67a:	4a1d      	ldr	r2, [pc, #116]	; (800b6f0 <Paint_NewImage+0xa8>)
 800b67c:	8b3b      	ldrh	r3, [r7, #24]
 800b67e:	8193      	strh	r3, [r2, #12]
		Paint.Scale = 2;
 800b680:	4b1b      	ldr	r3, [pc, #108]	; (800b6f0 <Paint_NewImage+0xa8>)
 800b682:	2202      	movs	r2, #2
 800b684:	82da      	strh	r2, [r3, #22]
		
    Paint.WidthByte = (Width % 8 == 0)? (Width / 8 ): (Width / 8 + 1);
 800b686:	897b      	ldrh	r3, [r7, #10]
 800b688:	f003 0307 	and.w	r3, r3, #7
 800b68c:	b29b      	uxth	r3, r3
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d103      	bne.n	800b69a <Paint_NewImage+0x52>
 800b692:	897b      	ldrh	r3, [r7, #10]
 800b694:	08db      	lsrs	r3, r3, #3
 800b696:	b29b      	uxth	r3, r3
 800b698:	e004      	b.n	800b6a4 <Paint_NewImage+0x5c>
 800b69a:	897b      	ldrh	r3, [r7, #10]
 800b69c:	08db      	lsrs	r3, r3, #3
 800b69e:	b29b      	uxth	r3, r3
 800b6a0:	3301      	adds	r3, #1
 800b6a2:	b29b      	uxth	r3, r3
 800b6a4:	4a12      	ldr	r2, [pc, #72]	; (800b6f0 <Paint_NewImage+0xa8>)
 800b6a6:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;    
 800b6a8:	4a11      	ldr	r2, [pc, #68]	; (800b6f0 <Paint_NewImage+0xa8>)
 800b6aa:	893b      	ldrh	r3, [r7, #8]
 800b6ac:	8293      	strh	r3, [r2, #20]
//    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
//    printf(" EPD_WIDTH / 8 = %d\r\n",  122 / 8);
   
    Paint.Rotate = Rotate;
 800b6ae:	4a10      	ldr	r2, [pc, #64]	; (800b6f0 <Paint_NewImage+0xa8>)
 800b6b0:	88fb      	ldrh	r3, [r7, #6]
 800b6b2:	81d3      	strh	r3, [r2, #14]
    Paint.Mirror = MIRROR_NONE;
 800b6b4:	4b0e      	ldr	r3, [pc, #56]	; (800b6f0 <Paint_NewImage+0xa8>)
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	821a      	strh	r2, [r3, #16]
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 800b6ba:	88fb      	ldrh	r3, [r7, #6]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d002      	beq.n	800b6c6 <Paint_NewImage+0x7e>
 800b6c0:	88fb      	ldrh	r3, [r7, #6]
 800b6c2:	2bb4      	cmp	r3, #180	; 0xb4
 800b6c4:	d106      	bne.n	800b6d4 <Paint_NewImage+0x8c>
        Paint.Width = Width;
 800b6c6:	4a0a      	ldr	r2, [pc, #40]	; (800b6f0 <Paint_NewImage+0xa8>)
 800b6c8:	897b      	ldrh	r3, [r7, #10]
 800b6ca:	8093      	strh	r3, [r2, #4]
        Paint.Height = Height;
 800b6cc:	4a08      	ldr	r2, [pc, #32]	; (800b6f0 <Paint_NewImage+0xa8>)
 800b6ce:	893b      	ldrh	r3, [r7, #8]
 800b6d0:	80d3      	strh	r3, [r2, #6]
 800b6d2:	e006      	b.n	800b6e2 <Paint_NewImage+0x9a>
    } else {
        Paint.Width = Height;
 800b6d4:	4a06      	ldr	r2, [pc, #24]	; (800b6f0 <Paint_NewImage+0xa8>)
 800b6d6:	893b      	ldrh	r3, [r7, #8]
 800b6d8:	8093      	strh	r3, [r2, #4]
        Paint.Height = Width;
 800b6da:	4a05      	ldr	r2, [pc, #20]	; (800b6f0 <Paint_NewImage+0xa8>)
 800b6dc:	897b      	ldrh	r3, [r7, #10]
 800b6de:	80d3      	strh	r3, [r2, #6]
    }
}
 800b6e0:	bf00      	nop
 800b6e2:	bf00      	nop
 800b6e4:	3714      	adds	r7, #20
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ec:	4770      	bx	lr
 800b6ee:	bf00      	nop
 800b6f0:	20001a50 	.word	0x20001a50

0800b6f4 <Paint_SelectImage>:
function: Select Image
parameter:
    image : Pointer to the image cache
******************************************************************************/
void Paint_SelectImage(UBYTE *image)
{
 800b6f4:	b480      	push	{r7}
 800b6f6:	b083      	sub	sp, #12
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]
    Paint.Image = image;
 800b6fc:	4a04      	ldr	r2, [pc, #16]	; (800b710 <Paint_SelectImage+0x1c>)
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	6013      	str	r3, [r2, #0]
}
 800b702:	bf00      	nop
 800b704:	370c      	adds	r7, #12
 800b706:	46bd      	mov	sp, r7
 800b708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70c:	4770      	bx	lr
 800b70e:	bf00      	nop
 800b710:	20001a50 	.word	0x20001a50

0800b714 <Paint_SetScale>:
        Debug("rotate = 0, 90, 180, 270\r\n");
    }
}

void Paint_SetScale(UBYTE scale)
{
 800b714:	b580      	push	{r7, lr}
 800b716:	b082      	sub	sp, #8
 800b718:	af00      	add	r7, sp, #0
 800b71a:	4603      	mov	r3, r0
 800b71c:	71fb      	strb	r3, [r7, #7]
    if(scale == 2){
 800b71e:	79fb      	ldrb	r3, [r7, #7]
 800b720:	2b02      	cmp	r3, #2
 800b722:	d118      	bne.n	800b756 <Paint_SetScale+0x42>
        Paint.Scale = scale;
 800b724:	79fb      	ldrb	r3, [r7, #7]
 800b726:	b29a      	uxth	r2, r3
 800b728:	4b33      	ldr	r3, [pc, #204]	; (800b7f8 <Paint_SetScale+0xe4>)
 800b72a:	82da      	strh	r2, [r3, #22]
        Paint.WidthByte = (Paint.WidthMemory % 8 == 0)? (Paint.WidthMemory / 8 ): (Paint.WidthMemory / 8 + 1);
 800b72c:	4b32      	ldr	r3, [pc, #200]	; (800b7f8 <Paint_SetScale+0xe4>)
 800b72e:	891b      	ldrh	r3, [r3, #8]
 800b730:	f003 0307 	and.w	r3, r3, #7
 800b734:	b29b      	uxth	r3, r3
 800b736:	2b00      	cmp	r3, #0
 800b738:	d104      	bne.n	800b744 <Paint_SetScale+0x30>
 800b73a:	4b2f      	ldr	r3, [pc, #188]	; (800b7f8 <Paint_SetScale+0xe4>)
 800b73c:	891b      	ldrh	r3, [r3, #8]
 800b73e:	08db      	lsrs	r3, r3, #3
 800b740:	b29b      	uxth	r3, r3
 800b742:	e005      	b.n	800b750 <Paint_SetScale+0x3c>
 800b744:	4b2c      	ldr	r3, [pc, #176]	; (800b7f8 <Paint_SetScale+0xe4>)
 800b746:	891b      	ldrh	r3, [r3, #8]
 800b748:	08db      	lsrs	r3, r3, #3
 800b74a:	b29b      	uxth	r3, r3
 800b74c:	3301      	adds	r3, #1
 800b74e:	b29b      	uxth	r3, r3
 800b750:	4a29      	ldr	r2, [pc, #164]	; (800b7f8 <Paint_SetScale+0xe4>)
 800b752:	8253      	strh	r3, [r2, #18]
        Paint.WidthByte = Paint.WidthMemory*2; 
    }else{
        Debug("Set Scale Input parameter error\r\n");
        Debug("Scale Only support: 2 4 16 65\r\n");
    }
}
 800b754:	e04b      	b.n	800b7ee <Paint_SetScale+0xda>
    }else if(scale == 4){
 800b756:	79fb      	ldrb	r3, [r7, #7]
 800b758:	2b04      	cmp	r3, #4
 800b75a:	d118      	bne.n	800b78e <Paint_SetScale+0x7a>
        Paint.Scale = scale;
 800b75c:	79fb      	ldrb	r3, [r7, #7]
 800b75e:	b29a      	uxth	r2, r3
 800b760:	4b25      	ldr	r3, [pc, #148]	; (800b7f8 <Paint_SetScale+0xe4>)
 800b762:	82da      	strh	r2, [r3, #22]
        Paint.WidthByte = (Paint.WidthMemory % 4 == 0)? (Paint.WidthMemory / 4 ): (Paint.WidthMemory / 4 + 1);
 800b764:	4b24      	ldr	r3, [pc, #144]	; (800b7f8 <Paint_SetScale+0xe4>)
 800b766:	891b      	ldrh	r3, [r3, #8]
 800b768:	f003 0303 	and.w	r3, r3, #3
 800b76c:	b29b      	uxth	r3, r3
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d104      	bne.n	800b77c <Paint_SetScale+0x68>
 800b772:	4b21      	ldr	r3, [pc, #132]	; (800b7f8 <Paint_SetScale+0xe4>)
 800b774:	891b      	ldrh	r3, [r3, #8]
 800b776:	089b      	lsrs	r3, r3, #2
 800b778:	b29b      	uxth	r3, r3
 800b77a:	e005      	b.n	800b788 <Paint_SetScale+0x74>
 800b77c:	4b1e      	ldr	r3, [pc, #120]	; (800b7f8 <Paint_SetScale+0xe4>)
 800b77e:	891b      	ldrh	r3, [r3, #8]
 800b780:	089b      	lsrs	r3, r3, #2
 800b782:	b29b      	uxth	r3, r3
 800b784:	3301      	adds	r3, #1
 800b786:	b29b      	uxth	r3, r3
 800b788:	4a1b      	ldr	r2, [pc, #108]	; (800b7f8 <Paint_SetScale+0xe4>)
 800b78a:	8253      	strh	r3, [r2, #18]
}
 800b78c:	e02f      	b.n	800b7ee <Paint_SetScale+0xda>
    }else if(scale ==16) {
 800b78e:	79fb      	ldrb	r3, [r7, #7]
 800b790:	2b10      	cmp	r3, #16
 800b792:	d118      	bne.n	800b7c6 <Paint_SetScale+0xb2>
        Paint.Scale = scale;
 800b794:	79fb      	ldrb	r3, [r7, #7]
 800b796:	b29a      	uxth	r2, r3
 800b798:	4b17      	ldr	r3, [pc, #92]	; (800b7f8 <Paint_SetScale+0xe4>)
 800b79a:	82da      	strh	r2, [r3, #22]
        Paint.WidthByte = (Paint.WidthMemory%2==0) ? (Paint.WidthMemory/2) : (Paint.WidthMemory/2+1); 
 800b79c:	4b16      	ldr	r3, [pc, #88]	; (800b7f8 <Paint_SetScale+0xe4>)
 800b79e:	891b      	ldrh	r3, [r3, #8]
 800b7a0:	f003 0301 	and.w	r3, r3, #1
 800b7a4:	b29b      	uxth	r3, r3
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d104      	bne.n	800b7b4 <Paint_SetScale+0xa0>
 800b7aa:	4b13      	ldr	r3, [pc, #76]	; (800b7f8 <Paint_SetScale+0xe4>)
 800b7ac:	891b      	ldrh	r3, [r3, #8]
 800b7ae:	085b      	lsrs	r3, r3, #1
 800b7b0:	b29b      	uxth	r3, r3
 800b7b2:	e005      	b.n	800b7c0 <Paint_SetScale+0xac>
 800b7b4:	4b10      	ldr	r3, [pc, #64]	; (800b7f8 <Paint_SetScale+0xe4>)
 800b7b6:	891b      	ldrh	r3, [r3, #8]
 800b7b8:	085b      	lsrs	r3, r3, #1
 800b7ba:	b29b      	uxth	r3, r3
 800b7bc:	3301      	adds	r3, #1
 800b7be:	b29b      	uxth	r3, r3
 800b7c0:	4a0d      	ldr	r2, [pc, #52]	; (800b7f8 <Paint_SetScale+0xe4>)
 800b7c2:	8253      	strh	r3, [r2, #18]
}
 800b7c4:	e013      	b.n	800b7ee <Paint_SetScale+0xda>
    }else if(scale ==65) {
 800b7c6:	79fb      	ldrb	r3, [r7, #7]
 800b7c8:	2b41      	cmp	r3, #65	; 0x41
 800b7ca:	d10a      	bne.n	800b7e2 <Paint_SetScale+0xce>
        Paint.Scale = scale;
 800b7cc:	79fb      	ldrb	r3, [r7, #7]
 800b7ce:	b29a      	uxth	r2, r3
 800b7d0:	4b09      	ldr	r3, [pc, #36]	; (800b7f8 <Paint_SetScale+0xe4>)
 800b7d2:	82da      	strh	r2, [r3, #22]
        Paint.WidthByte = Paint.WidthMemory*2; 
 800b7d4:	4b08      	ldr	r3, [pc, #32]	; (800b7f8 <Paint_SetScale+0xe4>)
 800b7d6:	891b      	ldrh	r3, [r3, #8]
 800b7d8:	005b      	lsls	r3, r3, #1
 800b7da:	b29a      	uxth	r2, r3
 800b7dc:	4b06      	ldr	r3, [pc, #24]	; (800b7f8 <Paint_SetScale+0xe4>)
 800b7de:	825a      	strh	r2, [r3, #18]
}
 800b7e0:	e005      	b.n	800b7ee <Paint_SetScale+0xda>
        Debug("Set Scale Input parameter error\r\n");
 800b7e2:	4806      	ldr	r0, [pc, #24]	; (800b7fc <Paint_SetScale+0xe8>)
 800b7e4:	f001 fe3e 	bl	800d464 <puts>
        Debug("Scale Only support: 2 4 16 65\r\n");
 800b7e8:	4805      	ldr	r0, [pc, #20]	; (800b800 <Paint_SetScale+0xec>)
 800b7ea:	f001 fe3b 	bl	800d464 <puts>
}
 800b7ee:	bf00      	nop
 800b7f0:	3708      	adds	r7, #8
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bd80      	pop	{r7, pc}
 800b7f6:	bf00      	nop
 800b7f8:	20001a50 	.word	0x20001a50
 800b7fc:	08010578 	.word	0x08010578
 800b800:	080105a0 	.word	0x080105a0

0800b804 <Paint_SetPixel>:
    Xpoint : At point X
    Ypoint : At point Y
    Color  : Painted colors
******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
 800b804:	b580      	push	{r7, lr}
 800b806:	b08a      	sub	sp, #40	; 0x28
 800b808:	af00      	add	r7, sp, #0
 800b80a:	4603      	mov	r3, r0
 800b80c:	80fb      	strh	r3, [r7, #6]
 800b80e:	460b      	mov	r3, r1
 800b810:	80bb      	strh	r3, [r7, #4]
 800b812:	4613      	mov	r3, r2
 800b814:	807b      	strh	r3, [r7, #2]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 800b816:	4b9e      	ldr	r3, [pc, #632]	; (800ba90 <Paint_SetPixel+0x28c>)
 800b818:	889b      	ldrh	r3, [r3, #4]
 800b81a:	88fa      	ldrh	r2, [r7, #6]
 800b81c:	429a      	cmp	r2, r3
 800b81e:	d804      	bhi.n	800b82a <Paint_SetPixel+0x26>
 800b820:	4b9b      	ldr	r3, [pc, #620]	; (800ba90 <Paint_SetPixel+0x28c>)
 800b822:	88db      	ldrh	r3, [r3, #6]
 800b824:	88ba      	ldrh	r2, [r7, #4]
 800b826:	429a      	cmp	r2, r3
 800b828:	d903      	bls.n	800b832 <Paint_SetPixel+0x2e>
        Debug("Exceeding display boundaries\r\n");
 800b82a:	489a      	ldr	r0, [pc, #616]	; (800ba94 <Paint_SetPixel+0x290>)
 800b82c:	f001 fe1a 	bl	800d464 <puts>
        return;
 800b830:	e154      	b.n	800badc <Paint_SetPixel+0x2d8>
    }      
    UWORD X, Y;

    switch(Paint.Rotate) {
 800b832:	4b97      	ldr	r3, [pc, #604]	; (800ba90 <Paint_SetPixel+0x28c>)
 800b834:	89db      	ldrh	r3, [r3, #14]
 800b836:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800b83a:	d02b      	beq.n	800b894 <Paint_SetPixel+0x90>
 800b83c:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800b840:	f300 8149 	bgt.w	800bad6 <Paint_SetPixel+0x2d2>
 800b844:	2bb4      	cmp	r3, #180	; 0xb4
 800b846:	d016      	beq.n	800b876 <Paint_SetPixel+0x72>
 800b848:	2bb4      	cmp	r3, #180	; 0xb4
 800b84a:	f300 8144 	bgt.w	800bad6 <Paint_SetPixel+0x2d2>
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d002      	beq.n	800b858 <Paint_SetPixel+0x54>
 800b852:	2b5a      	cmp	r3, #90	; 0x5a
 800b854:	d005      	beq.n	800b862 <Paint_SetPixel+0x5e>
    case 270:
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;
    default:
        return;
 800b856:	e13e      	b.n	800bad6 <Paint_SetPixel+0x2d2>
        X = Xpoint;
 800b858:	88fb      	ldrh	r3, [r7, #6]
 800b85a:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Ypoint;  
 800b85c:	88bb      	ldrh	r3, [r7, #4]
 800b85e:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 800b860:	e022      	b.n	800b8a8 <Paint_SetPixel+0xa4>
        X = Paint.WidthMemory - Ypoint - 1;
 800b862:	4b8b      	ldr	r3, [pc, #556]	; (800ba90 <Paint_SetPixel+0x28c>)
 800b864:	891a      	ldrh	r2, [r3, #8]
 800b866:	88bb      	ldrh	r3, [r7, #4]
 800b868:	1ad3      	subs	r3, r2, r3
 800b86a:	b29b      	uxth	r3, r3
 800b86c:	3b01      	subs	r3, #1
 800b86e:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Xpoint;
 800b870:	88fb      	ldrh	r3, [r7, #6]
 800b872:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 800b874:	e018      	b.n	800b8a8 <Paint_SetPixel+0xa4>
        X = Paint.WidthMemory - Xpoint - 1;
 800b876:	4b86      	ldr	r3, [pc, #536]	; (800ba90 <Paint_SetPixel+0x28c>)
 800b878:	891a      	ldrh	r2, [r3, #8]
 800b87a:	88fb      	ldrh	r3, [r7, #6]
 800b87c:	1ad3      	subs	r3, r2, r3
 800b87e:	b29b      	uxth	r3, r3
 800b880:	3b01      	subs	r3, #1
 800b882:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Paint.HeightMemory - Ypoint - 1;
 800b884:	4b82      	ldr	r3, [pc, #520]	; (800ba90 <Paint_SetPixel+0x28c>)
 800b886:	895a      	ldrh	r2, [r3, #10]
 800b888:	88bb      	ldrh	r3, [r7, #4]
 800b88a:	1ad3      	subs	r3, r2, r3
 800b88c:	b29b      	uxth	r3, r3
 800b88e:	3b01      	subs	r3, #1
 800b890:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 800b892:	e009      	b.n	800b8a8 <Paint_SetPixel+0xa4>
        X = Ypoint;
 800b894:	88bb      	ldrh	r3, [r7, #4]
 800b896:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Paint.HeightMemory - Xpoint - 1;
 800b898:	4b7d      	ldr	r3, [pc, #500]	; (800ba90 <Paint_SetPixel+0x28c>)
 800b89a:	895a      	ldrh	r2, [r3, #10]
 800b89c:	88fb      	ldrh	r3, [r7, #6]
 800b89e:	1ad3      	subs	r3, r2, r3
 800b8a0:	b29b      	uxth	r3, r3
 800b8a2:	3b01      	subs	r3, #1
 800b8a4:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 800b8a6:	bf00      	nop
    }
    
    switch(Paint.Mirror) {
 800b8a8:	4b79      	ldr	r3, [pc, #484]	; (800ba90 <Paint_SetPixel+0x28c>)
 800b8aa:	8a1b      	ldrh	r3, [r3, #16]
 800b8ac:	2b03      	cmp	r3, #3
 800b8ae:	f200 8114 	bhi.w	800bada <Paint_SetPixel+0x2d6>
 800b8b2:	a201      	add	r2, pc, #4	; (adr r2, 800b8b8 <Paint_SetPixel+0xb4>)
 800b8b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8b8:	0800b907 	.word	0x0800b907
 800b8bc:	0800b8c9 	.word	0x0800b8c9
 800b8c0:	0800b8d9 	.word	0x0800b8d9
 800b8c4:	0800b8e9 	.word	0x0800b8e9
    case MIRROR_NONE:
        break;
    case MIRROR_HORIZONTAL:
        X = Paint.WidthMemory - X - 1;
 800b8c8:	4b71      	ldr	r3, [pc, #452]	; (800ba90 <Paint_SetPixel+0x28c>)
 800b8ca:	891a      	ldrh	r2, [r3, #8]
 800b8cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b8ce:	1ad3      	subs	r3, r2, r3
 800b8d0:	b29b      	uxth	r3, r3
 800b8d2:	3b01      	subs	r3, #1
 800b8d4:	84fb      	strh	r3, [r7, #38]	; 0x26
        break;
 800b8d6:	e017      	b.n	800b908 <Paint_SetPixel+0x104>
    case MIRROR_VERTICAL:
        Y = Paint.HeightMemory - Y - 1;
 800b8d8:	4b6d      	ldr	r3, [pc, #436]	; (800ba90 <Paint_SetPixel+0x28c>)
 800b8da:	895a      	ldrh	r2, [r3, #10]
 800b8dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b8de:	1ad3      	subs	r3, r2, r3
 800b8e0:	b29b      	uxth	r3, r3
 800b8e2:	3b01      	subs	r3, #1
 800b8e4:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 800b8e6:	e00f      	b.n	800b908 <Paint_SetPixel+0x104>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
 800b8e8:	4b69      	ldr	r3, [pc, #420]	; (800ba90 <Paint_SetPixel+0x28c>)
 800b8ea:	891a      	ldrh	r2, [r3, #8]
 800b8ec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b8ee:	1ad3      	subs	r3, r2, r3
 800b8f0:	b29b      	uxth	r3, r3
 800b8f2:	3b01      	subs	r3, #1
 800b8f4:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Paint.HeightMemory - Y - 1;
 800b8f6:	4b66      	ldr	r3, [pc, #408]	; (800ba90 <Paint_SetPixel+0x28c>)
 800b8f8:	895a      	ldrh	r2, [r3, #10]
 800b8fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b8fc:	1ad3      	subs	r3, r2, r3
 800b8fe:	b29b      	uxth	r3, r3
 800b900:	3b01      	subs	r3, #1
 800b902:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 800b904:	e000      	b.n	800b908 <Paint_SetPixel+0x104>
        break;
 800b906:	bf00      	nop
    default:
        return;
    }

    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 800b908:	4b61      	ldr	r3, [pc, #388]	; (800ba90 <Paint_SetPixel+0x28c>)
 800b90a:	891b      	ldrh	r3, [r3, #8]
 800b90c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b90e:	429a      	cmp	r2, r3
 800b910:	d804      	bhi.n	800b91c <Paint_SetPixel+0x118>
 800b912:	4b5f      	ldr	r3, [pc, #380]	; (800ba90 <Paint_SetPixel+0x28c>)
 800b914:	895b      	ldrh	r3, [r3, #10]
 800b916:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b918:	429a      	cmp	r2, r3
 800b91a:	d903      	bls.n	800b924 <Paint_SetPixel+0x120>
        Debug("Exceeding display boundaries\r\n");
 800b91c:	485d      	ldr	r0, [pc, #372]	; (800ba94 <Paint_SetPixel+0x290>)
 800b91e:	f001 fda1 	bl	800d464 <puts>
        return;
 800b922:	e0db      	b.n	800badc <Paint_SetPixel+0x2d8>
    }
    
    if(Paint.Scale == 2){
 800b924:	4b5a      	ldr	r3, [pc, #360]	; (800ba90 <Paint_SetPixel+0x28c>)
 800b926:	8adb      	ldrh	r3, [r3, #22]
 800b928:	2b02      	cmp	r3, #2
 800b92a:	d139      	bne.n	800b9a0 <Paint_SetPixel+0x19c>
        UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
 800b92c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b92e:	08db      	lsrs	r3, r3, #3
 800b930:	b29b      	uxth	r3, r3
 800b932:	4619      	mov	r1, r3
 800b934:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b936:	4a56      	ldr	r2, [pc, #344]	; (800ba90 <Paint_SetPixel+0x28c>)
 800b938:	8a52      	ldrh	r2, [r2, #18]
 800b93a:	fb02 f303 	mul.w	r3, r2, r3
 800b93e:	440b      	add	r3, r1
 800b940:	60fb      	str	r3, [r7, #12]
        UBYTE Rdata = Paint.Image[Addr];
 800b942:	4b53      	ldr	r3, [pc, #332]	; (800ba90 <Paint_SetPixel+0x28c>)
 800b944:	681a      	ldr	r2, [r3, #0]
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	4413      	add	r3, r2
 800b94a:	781b      	ldrb	r3, [r3, #0]
 800b94c:	72fb      	strb	r3, [r7, #11]
        if(Color == BLACK)
 800b94e:	887b      	ldrh	r3, [r7, #2]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d113      	bne.n	800b97c <Paint_SetPixel+0x178>
            Paint.Image[Addr] = Rdata & ~(0x80 >> (X % 8));
 800b954:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b956:	f003 0307 	and.w	r3, r3, #7
 800b95a:	2280      	movs	r2, #128	; 0x80
 800b95c:	fa42 f303 	asr.w	r3, r2, r3
 800b960:	b25b      	sxtb	r3, r3
 800b962:	43db      	mvns	r3, r3
 800b964:	b25a      	sxtb	r2, r3
 800b966:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800b96a:	4013      	ands	r3, r2
 800b96c:	b259      	sxtb	r1, r3
 800b96e:	4b48      	ldr	r3, [pc, #288]	; (800ba90 <Paint_SetPixel+0x28c>)
 800b970:	681a      	ldr	r2, [r3, #0]
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	4413      	add	r3, r2
 800b976:	b2ca      	uxtb	r2, r1
 800b978:	701a      	strb	r2, [r3, #0]
 800b97a:	e0af      	b.n	800badc <Paint_SetPixel+0x2d8>
        else
            Paint.Image[Addr] = Rdata | (0x80 >> (X % 8));
 800b97c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b97e:	f003 0307 	and.w	r3, r3, #7
 800b982:	2280      	movs	r2, #128	; 0x80
 800b984:	fa42 f303 	asr.w	r3, r2, r3
 800b988:	b25a      	sxtb	r2, r3
 800b98a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800b98e:	4313      	orrs	r3, r2
 800b990:	b259      	sxtb	r1, r3
 800b992:	4b3f      	ldr	r3, [pc, #252]	; (800ba90 <Paint_SetPixel+0x28c>)
 800b994:	681a      	ldr	r2, [r3, #0]
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	4413      	add	r3, r2
 800b99a:	b2ca      	uxtb	r2, r1
 800b99c:	701a      	strb	r2, [r3, #0]
 800b99e:	e09d      	b.n	800badc <Paint_SetPixel+0x2d8>
    }else if(Paint.Scale == 4){
 800b9a0:	4b3b      	ldr	r3, [pc, #236]	; (800ba90 <Paint_SetPixel+0x28c>)
 800b9a2:	8adb      	ldrh	r3, [r3, #22]
 800b9a4:	2b04      	cmp	r3, #4
 800b9a6:	d137      	bne.n	800ba18 <Paint_SetPixel+0x214>
        UDOUBLE Addr = X / 4 + Y * Paint.WidthByte;
 800b9a8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b9aa:	089b      	lsrs	r3, r3, #2
 800b9ac:	b29b      	uxth	r3, r3
 800b9ae:	4619      	mov	r1, r3
 800b9b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b9b2:	4a37      	ldr	r2, [pc, #220]	; (800ba90 <Paint_SetPixel+0x28c>)
 800b9b4:	8a52      	ldrh	r2, [r2, #18]
 800b9b6:	fb02 f303 	mul.w	r3, r2, r3
 800b9ba:	440b      	add	r3, r1
 800b9bc:	617b      	str	r3, [r7, #20]
        Color = Color % 4;//Guaranteed color scale is 4  --- 0~3
 800b9be:	887b      	ldrh	r3, [r7, #2]
 800b9c0:	f003 0303 	and.w	r3, r3, #3
 800b9c4:	807b      	strh	r3, [r7, #2]
        UBYTE Rdata = Paint.Image[Addr];
 800b9c6:	4b32      	ldr	r3, [pc, #200]	; (800ba90 <Paint_SetPixel+0x28c>)
 800b9c8:	681a      	ldr	r2, [r3, #0]
 800b9ca:	697b      	ldr	r3, [r7, #20]
 800b9cc:	4413      	add	r3, r2
 800b9ce:	781b      	ldrb	r3, [r3, #0]
 800b9d0:	74fb      	strb	r3, [r7, #19]
        
        Rdata = Rdata & (~(0xC0 >> ((X % 4)*2)));
 800b9d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b9d4:	f003 0303 	and.w	r3, r3, #3
 800b9d8:	005b      	lsls	r3, r3, #1
 800b9da:	22c0      	movs	r2, #192	; 0xc0
 800b9dc:	fa42 f303 	asr.w	r3, r2, r3
 800b9e0:	b25b      	sxtb	r3, r3
 800b9e2:	43db      	mvns	r3, r3
 800b9e4:	b25a      	sxtb	r2, r3
 800b9e6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b9ea:	4013      	ands	r3, r2
 800b9ec:	b25b      	sxtb	r3, r3
 800b9ee:	74fb      	strb	r3, [r7, #19]
        Paint.Image[Addr] = Rdata | ((Color << 6) >> ((X % 4)*2));
 800b9f0:	887b      	ldrh	r3, [r7, #2]
 800b9f2:	019a      	lsls	r2, r3, #6
 800b9f4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b9f6:	f003 0303 	and.w	r3, r3, #3
 800b9fa:	005b      	lsls	r3, r3, #1
 800b9fc:	fa42 f303 	asr.w	r3, r2, r3
 800ba00:	b25a      	sxtb	r2, r3
 800ba02:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ba06:	4313      	orrs	r3, r2
 800ba08:	b259      	sxtb	r1, r3
 800ba0a:	4b21      	ldr	r3, [pc, #132]	; (800ba90 <Paint_SetPixel+0x28c>)
 800ba0c:	681a      	ldr	r2, [r3, #0]
 800ba0e:	697b      	ldr	r3, [r7, #20]
 800ba10:	4413      	add	r3, r2
 800ba12:	b2ca      	uxtb	r2, r1
 800ba14:	701a      	strb	r2, [r3, #0]
 800ba16:	e061      	b.n	800badc <Paint_SetPixel+0x2d8>
    }else if(Paint.Scale == 16) {
 800ba18:	4b1d      	ldr	r3, [pc, #116]	; (800ba90 <Paint_SetPixel+0x28c>)
 800ba1a:	8adb      	ldrh	r3, [r3, #22]
 800ba1c:	2b10      	cmp	r3, #16
 800ba1e:	d13b      	bne.n	800ba98 <Paint_SetPixel+0x294>
        UDOUBLE Addr = X / 2 + Y * Paint.WidthByte;
 800ba20:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ba22:	085b      	lsrs	r3, r3, #1
 800ba24:	b29b      	uxth	r3, r3
 800ba26:	4619      	mov	r1, r3
 800ba28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ba2a:	4a19      	ldr	r2, [pc, #100]	; (800ba90 <Paint_SetPixel+0x28c>)
 800ba2c:	8a52      	ldrh	r2, [r2, #18]
 800ba2e:	fb02 f303 	mul.w	r3, r2, r3
 800ba32:	440b      	add	r3, r1
 800ba34:	61fb      	str	r3, [r7, #28]
        UBYTE Rdata = Paint.Image[Addr];
 800ba36:	4b16      	ldr	r3, [pc, #88]	; (800ba90 <Paint_SetPixel+0x28c>)
 800ba38:	681a      	ldr	r2, [r3, #0]
 800ba3a:	69fb      	ldr	r3, [r7, #28]
 800ba3c:	4413      	add	r3, r2
 800ba3e:	781b      	ldrb	r3, [r3, #0]
 800ba40:	76fb      	strb	r3, [r7, #27]
        Color = Color % 16;
 800ba42:	887b      	ldrh	r3, [r7, #2]
 800ba44:	f003 030f 	and.w	r3, r3, #15
 800ba48:	807b      	strh	r3, [r7, #2]
        Rdata = Rdata & (~(0xf0 >> ((X % 2)*4)));
 800ba4a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ba4c:	f003 0301 	and.w	r3, r3, #1
 800ba50:	009b      	lsls	r3, r3, #2
 800ba52:	22f0      	movs	r2, #240	; 0xf0
 800ba54:	fa42 f303 	asr.w	r3, r2, r3
 800ba58:	b25b      	sxtb	r3, r3
 800ba5a:	43db      	mvns	r3, r3
 800ba5c:	b25a      	sxtb	r2, r3
 800ba5e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ba62:	4013      	ands	r3, r2
 800ba64:	b25b      	sxtb	r3, r3
 800ba66:	76fb      	strb	r3, [r7, #27]
        Paint.Image[Addr] = Rdata | ((Color << 4) >> ((X % 2)*4));
 800ba68:	887b      	ldrh	r3, [r7, #2]
 800ba6a:	011a      	lsls	r2, r3, #4
 800ba6c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ba6e:	f003 0301 	and.w	r3, r3, #1
 800ba72:	009b      	lsls	r3, r3, #2
 800ba74:	fa42 f303 	asr.w	r3, r2, r3
 800ba78:	b25a      	sxtb	r2, r3
 800ba7a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ba7e:	4313      	orrs	r3, r2
 800ba80:	b259      	sxtb	r1, r3
 800ba82:	4b03      	ldr	r3, [pc, #12]	; (800ba90 <Paint_SetPixel+0x28c>)
 800ba84:	681a      	ldr	r2, [r3, #0]
 800ba86:	69fb      	ldr	r3, [r7, #28]
 800ba88:	4413      	add	r3, r2
 800ba8a:	b2ca      	uxtb	r2, r1
 800ba8c:	701a      	strb	r2, [r3, #0]
 800ba8e:	e025      	b.n	800badc <Paint_SetPixel+0x2d8>
 800ba90:	20001a50 	.word	0x20001a50
 800ba94:	08010660 	.word	0x08010660
    }else if(Paint.Scale == 65) {
 800ba98:	4b12      	ldr	r3, [pc, #72]	; (800bae4 <Paint_SetPixel+0x2e0>)
 800ba9a:	8adb      	ldrh	r3, [r3, #22]
 800ba9c:	2b41      	cmp	r3, #65	; 0x41
 800ba9e:	d11d      	bne.n	800badc <Paint_SetPixel+0x2d8>
        UDOUBLE Addr = X*2 + Y*Paint.WidthByte;
 800baa0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800baa2:	005a      	lsls	r2, r3, #1
 800baa4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800baa6:	490f      	ldr	r1, [pc, #60]	; (800bae4 <Paint_SetPixel+0x2e0>)
 800baa8:	8a49      	ldrh	r1, [r1, #18]
 800baaa:	fb01 f303 	mul.w	r3, r1, r3
 800baae:	4413      	add	r3, r2
 800bab0:	623b      	str	r3, [r7, #32]
        Paint.Image[Addr] = 0xff & (Color>>8);
 800bab2:	887b      	ldrh	r3, [r7, #2]
 800bab4:	0a1b      	lsrs	r3, r3, #8
 800bab6:	b299      	uxth	r1, r3
 800bab8:	4b0a      	ldr	r3, [pc, #40]	; (800bae4 <Paint_SetPixel+0x2e0>)
 800baba:	681a      	ldr	r2, [r3, #0]
 800babc:	6a3b      	ldr	r3, [r7, #32]
 800babe:	4413      	add	r3, r2
 800bac0:	b2ca      	uxtb	r2, r1
 800bac2:	701a      	strb	r2, [r3, #0]
        Paint.Image[Addr+1] = 0xff & Color;
 800bac4:	4b07      	ldr	r3, [pc, #28]	; (800bae4 <Paint_SetPixel+0x2e0>)
 800bac6:	681a      	ldr	r2, [r3, #0]
 800bac8:	6a3b      	ldr	r3, [r7, #32]
 800baca:	3301      	adds	r3, #1
 800bacc:	4413      	add	r3, r2
 800bace:	887a      	ldrh	r2, [r7, #2]
 800bad0:	b2d2      	uxtb	r2, r2
 800bad2:	701a      	strb	r2, [r3, #0]
 800bad4:	e002      	b.n	800badc <Paint_SetPixel+0x2d8>
        return;
 800bad6:	bf00      	nop
 800bad8:	e000      	b.n	800badc <Paint_SetPixel+0x2d8>
        return;
 800bada:	bf00      	nop
    }
}
 800badc:	3728      	adds	r7, #40	; 0x28
 800bade:	46bd      	mov	sp, r7
 800bae0:	bd80      	pop	{r7, pc}
 800bae2:	bf00      	nop
 800bae4:	20001a50 	.word	0x20001a50

0800bae8 <Paint_Clear>:
function: Clear the color of the picture
parameter:
    Color : Painted colors
******************************************************************************/
void Paint_Clear(UWORD Color)
{
 800bae8:	b480      	push	{r7}
 800baea:	b089      	sub	sp, #36	; 0x24
 800baec:	af00      	add	r7, sp, #0
 800baee:	4603      	mov	r3, r0
 800baf0:	80fb      	strh	r3, [r7, #6]
    if(Paint.Scale == 2 || Paint.Scale == 4) {
 800baf2:	4b51      	ldr	r3, [pc, #324]	; (800bc38 <Paint_Clear+0x150>)
 800baf4:	8adb      	ldrh	r3, [r3, #22]
 800baf6:	2b02      	cmp	r3, #2
 800baf8:	d003      	beq.n	800bb02 <Paint_Clear+0x1a>
 800bafa:	4b4f      	ldr	r3, [pc, #316]	; (800bc38 <Paint_Clear+0x150>)
 800bafc:	8adb      	ldrh	r3, [r3, #22]
 800bafe:	2b04      	cmp	r3, #4
 800bb00:	d125      	bne.n	800bb4e <Paint_Clear+0x66>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 800bb02:	2300      	movs	r3, #0
 800bb04:	83fb      	strh	r3, [r7, #30]
 800bb06:	e01c      	b.n	800bb42 <Paint_Clear+0x5a>
            for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 800bb08:	2300      	movs	r3, #0
 800bb0a:	83bb      	strh	r3, [r7, #28]
 800bb0c:	e011      	b.n	800bb32 <Paint_Clear+0x4a>
                UDOUBLE Addr = X + Y*Paint.WidthByte;
 800bb0e:	8bba      	ldrh	r2, [r7, #28]
 800bb10:	8bfb      	ldrh	r3, [r7, #30]
 800bb12:	4949      	ldr	r1, [pc, #292]	; (800bc38 <Paint_Clear+0x150>)
 800bb14:	8a49      	ldrh	r1, [r1, #18]
 800bb16:	fb01 f303 	mul.w	r3, r1, r3
 800bb1a:	4413      	add	r3, r2
 800bb1c:	60bb      	str	r3, [r7, #8]
                Paint.Image[Addr] = Color;
 800bb1e:	4b46      	ldr	r3, [pc, #280]	; (800bc38 <Paint_Clear+0x150>)
 800bb20:	681a      	ldr	r2, [r3, #0]
 800bb22:	68bb      	ldr	r3, [r7, #8]
 800bb24:	4413      	add	r3, r2
 800bb26:	88fa      	ldrh	r2, [r7, #6]
 800bb28:	b2d2      	uxtb	r2, r2
 800bb2a:	701a      	strb	r2, [r3, #0]
            for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 800bb2c:	8bbb      	ldrh	r3, [r7, #28]
 800bb2e:	3301      	adds	r3, #1
 800bb30:	83bb      	strh	r3, [r7, #28]
 800bb32:	4b41      	ldr	r3, [pc, #260]	; (800bc38 <Paint_Clear+0x150>)
 800bb34:	8a5b      	ldrh	r3, [r3, #18]
 800bb36:	8bba      	ldrh	r2, [r7, #28]
 800bb38:	429a      	cmp	r2, r3
 800bb3a:	d3e8      	bcc.n	800bb0e <Paint_Clear+0x26>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 800bb3c:	8bfb      	ldrh	r3, [r7, #30]
 800bb3e:	3301      	adds	r3, #1
 800bb40:	83fb      	strh	r3, [r7, #30]
 800bb42:	4b3d      	ldr	r3, [pc, #244]	; (800bc38 <Paint_Clear+0x150>)
 800bb44:	8a9b      	ldrh	r3, [r3, #20]
 800bb46:	8bfa      	ldrh	r2, [r7, #30]
 800bb48:	429a      	cmp	r2, r3
 800bb4a:	d3dd      	bcc.n	800bb08 <Paint_Clear+0x20>
 800bb4c:	e06e      	b.n	800bc2c <Paint_Clear+0x144>
            }
        }
    }else if(Paint.Scale == 16) {
 800bb4e:	4b3a      	ldr	r3, [pc, #232]	; (800bc38 <Paint_Clear+0x150>)
 800bb50:	8adb      	ldrh	r3, [r3, #22]
 800bb52:	2b10      	cmp	r3, #16
 800bb54:	d12f      	bne.n	800bbb6 <Paint_Clear+0xce>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 800bb56:	2300      	movs	r3, #0
 800bb58:	837b      	strh	r3, [r7, #26]
 800bb5a:	e026      	b.n	800bbaa <Paint_Clear+0xc2>
            for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	833b      	strh	r3, [r7, #24]
 800bb60:	e01b      	b.n	800bb9a <Paint_Clear+0xb2>
                UDOUBLE Addr = X + Y*Paint.WidthByte;
 800bb62:	8b3a      	ldrh	r2, [r7, #24]
 800bb64:	8b7b      	ldrh	r3, [r7, #26]
 800bb66:	4934      	ldr	r1, [pc, #208]	; (800bc38 <Paint_Clear+0x150>)
 800bb68:	8a49      	ldrh	r1, [r1, #18]
 800bb6a:	fb01 f303 	mul.w	r3, r1, r3
 800bb6e:	4413      	add	r3, r2
 800bb70:	60fb      	str	r3, [r7, #12]
                Color = Color & 0x0f;
 800bb72:	88fb      	ldrh	r3, [r7, #6]
 800bb74:	f003 030f 	and.w	r3, r3, #15
 800bb78:	80fb      	strh	r3, [r7, #6]
                Paint.Image[Addr] = (Color<<4) | Color;
 800bb7a:	88fb      	ldrh	r3, [r7, #6]
 800bb7c:	011b      	lsls	r3, r3, #4
 800bb7e:	b25a      	sxtb	r2, r3
 800bb80:	88fb      	ldrh	r3, [r7, #6]
 800bb82:	b25b      	sxtb	r3, r3
 800bb84:	4313      	orrs	r3, r2
 800bb86:	b259      	sxtb	r1, r3
 800bb88:	4b2b      	ldr	r3, [pc, #172]	; (800bc38 <Paint_Clear+0x150>)
 800bb8a:	681a      	ldr	r2, [r3, #0]
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	4413      	add	r3, r2
 800bb90:	b2ca      	uxtb	r2, r1
 800bb92:	701a      	strb	r2, [r3, #0]
            for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 800bb94:	8b3b      	ldrh	r3, [r7, #24]
 800bb96:	3301      	adds	r3, #1
 800bb98:	833b      	strh	r3, [r7, #24]
 800bb9a:	4b27      	ldr	r3, [pc, #156]	; (800bc38 <Paint_Clear+0x150>)
 800bb9c:	8a5b      	ldrh	r3, [r3, #18]
 800bb9e:	8b3a      	ldrh	r2, [r7, #24]
 800bba0:	429a      	cmp	r2, r3
 800bba2:	d3de      	bcc.n	800bb62 <Paint_Clear+0x7a>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 800bba4:	8b7b      	ldrh	r3, [r7, #26]
 800bba6:	3301      	adds	r3, #1
 800bba8:	837b      	strh	r3, [r7, #26]
 800bbaa:	4b23      	ldr	r3, [pc, #140]	; (800bc38 <Paint_Clear+0x150>)
 800bbac:	8a9b      	ldrh	r3, [r3, #20]
 800bbae:	8b7a      	ldrh	r2, [r7, #26]
 800bbb0:	429a      	cmp	r2, r3
 800bbb2:	d3d3      	bcc.n	800bb5c <Paint_Clear+0x74>
                Paint.Image[Addr] = 0x0f & (Color>>8);
                Paint.Image[Addr+1] = 0x0f & Color;
            }
        }
    }
}
 800bbb4:	e03a      	b.n	800bc2c <Paint_Clear+0x144>
    }else if(Paint.Scale == 65) {
 800bbb6:	4b20      	ldr	r3, [pc, #128]	; (800bc38 <Paint_Clear+0x150>)
 800bbb8:	8adb      	ldrh	r3, [r3, #22]
 800bbba:	2b41      	cmp	r3, #65	; 0x41
 800bbbc:	d136      	bne.n	800bc2c <Paint_Clear+0x144>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	82fb      	strh	r3, [r7, #22]
 800bbc2:	e02d      	b.n	800bc20 <Paint_Clear+0x138>
            for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	82bb      	strh	r3, [r7, #20]
 800bbc8:	e022      	b.n	800bc10 <Paint_Clear+0x128>
                UDOUBLE Addr = X*2 + Y*Paint.WidthByte;
 800bbca:	8abb      	ldrh	r3, [r7, #20]
 800bbcc:	005a      	lsls	r2, r3, #1
 800bbce:	8afb      	ldrh	r3, [r7, #22]
 800bbd0:	4919      	ldr	r1, [pc, #100]	; (800bc38 <Paint_Clear+0x150>)
 800bbd2:	8a49      	ldrh	r1, [r1, #18]
 800bbd4:	fb01 f303 	mul.w	r3, r1, r3
 800bbd8:	4413      	add	r3, r2
 800bbda:	613b      	str	r3, [r7, #16]
                Paint.Image[Addr] = 0x0f & (Color>>8);
 800bbdc:	88fb      	ldrh	r3, [r7, #6]
 800bbde:	0a1b      	lsrs	r3, r3, #8
 800bbe0:	b29b      	uxth	r3, r3
 800bbe2:	b2da      	uxtb	r2, r3
 800bbe4:	4b14      	ldr	r3, [pc, #80]	; (800bc38 <Paint_Clear+0x150>)
 800bbe6:	6819      	ldr	r1, [r3, #0]
 800bbe8:	693b      	ldr	r3, [r7, #16]
 800bbea:	440b      	add	r3, r1
 800bbec:	f002 020f 	and.w	r2, r2, #15
 800bbf0:	b2d2      	uxtb	r2, r2
 800bbf2:	701a      	strb	r2, [r3, #0]
                Paint.Image[Addr+1] = 0x0f & Color;
 800bbf4:	88fb      	ldrh	r3, [r7, #6]
 800bbf6:	b2da      	uxtb	r2, r3
 800bbf8:	4b0f      	ldr	r3, [pc, #60]	; (800bc38 <Paint_Clear+0x150>)
 800bbfa:	6819      	ldr	r1, [r3, #0]
 800bbfc:	693b      	ldr	r3, [r7, #16]
 800bbfe:	3301      	adds	r3, #1
 800bc00:	440b      	add	r3, r1
 800bc02:	f002 020f 	and.w	r2, r2, #15
 800bc06:	b2d2      	uxtb	r2, r2
 800bc08:	701a      	strb	r2, [r3, #0]
            for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 800bc0a:	8abb      	ldrh	r3, [r7, #20]
 800bc0c:	3301      	adds	r3, #1
 800bc0e:	82bb      	strh	r3, [r7, #20]
 800bc10:	4b09      	ldr	r3, [pc, #36]	; (800bc38 <Paint_Clear+0x150>)
 800bc12:	8a5b      	ldrh	r3, [r3, #18]
 800bc14:	8aba      	ldrh	r2, [r7, #20]
 800bc16:	429a      	cmp	r2, r3
 800bc18:	d3d7      	bcc.n	800bbca <Paint_Clear+0xe2>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 800bc1a:	8afb      	ldrh	r3, [r7, #22]
 800bc1c:	3301      	adds	r3, #1
 800bc1e:	82fb      	strh	r3, [r7, #22]
 800bc20:	4b05      	ldr	r3, [pc, #20]	; (800bc38 <Paint_Clear+0x150>)
 800bc22:	8a9b      	ldrh	r3, [r3, #20]
 800bc24:	8afa      	ldrh	r2, [r7, #22]
 800bc26:	429a      	cmp	r2, r3
 800bc28:	d3cc      	bcc.n	800bbc4 <Paint_Clear+0xdc>
}
 800bc2a:	e7ff      	b.n	800bc2c <Paint_Clear+0x144>
 800bc2c:	bf00      	nop
 800bc2e:	3724      	adds	r7, #36	; 0x24
 800bc30:	46bd      	mov	sp, r7
 800bc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc36:	4770      	bx	lr
 800bc38:	20001a50 	.word	0x20001a50

0800bc3c <Paint_DrawPoint>:
    Dot_Pixel	: point size
    Dot_Style	: point Style
******************************************************************************/
void Paint_DrawPoint(UWORD Xpoint, UWORD Ypoint, UWORD Color,
                     DOT_PIXEL Dot_Pixel, DOT_STYLE Dot_Style)
{
 800bc3c:	b590      	push	{r4, r7, lr}
 800bc3e:	b085      	sub	sp, #20
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	4604      	mov	r4, r0
 800bc44:	4608      	mov	r0, r1
 800bc46:	4611      	mov	r1, r2
 800bc48:	461a      	mov	r2, r3
 800bc4a:	4623      	mov	r3, r4
 800bc4c:	80fb      	strh	r3, [r7, #6]
 800bc4e:	4603      	mov	r3, r0
 800bc50:	80bb      	strh	r3, [r7, #4]
 800bc52:	460b      	mov	r3, r1
 800bc54:	807b      	strh	r3, [r7, #2]
 800bc56:	4613      	mov	r3, r2
 800bc58:	707b      	strb	r3, [r7, #1]
    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 800bc5a:	4b4a      	ldr	r3, [pc, #296]	; (800bd84 <Paint_DrawPoint+0x148>)
 800bc5c:	889b      	ldrh	r3, [r3, #4]
 800bc5e:	88fa      	ldrh	r2, [r7, #6]
 800bc60:	429a      	cmp	r2, r3
 800bc62:	d804      	bhi.n	800bc6e <Paint_DrawPoint+0x32>
 800bc64:	4b47      	ldr	r3, [pc, #284]	; (800bd84 <Paint_DrawPoint+0x148>)
 800bc66:	88db      	ldrh	r3, [r3, #6]
 800bc68:	88ba      	ldrh	r2, [r7, #4]
 800bc6a:	429a      	cmp	r2, r3
 800bc6c:	d911      	bls.n	800bc92 <Paint_DrawPoint+0x56>
        Debug("Paint_DrawPoint Input exceeds the normal display range\r\n");
 800bc6e:	4846      	ldr	r0, [pc, #280]	; (800bd88 <Paint_DrawPoint+0x14c>)
 800bc70:	f001 fbf8 	bl	800d464 <puts>
				printf("Xpoint = %d , Paint.Width = %d  \r\n ",Xpoint,Paint.Width);
 800bc74:	88fb      	ldrh	r3, [r7, #6]
 800bc76:	4a43      	ldr	r2, [pc, #268]	; (800bd84 <Paint_DrawPoint+0x148>)
 800bc78:	8892      	ldrh	r2, [r2, #4]
 800bc7a:	4619      	mov	r1, r3
 800bc7c:	4843      	ldr	r0, [pc, #268]	; (800bd8c <Paint_DrawPoint+0x150>)
 800bc7e:	f001 fb8b 	bl	800d398 <iprintf>
				printf("Ypoint = %d , Paint.Height = %d  \r\n ",Ypoint,Paint.Height);
 800bc82:	88bb      	ldrh	r3, [r7, #4]
 800bc84:	4a3f      	ldr	r2, [pc, #252]	; (800bd84 <Paint_DrawPoint+0x148>)
 800bc86:	88d2      	ldrh	r2, [r2, #6]
 800bc88:	4619      	mov	r1, r3
 800bc8a:	4841      	ldr	r0, [pc, #260]	; (800bd90 <Paint_DrawPoint+0x154>)
 800bc8c:	f001 fb84 	bl	800d398 <iprintf>
        return;
 800bc90:	e074      	b.n	800bd7c <Paint_DrawPoint+0x140>
    }

    int16_t XDir_Num , YDir_Num;
    if (Dot_Style == DOT_FILL_AROUND) {
 800bc92:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bc96:	2b01      	cmp	r3, #1
 800bc98:	d144      	bne.n	800bd24 <Paint_DrawPoint+0xe8>
        for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++) {
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	81fb      	strh	r3, [r7, #14]
 800bc9e:	e039      	b.n	800bd14 <Paint_DrawPoint+0xd8>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 800bca0:	2300      	movs	r3, #0
 800bca2:	81bb      	strh	r3, [r7, #12]
 800bca4:	e029      	b.n	800bcfa <Paint_DrawPoint+0xbe>
                if(Xpoint + XDir_Num - Dot_Pixel < 0 || Ypoint + YDir_Num - Dot_Pixel < 0)
 800bca6:	88fa      	ldrh	r2, [r7, #6]
 800bca8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800bcac:	441a      	add	r2, r3
 800bcae:	787b      	ldrb	r3, [r7, #1]
 800bcb0:	1ad3      	subs	r3, r2, r3
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	db28      	blt.n	800bd08 <Paint_DrawPoint+0xcc>
 800bcb6:	88ba      	ldrh	r2, [r7, #4]
 800bcb8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800bcbc:	441a      	add	r2, r3
 800bcbe:	787b      	ldrb	r3, [r7, #1]
 800bcc0:	1ad3      	subs	r3, r2, r3
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	db20      	blt.n	800bd08 <Paint_DrawPoint+0xcc>
                    break;
                // printf("x = %d, y = %d\r\n", Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel);
                Paint_SetPixel(Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel, Color);
 800bcc6:	89fa      	ldrh	r2, [r7, #14]
 800bcc8:	88fb      	ldrh	r3, [r7, #6]
 800bcca:	4413      	add	r3, r2
 800bccc:	b29a      	uxth	r2, r3
 800bcce:	787b      	ldrb	r3, [r7, #1]
 800bcd0:	b29b      	uxth	r3, r3
 800bcd2:	1ad3      	subs	r3, r2, r3
 800bcd4:	b298      	uxth	r0, r3
 800bcd6:	89ba      	ldrh	r2, [r7, #12]
 800bcd8:	88bb      	ldrh	r3, [r7, #4]
 800bcda:	4413      	add	r3, r2
 800bcdc:	b29a      	uxth	r2, r3
 800bcde:	787b      	ldrb	r3, [r7, #1]
 800bce0:	b29b      	uxth	r3, r3
 800bce2:	1ad3      	subs	r3, r2, r3
 800bce4:	b29b      	uxth	r3, r3
 800bce6:	887a      	ldrh	r2, [r7, #2]
 800bce8:	4619      	mov	r1, r3
 800bcea:	f7ff fd8b 	bl	800b804 <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 800bcee:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800bcf2:	b29b      	uxth	r3, r3
 800bcf4:	3301      	adds	r3, #1
 800bcf6:	b29b      	uxth	r3, r3
 800bcf8:	81bb      	strh	r3, [r7, #12]
 800bcfa:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800bcfe:	787b      	ldrb	r3, [r7, #1]
 800bd00:	005b      	lsls	r3, r3, #1
 800bd02:	3b01      	subs	r3, #1
 800bd04:	429a      	cmp	r2, r3
 800bd06:	dbce      	blt.n	800bca6 <Paint_DrawPoint+0x6a>
        for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++) {
 800bd08:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800bd0c:	b29b      	uxth	r3, r3
 800bd0e:	3301      	adds	r3, #1
 800bd10:	b29b      	uxth	r3, r3
 800bd12:	81fb      	strh	r3, [r7, #14]
 800bd14:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800bd18:	787b      	ldrb	r3, [r7, #1]
 800bd1a:	005b      	lsls	r3, r3, #1
 800bd1c:	3b01      	subs	r3, #1
 800bd1e:	429a      	cmp	r2, r3
 800bd20:	dbbe      	blt.n	800bca0 <Paint_DrawPoint+0x64>
 800bd22:	e02b      	b.n	800bd7c <Paint_DrawPoint+0x140>
            }
        }
    } else {
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 800bd24:	2300      	movs	r3, #0
 800bd26:	81fb      	strh	r3, [r7, #14]
 800bd28:	e023      	b.n	800bd72 <Paint_DrawPoint+0x136>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	81bb      	strh	r3, [r7, #12]
 800bd2e:	e015      	b.n	800bd5c <Paint_DrawPoint+0x120>
                Paint_SetPixel(Xpoint + XDir_Num - 1, Ypoint + YDir_Num - 1, Color);
 800bd30:	89fa      	ldrh	r2, [r7, #14]
 800bd32:	88fb      	ldrh	r3, [r7, #6]
 800bd34:	4413      	add	r3, r2
 800bd36:	b29b      	uxth	r3, r3
 800bd38:	3b01      	subs	r3, #1
 800bd3a:	b298      	uxth	r0, r3
 800bd3c:	89ba      	ldrh	r2, [r7, #12]
 800bd3e:	88bb      	ldrh	r3, [r7, #4]
 800bd40:	4413      	add	r3, r2
 800bd42:	b29b      	uxth	r3, r3
 800bd44:	3b01      	subs	r3, #1
 800bd46:	b29b      	uxth	r3, r3
 800bd48:	887a      	ldrh	r2, [r7, #2]
 800bd4a:	4619      	mov	r1, r3
 800bd4c:	f7ff fd5a 	bl	800b804 <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 800bd50:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800bd54:	b29b      	uxth	r3, r3
 800bd56:	3301      	adds	r3, #1
 800bd58:	b29b      	uxth	r3, r3
 800bd5a:	81bb      	strh	r3, [r7, #12]
 800bd5c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800bd60:	787b      	ldrb	r3, [r7, #1]
 800bd62:	429a      	cmp	r2, r3
 800bd64:	dbe4      	blt.n	800bd30 <Paint_DrawPoint+0xf4>
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 800bd66:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800bd6a:	b29b      	uxth	r3, r3
 800bd6c:	3301      	adds	r3, #1
 800bd6e:	b29b      	uxth	r3, r3
 800bd70:	81fb      	strh	r3, [r7, #14]
 800bd72:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800bd76:	787b      	ldrb	r3, [r7, #1]
 800bd78:	429a      	cmp	r2, r3
 800bd7a:	dbd6      	blt.n	800bd2a <Paint_DrawPoint+0xee>
            }
        }
    }
}
 800bd7c:	3714      	adds	r7, #20
 800bd7e:	46bd      	mov	sp, r7
 800bd80:	bd90      	pop	{r4, r7, pc}
 800bd82:	bf00      	nop
 800bd84:	20001a50 	.word	0x20001a50
 800bd88:	08010688 	.word	0x08010688
 800bd8c:	080106c8 	.word	0x080106c8
 800bd90:	080106ec 	.word	0x080106ec

0800bd94 <Paint_DrawLine>:
    Line_width : Line width
    Line_Style: Solid and dotted lines
******************************************************************************/
void Paint_DrawLine(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend,
                    UWORD Color, DOT_PIXEL Line_width, LINE_STYLE Line_Style)
{
 800bd94:	b590      	push	{r4, r7, lr}
 800bd96:	b08d      	sub	sp, #52	; 0x34
 800bd98:	af02      	add	r7, sp, #8
 800bd9a:	4604      	mov	r4, r0
 800bd9c:	4608      	mov	r0, r1
 800bd9e:	4611      	mov	r1, r2
 800bda0:	461a      	mov	r2, r3
 800bda2:	4623      	mov	r3, r4
 800bda4:	80fb      	strh	r3, [r7, #6]
 800bda6:	4603      	mov	r3, r0
 800bda8:	80bb      	strh	r3, [r7, #4]
 800bdaa:	460b      	mov	r3, r1
 800bdac:	807b      	strh	r3, [r7, #2]
 800bdae:	4613      	mov	r3, r2
 800bdb0:	803b      	strh	r3, [r7, #0]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 800bdb2:	4b52      	ldr	r3, [pc, #328]	; (800befc <Paint_DrawLine+0x168>)
 800bdb4:	889b      	ldrh	r3, [r3, #4]
 800bdb6:	88fa      	ldrh	r2, [r7, #6]
 800bdb8:	429a      	cmp	r2, r3
 800bdba:	d80e      	bhi.n	800bdda <Paint_DrawLine+0x46>
 800bdbc:	4b4f      	ldr	r3, [pc, #316]	; (800befc <Paint_DrawLine+0x168>)
 800bdbe:	88db      	ldrh	r3, [r3, #6]
 800bdc0:	88ba      	ldrh	r2, [r7, #4]
 800bdc2:	429a      	cmp	r2, r3
 800bdc4:	d809      	bhi.n	800bdda <Paint_DrawLine+0x46>
        Xend > Paint.Width || Yend > Paint.Height) {
 800bdc6:	4b4d      	ldr	r3, [pc, #308]	; (800befc <Paint_DrawLine+0x168>)
 800bdc8:	889b      	ldrh	r3, [r3, #4]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 800bdca:	887a      	ldrh	r2, [r7, #2]
 800bdcc:	429a      	cmp	r2, r3
 800bdce:	d804      	bhi.n	800bdda <Paint_DrawLine+0x46>
        Xend > Paint.Width || Yend > Paint.Height) {
 800bdd0:	4b4a      	ldr	r3, [pc, #296]	; (800befc <Paint_DrawLine+0x168>)
 800bdd2:	88db      	ldrh	r3, [r3, #6]
 800bdd4:	883a      	ldrh	r2, [r7, #0]
 800bdd6:	429a      	cmp	r2, r3
 800bdd8:	d903      	bls.n	800bde2 <Paint_DrawLine+0x4e>
        Debug("Paint_DrawLine Input exceeds the normal display range\r\n");
 800bdda:	4849      	ldr	r0, [pc, #292]	; (800bf00 <Paint_DrawLine+0x16c>)
 800bddc:	f001 fb42 	bl	800d464 <puts>
        return;
 800bde0:	e088      	b.n	800bef4 <Paint_DrawLine+0x160>
    }

    UWORD Xpoint = Xstart;
 800bde2:	88fb      	ldrh	r3, [r7, #6]
 800bde4:	84fb      	strh	r3, [r7, #38]	; 0x26
    UWORD Ypoint = Ystart;
 800bde6:	88bb      	ldrh	r3, [r7, #4]
 800bde8:	84bb      	strh	r3, [r7, #36]	; 0x24
    int dx = (int)Xend - (int)Xstart >= 0 ? Xend - Xstart : Xstart - Xend;
 800bdea:	887a      	ldrh	r2, [r7, #2]
 800bdec:	88fb      	ldrh	r3, [r7, #6]
 800bdee:	1ad3      	subs	r3, r2, r3
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	bfb8      	it	lt
 800bdf4:	425b      	neglt	r3, r3
 800bdf6:	61bb      	str	r3, [r7, #24]
    int dy = (int)Yend - (int)Ystart <= 0 ? Yend - Ystart : Ystart - Yend;
 800bdf8:	883a      	ldrh	r2, [r7, #0]
 800bdfa:	88bb      	ldrh	r3, [r7, #4]
 800bdfc:	1ad3      	subs	r3, r2, r3
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	bfb8      	it	lt
 800be02:	425b      	neglt	r3, r3
 800be04:	425b      	negs	r3, r3
 800be06:	617b      	str	r3, [r7, #20]

    // Increment direction, 1 is positive, -1 is counter;
    int XAddway = Xstart < Xend ? 1 : -1;
 800be08:	88fa      	ldrh	r2, [r7, #6]
 800be0a:	887b      	ldrh	r3, [r7, #2]
 800be0c:	429a      	cmp	r2, r3
 800be0e:	d201      	bcs.n	800be14 <Paint_DrawLine+0x80>
 800be10:	2301      	movs	r3, #1
 800be12:	e001      	b.n	800be18 <Paint_DrawLine+0x84>
 800be14:	f04f 33ff 	mov.w	r3, #4294967295
 800be18:	613b      	str	r3, [r7, #16]
    int YAddway = Ystart < Yend ? 1 : -1;
 800be1a:	88ba      	ldrh	r2, [r7, #4]
 800be1c:	883b      	ldrh	r3, [r7, #0]
 800be1e:	429a      	cmp	r2, r3
 800be20:	d201      	bcs.n	800be26 <Paint_DrawLine+0x92>
 800be22:	2301      	movs	r3, #1
 800be24:	e001      	b.n	800be2a <Paint_DrawLine+0x96>
 800be26:	f04f 33ff 	mov.w	r3, #4294967295
 800be2a:	60fb      	str	r3, [r7, #12]

    //Cumulative error
    int Esp = dx + dy;
 800be2c:	69ba      	ldr	r2, [r7, #24]
 800be2e:	697b      	ldr	r3, [r7, #20]
 800be30:	4413      	add	r3, r2
 800be32:	623b      	str	r3, [r7, #32]
    char Dotted_Len = 0;
 800be34:	2300      	movs	r3, #0
 800be36:	77fb      	strb	r3, [r7, #31]

    for (;;) {
        Dotted_Len++;
 800be38:	7ffb      	ldrb	r3, [r7, #31]
 800be3a:	3301      	adds	r3, #1
 800be3c:	77fb      	strb	r3, [r7, #31]
        //Painted dotted line, 2 point is really virtual
        if (Line_Style == LINE_STYLE_DOTTED && Dotted_Len % 3 == 0) {
 800be3e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800be42:	2b01      	cmp	r3, #1
 800be44:	d125      	bne.n	800be92 <Paint_DrawLine+0xfe>
 800be46:	7ffa      	ldrb	r2, [r7, #31]
 800be48:	4b2e      	ldr	r3, [pc, #184]	; (800bf04 <Paint_DrawLine+0x170>)
 800be4a:	fba3 1302 	umull	r1, r3, r3, r2
 800be4e:	0859      	lsrs	r1, r3, #1
 800be50:	460b      	mov	r3, r1
 800be52:	005b      	lsls	r3, r3, #1
 800be54:	440b      	add	r3, r1
 800be56:	1ad3      	subs	r3, r2, r3
 800be58:	b2db      	uxtb	r3, r3
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d119      	bne.n	800be92 <Paint_DrawLine+0xfe>
            //Debug("LINE_DOTTED\r\n");
						if(Color)
 800be5e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800be60:	2b00      	cmp	r3, #0
 800be62:	d009      	beq.n	800be78 <Paint_DrawLine+0xe4>
							Paint_DrawPoint(Xpoint, Ypoint, BLACK, Line_width, DOT_STYLE_DFT);
 800be64:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800be68:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800be6a:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 800be6c:	2201      	movs	r2, #1
 800be6e:	9200      	str	r2, [sp, #0]
 800be70:	2200      	movs	r2, #0
 800be72:	f7ff fee3 	bl	800bc3c <Paint_DrawPoint>
 800be76:	e009      	b.n	800be8c <Paint_DrawLine+0xf8>
            else
							Paint_DrawPoint(Xpoint, Ypoint, WHITE, Line_width, DOT_STYLE_DFT);
 800be78:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800be7c:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800be7e:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 800be80:	2201      	movs	r2, #1
 800be82:	9200      	str	r2, [sp, #0]
 800be84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800be88:	f7ff fed8 	bl	800bc3c <Paint_DrawPoint>
            Dotted_Len = 0;
 800be8c:	2300      	movs	r3, #0
 800be8e:	77fb      	strb	r3, [r7, #31]
 800be90:	e008      	b.n	800bea4 <Paint_DrawLine+0x110>
        } else {
            Paint_DrawPoint(Xpoint, Ypoint, Color, Line_width, DOT_STYLE_DFT);
 800be92:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800be96:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800be98:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800be9a:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 800be9c:	2401      	movs	r4, #1
 800be9e:	9400      	str	r4, [sp, #0]
 800bea0:	f7ff fecc 	bl	800bc3c <Paint_DrawPoint>
        }
        if (2 * Esp >= dy) {
 800bea4:	6a3b      	ldr	r3, [r7, #32]
 800bea6:	005b      	lsls	r3, r3, #1
 800bea8:	697a      	ldr	r2, [r7, #20]
 800beaa:	429a      	cmp	r2, r3
 800beac:	dc0c      	bgt.n	800bec8 <Paint_DrawLine+0x134>
            if (Xpoint == Xend)
 800beae:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800beb0:	887b      	ldrh	r3, [r7, #2]
 800beb2:	429a      	cmp	r2, r3
 800beb4:	d01b      	beq.n	800beee <Paint_DrawLine+0x15a>
                break;
            Esp += dy;
 800beb6:	6a3a      	ldr	r2, [r7, #32]
 800beb8:	697b      	ldr	r3, [r7, #20]
 800beba:	4413      	add	r3, r2
 800bebc:	623b      	str	r3, [r7, #32]
            Xpoint += XAddway;
 800bebe:	693b      	ldr	r3, [r7, #16]
 800bec0:	b29a      	uxth	r2, r3
 800bec2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bec4:	4413      	add	r3, r2
 800bec6:	84fb      	strh	r3, [r7, #38]	; 0x26
        }
        if (2 * Esp <= dx) {
 800bec8:	6a3b      	ldr	r3, [r7, #32]
 800beca:	005b      	lsls	r3, r3, #1
 800becc:	69ba      	ldr	r2, [r7, #24]
 800bece:	429a      	cmp	r2, r3
 800bed0:	dbb2      	blt.n	800be38 <Paint_DrawLine+0xa4>
            if (Ypoint == Yend)
 800bed2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bed4:	883b      	ldrh	r3, [r7, #0]
 800bed6:	429a      	cmp	r2, r3
 800bed8:	d00b      	beq.n	800bef2 <Paint_DrawLine+0x15e>
                break;
            Esp += dx;
 800beda:	6a3a      	ldr	r2, [r7, #32]
 800bedc:	69bb      	ldr	r3, [r7, #24]
 800bede:	4413      	add	r3, r2
 800bee0:	623b      	str	r3, [r7, #32]
            Ypoint += YAddway;
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	b29a      	uxth	r2, r3
 800bee6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bee8:	4413      	add	r3, r2
 800beea:	84bb      	strh	r3, [r7, #36]	; 0x24
        Dotted_Len++;
 800beec:	e7a4      	b.n	800be38 <Paint_DrawLine+0xa4>
                break;
 800beee:	bf00      	nop
 800bef0:	e000      	b.n	800bef4 <Paint_DrawLine+0x160>
                break;
 800bef2:	bf00      	nop
        }
    }
}
 800bef4:	372c      	adds	r7, #44	; 0x2c
 800bef6:	46bd      	mov	sp, r7
 800bef8:	bd90      	pop	{r4, r7, pc}
 800befa:	bf00      	nop
 800befc:	20001a50 	.word	0x20001a50
 800bf00:	08010714 	.word	0x08010714
 800bf04:	aaaaaaab 	.word	0xaaaaaaab

0800bf08 <Paint_DrawRectangle>:
    Line_width: Line width
    Draw_Fill : Whether to fill the inside of the rectangle
******************************************************************************/
void Paint_DrawRectangle(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend,
                         UWORD Color, DOT_PIXEL Line_width, DRAW_FILL Draw_Fill)
{
 800bf08:	b590      	push	{r4, r7, lr}
 800bf0a:	b089      	sub	sp, #36	; 0x24
 800bf0c:	af04      	add	r7, sp, #16
 800bf0e:	4604      	mov	r4, r0
 800bf10:	4608      	mov	r0, r1
 800bf12:	4611      	mov	r1, r2
 800bf14:	461a      	mov	r2, r3
 800bf16:	4623      	mov	r3, r4
 800bf18:	80fb      	strh	r3, [r7, #6]
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	80bb      	strh	r3, [r7, #4]
 800bf1e:	460b      	mov	r3, r1
 800bf20:	807b      	strh	r3, [r7, #2]
 800bf22:	4613      	mov	r3, r2
 800bf24:	803b      	strh	r3, [r7, #0]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 800bf26:	4b38      	ldr	r3, [pc, #224]	; (800c008 <Paint_DrawRectangle+0x100>)
 800bf28:	889b      	ldrh	r3, [r3, #4]
 800bf2a:	88fa      	ldrh	r2, [r7, #6]
 800bf2c:	429a      	cmp	r2, r3
 800bf2e:	d80e      	bhi.n	800bf4e <Paint_DrawRectangle+0x46>
 800bf30:	4b35      	ldr	r3, [pc, #212]	; (800c008 <Paint_DrawRectangle+0x100>)
 800bf32:	88db      	ldrh	r3, [r3, #6]
 800bf34:	88ba      	ldrh	r2, [r7, #4]
 800bf36:	429a      	cmp	r2, r3
 800bf38:	d809      	bhi.n	800bf4e <Paint_DrawRectangle+0x46>
        Xend > Paint.Width || Yend > Paint.Height) {
 800bf3a:	4b33      	ldr	r3, [pc, #204]	; (800c008 <Paint_DrawRectangle+0x100>)
 800bf3c:	889b      	ldrh	r3, [r3, #4]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 800bf3e:	887a      	ldrh	r2, [r7, #2]
 800bf40:	429a      	cmp	r2, r3
 800bf42:	d804      	bhi.n	800bf4e <Paint_DrawRectangle+0x46>
        Xend > Paint.Width || Yend > Paint.Height) {
 800bf44:	4b30      	ldr	r3, [pc, #192]	; (800c008 <Paint_DrawRectangle+0x100>)
 800bf46:	88db      	ldrh	r3, [r3, #6]
 800bf48:	883a      	ldrh	r2, [r7, #0]
 800bf4a:	429a      	cmp	r2, r3
 800bf4c:	d903      	bls.n	800bf56 <Paint_DrawRectangle+0x4e>
        Debug("Input exceeds the normal display range\r\n");
 800bf4e:	482f      	ldr	r0, [pc, #188]	; (800c00c <Paint_DrawRectangle+0x104>)
 800bf50:	f001 fa88 	bl	800d464 <puts>
        return;
 800bf54:	e054      	b.n	800c000 <Paint_DrawRectangle+0xf8>
    }

    if (Draw_Fill) {
 800bf56:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d018      	beq.n	800bf90 <Paint_DrawRectangle+0x88>
        UWORD Ypoint;
        for(Ypoint = Ystart; Ypoint < Yend; Ypoint++) {
 800bf5e:	88bb      	ldrh	r3, [r7, #4]
 800bf60:	81fb      	strh	r3, [r7, #14]
 800bf62:	e010      	b.n	800bf86 <Paint_DrawRectangle+0x7e>
            Paint_DrawLine(Xstart, Ypoint, Xend, Ypoint, Color , Line_width, LINE_STYLE_SOLID);
 800bf64:	89fc      	ldrh	r4, [r7, #14]
 800bf66:	887a      	ldrh	r2, [r7, #2]
 800bf68:	89f9      	ldrh	r1, [r7, #14]
 800bf6a:	88f8      	ldrh	r0, [r7, #6]
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	9302      	str	r3, [sp, #8]
 800bf70:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bf74:	9301      	str	r3, [sp, #4]
 800bf76:	8c3b      	ldrh	r3, [r7, #32]
 800bf78:	9300      	str	r3, [sp, #0]
 800bf7a:	4623      	mov	r3, r4
 800bf7c:	f7ff ff0a 	bl	800bd94 <Paint_DrawLine>
        for(Ypoint = Ystart; Ypoint < Yend; Ypoint++) {
 800bf80:	89fb      	ldrh	r3, [r7, #14]
 800bf82:	3301      	adds	r3, #1
 800bf84:	81fb      	strh	r3, [r7, #14]
 800bf86:	89fa      	ldrh	r2, [r7, #14]
 800bf88:	883b      	ldrh	r3, [r7, #0]
 800bf8a:	429a      	cmp	r2, r3
 800bf8c:	d3ea      	bcc.n	800bf64 <Paint_DrawRectangle+0x5c>
 800bf8e:	e037      	b.n	800c000 <Paint_DrawRectangle+0xf8>
        }
    } else {
        Paint_DrawLine(Xstart, Ystart, Xend, Ystart, Color, Line_width, LINE_STYLE_SOLID);
 800bf90:	88bc      	ldrh	r4, [r7, #4]
 800bf92:	887a      	ldrh	r2, [r7, #2]
 800bf94:	88b9      	ldrh	r1, [r7, #4]
 800bf96:	88f8      	ldrh	r0, [r7, #6]
 800bf98:	2300      	movs	r3, #0
 800bf9a:	9302      	str	r3, [sp, #8]
 800bf9c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bfa0:	9301      	str	r3, [sp, #4]
 800bfa2:	8c3b      	ldrh	r3, [r7, #32]
 800bfa4:	9300      	str	r3, [sp, #0]
 800bfa6:	4623      	mov	r3, r4
 800bfa8:	f7ff fef4 	bl	800bd94 <Paint_DrawLine>
        Paint_DrawLine(Xstart, Ystart, Xstart, Yend, Color, Line_width, LINE_STYLE_SOLID);
 800bfac:	883c      	ldrh	r4, [r7, #0]
 800bfae:	88fa      	ldrh	r2, [r7, #6]
 800bfb0:	88b9      	ldrh	r1, [r7, #4]
 800bfb2:	88f8      	ldrh	r0, [r7, #6]
 800bfb4:	2300      	movs	r3, #0
 800bfb6:	9302      	str	r3, [sp, #8]
 800bfb8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bfbc:	9301      	str	r3, [sp, #4]
 800bfbe:	8c3b      	ldrh	r3, [r7, #32]
 800bfc0:	9300      	str	r3, [sp, #0]
 800bfc2:	4623      	mov	r3, r4
 800bfc4:	f7ff fee6 	bl	800bd94 <Paint_DrawLine>
        Paint_DrawLine(Xend, Yend, Xend, Ystart, Color, Line_width, LINE_STYLE_SOLID);
 800bfc8:	88bc      	ldrh	r4, [r7, #4]
 800bfca:	887a      	ldrh	r2, [r7, #2]
 800bfcc:	8839      	ldrh	r1, [r7, #0]
 800bfce:	8878      	ldrh	r0, [r7, #2]
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	9302      	str	r3, [sp, #8]
 800bfd4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bfd8:	9301      	str	r3, [sp, #4]
 800bfda:	8c3b      	ldrh	r3, [r7, #32]
 800bfdc:	9300      	str	r3, [sp, #0]
 800bfde:	4623      	mov	r3, r4
 800bfe0:	f7ff fed8 	bl	800bd94 <Paint_DrawLine>
        Paint_DrawLine(Xend, Yend, Xstart, Yend, Color, Line_width, LINE_STYLE_SOLID);
 800bfe4:	883c      	ldrh	r4, [r7, #0]
 800bfe6:	88fa      	ldrh	r2, [r7, #6]
 800bfe8:	8839      	ldrh	r1, [r7, #0]
 800bfea:	8878      	ldrh	r0, [r7, #2]
 800bfec:	2300      	movs	r3, #0
 800bfee:	9302      	str	r3, [sp, #8]
 800bff0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bff4:	9301      	str	r3, [sp, #4]
 800bff6:	8c3b      	ldrh	r3, [r7, #32]
 800bff8:	9300      	str	r3, [sp, #0]
 800bffa:	4623      	mov	r3, r4
 800bffc:	f7ff feca 	bl	800bd94 <Paint_DrawLine>
    }
}
 800c000:	3714      	adds	r7, #20
 800c002:	46bd      	mov	sp, r7
 800c004:	bd90      	pop	{r4, r7, pc}
 800c006:	bf00      	nop
 800c008:	20001a50 	.word	0x20001a50
 800c00c:	08010754 	.word	0x08010754

0800c010 <Paint_DrawCircle>:
    Line_width: Line width
    Draw_Fill : Whether to fill the inside of the Circle
******************************************************************************/
void Paint_DrawCircle(UWORD X_Center, UWORD Y_Center, UWORD Radius,
                      UWORD Color, DOT_PIXEL Line_width, DRAW_FILL Draw_Fill)
{
 800c010:	b590      	push	{r4, r7, lr}
 800c012:	b087      	sub	sp, #28
 800c014:	af02      	add	r7, sp, #8
 800c016:	4604      	mov	r4, r0
 800c018:	4608      	mov	r0, r1
 800c01a:	4611      	mov	r1, r2
 800c01c:	461a      	mov	r2, r3
 800c01e:	4623      	mov	r3, r4
 800c020:	80fb      	strh	r3, [r7, #6]
 800c022:	4603      	mov	r3, r0
 800c024:	80bb      	strh	r3, [r7, #4]
 800c026:	460b      	mov	r3, r1
 800c028:	807b      	strh	r3, [r7, #2]
 800c02a:	4613      	mov	r3, r2
 800c02c:	803b      	strh	r3, [r7, #0]
    if (X_Center > Paint.Width || Y_Center >= Paint.Height) {
 800c02e:	4b67      	ldr	r3, [pc, #412]	; (800c1cc <Paint_DrawCircle+0x1bc>)
 800c030:	889b      	ldrh	r3, [r3, #4]
 800c032:	88fa      	ldrh	r2, [r7, #6]
 800c034:	429a      	cmp	r2, r3
 800c036:	d804      	bhi.n	800c042 <Paint_DrawCircle+0x32>
 800c038:	4b64      	ldr	r3, [pc, #400]	; (800c1cc <Paint_DrawCircle+0x1bc>)
 800c03a:	88db      	ldrh	r3, [r3, #6]
 800c03c:	88ba      	ldrh	r2, [r7, #4]
 800c03e:	429a      	cmp	r2, r3
 800c040:	d303      	bcc.n	800c04a <Paint_DrawCircle+0x3a>
        Debug("Paint_DrawCircle Input exceeds the normal display range\r\n");
 800c042:	4863      	ldr	r0, [pc, #396]	; (800c1d0 <Paint_DrawCircle+0x1c0>)
 800c044:	f001 fa0e 	bl	800d464 <puts>
        return;
 800c048:	e16b      	b.n	800c322 <Paint_DrawCircle+0x312>
    }

    //Draw a circle from(0, R) as a starting point
    int16_t XCurrent, YCurrent;
    XCurrent = 0;
 800c04a:	2300      	movs	r3, #0
 800c04c:	81fb      	strh	r3, [r7, #14]
    YCurrent = Radius;
 800c04e:	887b      	ldrh	r3, [r7, #2]
 800c050:	81bb      	strh	r3, [r7, #12]

    //Cumulative error,judge the next point of the logo
    int16_t Esp = 3 - (Radius << 1 );
 800c052:	887b      	ldrh	r3, [r7, #2]
 800c054:	005b      	lsls	r3, r3, #1
 800c056:	b29b      	uxth	r3, r3
 800c058:	f1c3 0303 	rsb	r3, r3, #3
 800c05c:	b29b      	uxth	r3, r3
 800c05e:	817b      	strh	r3, [r7, #10]

    int16_t sCountY;
    if (Draw_Fill == DRAW_FILL_FULL) {
 800c060:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c064:	2b01      	cmp	r3, #1
 800c066:	f040 8155 	bne.w	800c314 <Paint_DrawCircle+0x304>
        while (XCurrent <= YCurrent ) { //Realistic circles
 800c06a:	e0a6      	b.n	800c1ba <Paint_DrawCircle+0x1aa>
            for (sCountY = XCurrent; sCountY <= YCurrent; sCountY ++ ) {
 800c06c:	89fb      	ldrh	r3, [r7, #14]
 800c06e:	813b      	strh	r3, [r7, #8]
 800c070:	e075      	b.n	800c15e <Paint_DrawCircle+0x14e>
                Paint_DrawPoint(X_Center + XCurrent, Y_Center + sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//1
 800c072:	89fa      	ldrh	r2, [r7, #14]
 800c074:	88fb      	ldrh	r3, [r7, #6]
 800c076:	4413      	add	r3, r2
 800c078:	b298      	uxth	r0, r3
 800c07a:	893a      	ldrh	r2, [r7, #8]
 800c07c:	88bb      	ldrh	r3, [r7, #4]
 800c07e:	4413      	add	r3, r2
 800c080:	b299      	uxth	r1, r3
 800c082:	883a      	ldrh	r2, [r7, #0]
 800c084:	2301      	movs	r3, #1
 800c086:	9300      	str	r3, [sp, #0]
 800c088:	2301      	movs	r3, #1
 800c08a:	f7ff fdd7 	bl	800bc3c <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - XCurrent, Y_Center + sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//2
 800c08e:	89fb      	ldrh	r3, [r7, #14]
 800c090:	88fa      	ldrh	r2, [r7, #6]
 800c092:	1ad3      	subs	r3, r2, r3
 800c094:	b298      	uxth	r0, r3
 800c096:	893a      	ldrh	r2, [r7, #8]
 800c098:	88bb      	ldrh	r3, [r7, #4]
 800c09a:	4413      	add	r3, r2
 800c09c:	b299      	uxth	r1, r3
 800c09e:	883a      	ldrh	r2, [r7, #0]
 800c0a0:	2301      	movs	r3, #1
 800c0a2:	9300      	str	r3, [sp, #0]
 800c0a4:	2301      	movs	r3, #1
 800c0a6:	f7ff fdc9 	bl	800bc3c <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - sCountY, Y_Center + XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//3
 800c0aa:	893b      	ldrh	r3, [r7, #8]
 800c0ac:	88fa      	ldrh	r2, [r7, #6]
 800c0ae:	1ad3      	subs	r3, r2, r3
 800c0b0:	b298      	uxth	r0, r3
 800c0b2:	89fa      	ldrh	r2, [r7, #14]
 800c0b4:	88bb      	ldrh	r3, [r7, #4]
 800c0b6:	4413      	add	r3, r2
 800c0b8:	b299      	uxth	r1, r3
 800c0ba:	883a      	ldrh	r2, [r7, #0]
 800c0bc:	2301      	movs	r3, #1
 800c0be:	9300      	str	r3, [sp, #0]
 800c0c0:	2301      	movs	r3, #1
 800c0c2:	f7ff fdbb 	bl	800bc3c <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - sCountY, Y_Center - XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//4
 800c0c6:	893b      	ldrh	r3, [r7, #8]
 800c0c8:	88fa      	ldrh	r2, [r7, #6]
 800c0ca:	1ad3      	subs	r3, r2, r3
 800c0cc:	b298      	uxth	r0, r3
 800c0ce:	89fb      	ldrh	r3, [r7, #14]
 800c0d0:	88ba      	ldrh	r2, [r7, #4]
 800c0d2:	1ad3      	subs	r3, r2, r3
 800c0d4:	b299      	uxth	r1, r3
 800c0d6:	883a      	ldrh	r2, [r7, #0]
 800c0d8:	2301      	movs	r3, #1
 800c0da:	9300      	str	r3, [sp, #0]
 800c0dc:	2301      	movs	r3, #1
 800c0de:	f7ff fdad 	bl	800bc3c <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - XCurrent, Y_Center - sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//5
 800c0e2:	89fb      	ldrh	r3, [r7, #14]
 800c0e4:	88fa      	ldrh	r2, [r7, #6]
 800c0e6:	1ad3      	subs	r3, r2, r3
 800c0e8:	b298      	uxth	r0, r3
 800c0ea:	893b      	ldrh	r3, [r7, #8]
 800c0ec:	88ba      	ldrh	r2, [r7, #4]
 800c0ee:	1ad3      	subs	r3, r2, r3
 800c0f0:	b299      	uxth	r1, r3
 800c0f2:	883a      	ldrh	r2, [r7, #0]
 800c0f4:	2301      	movs	r3, #1
 800c0f6:	9300      	str	r3, [sp, #0]
 800c0f8:	2301      	movs	r3, #1
 800c0fa:	f7ff fd9f 	bl	800bc3c <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + XCurrent, Y_Center - sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//6
 800c0fe:	89fa      	ldrh	r2, [r7, #14]
 800c100:	88fb      	ldrh	r3, [r7, #6]
 800c102:	4413      	add	r3, r2
 800c104:	b298      	uxth	r0, r3
 800c106:	893b      	ldrh	r3, [r7, #8]
 800c108:	88ba      	ldrh	r2, [r7, #4]
 800c10a:	1ad3      	subs	r3, r2, r3
 800c10c:	b299      	uxth	r1, r3
 800c10e:	883a      	ldrh	r2, [r7, #0]
 800c110:	2301      	movs	r3, #1
 800c112:	9300      	str	r3, [sp, #0]
 800c114:	2301      	movs	r3, #1
 800c116:	f7ff fd91 	bl	800bc3c <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + sCountY, Y_Center - XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//7
 800c11a:	893a      	ldrh	r2, [r7, #8]
 800c11c:	88fb      	ldrh	r3, [r7, #6]
 800c11e:	4413      	add	r3, r2
 800c120:	b298      	uxth	r0, r3
 800c122:	89fb      	ldrh	r3, [r7, #14]
 800c124:	88ba      	ldrh	r2, [r7, #4]
 800c126:	1ad3      	subs	r3, r2, r3
 800c128:	b299      	uxth	r1, r3
 800c12a:	883a      	ldrh	r2, [r7, #0]
 800c12c:	2301      	movs	r3, #1
 800c12e:	9300      	str	r3, [sp, #0]
 800c130:	2301      	movs	r3, #1
 800c132:	f7ff fd83 	bl	800bc3c <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + sCountY, Y_Center + XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);
 800c136:	893a      	ldrh	r2, [r7, #8]
 800c138:	88fb      	ldrh	r3, [r7, #6]
 800c13a:	4413      	add	r3, r2
 800c13c:	b298      	uxth	r0, r3
 800c13e:	89fa      	ldrh	r2, [r7, #14]
 800c140:	88bb      	ldrh	r3, [r7, #4]
 800c142:	4413      	add	r3, r2
 800c144:	b299      	uxth	r1, r3
 800c146:	883a      	ldrh	r2, [r7, #0]
 800c148:	2301      	movs	r3, #1
 800c14a:	9300      	str	r3, [sp, #0]
 800c14c:	2301      	movs	r3, #1
 800c14e:	f7ff fd75 	bl	800bc3c <Paint_DrawPoint>
            for (sCountY = XCurrent; sCountY <= YCurrent; sCountY ++ ) {
 800c152:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800c156:	b29b      	uxth	r3, r3
 800c158:	3301      	adds	r3, #1
 800c15a:	b29b      	uxth	r3, r3
 800c15c:	813b      	strh	r3, [r7, #8]
 800c15e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800c162:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c166:	429a      	cmp	r2, r3
 800c168:	dd83      	ble.n	800c072 <Paint_DrawCircle+0x62>
            }
            if (Esp < 0 )
 800c16a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	da09      	bge.n	800c186 <Paint_DrawCircle+0x176>
                Esp += 4 * XCurrent + 6;
 800c172:	89fb      	ldrh	r3, [r7, #14]
 800c174:	009b      	lsls	r3, r3, #2
 800c176:	b29a      	uxth	r2, r3
 800c178:	897b      	ldrh	r3, [r7, #10]
 800c17a:	4413      	add	r3, r2
 800c17c:	b29b      	uxth	r3, r3
 800c17e:	3306      	adds	r3, #6
 800c180:	b29b      	uxth	r3, r3
 800c182:	817b      	strh	r3, [r7, #10]
 800c184:	e013      	b.n	800c1ae <Paint_DrawCircle+0x19e>
            else {
                Esp += 10 + 4 * (XCurrent - YCurrent );
 800c186:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800c18a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c18e:	1ad3      	subs	r3, r2, r3
 800c190:	b29b      	uxth	r3, r3
 800c192:	009b      	lsls	r3, r3, #2
 800c194:	b29a      	uxth	r2, r3
 800c196:	897b      	ldrh	r3, [r7, #10]
 800c198:	4413      	add	r3, r2
 800c19a:	b29b      	uxth	r3, r3
 800c19c:	330a      	adds	r3, #10
 800c19e:	b29b      	uxth	r3, r3
 800c1a0:	817b      	strh	r3, [r7, #10]
                YCurrent --;
 800c1a2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c1a6:	b29b      	uxth	r3, r3
 800c1a8:	3b01      	subs	r3, #1
 800c1aa:	b29b      	uxth	r3, r3
 800c1ac:	81bb      	strh	r3, [r7, #12]
            }
            XCurrent ++;
 800c1ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800c1b2:	b29b      	uxth	r3, r3
 800c1b4:	3301      	adds	r3, #1
 800c1b6:	b29b      	uxth	r3, r3
 800c1b8:	81fb      	strh	r3, [r7, #14]
        while (XCurrent <= YCurrent ) { //Realistic circles
 800c1ba:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800c1be:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c1c2:	429a      	cmp	r2, r3
 800c1c4:	f77f af52 	ble.w	800c06c <Paint_DrawCircle+0x5c>
 800c1c8:	e0ab      	b.n	800c322 <Paint_DrawCircle+0x312>
 800c1ca:	bf00      	nop
 800c1cc:	20001a50 	.word	0x20001a50
 800c1d0:	08010784 	.word	0x08010784
        }
    } else { //Draw a hollow circle
        while (XCurrent <= YCurrent ) {
            Paint_DrawPoint(X_Center + XCurrent, Y_Center + YCurrent, Color, Line_width, DOT_STYLE_DFT);//1
 800c1d4:	89fa      	ldrh	r2, [r7, #14]
 800c1d6:	88fb      	ldrh	r3, [r7, #6]
 800c1d8:	4413      	add	r3, r2
 800c1da:	b298      	uxth	r0, r3
 800c1dc:	89ba      	ldrh	r2, [r7, #12]
 800c1de:	88bb      	ldrh	r3, [r7, #4]
 800c1e0:	4413      	add	r3, r2
 800c1e2:	b299      	uxth	r1, r3
 800c1e4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c1e8:	883a      	ldrh	r2, [r7, #0]
 800c1ea:	2401      	movs	r4, #1
 800c1ec:	9400      	str	r4, [sp, #0]
 800c1ee:	f7ff fd25 	bl	800bc3c <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - XCurrent, Y_Center + YCurrent, Color, Line_width, DOT_STYLE_DFT);//2
 800c1f2:	89fb      	ldrh	r3, [r7, #14]
 800c1f4:	88fa      	ldrh	r2, [r7, #6]
 800c1f6:	1ad3      	subs	r3, r2, r3
 800c1f8:	b298      	uxth	r0, r3
 800c1fa:	89ba      	ldrh	r2, [r7, #12]
 800c1fc:	88bb      	ldrh	r3, [r7, #4]
 800c1fe:	4413      	add	r3, r2
 800c200:	b299      	uxth	r1, r3
 800c202:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c206:	883a      	ldrh	r2, [r7, #0]
 800c208:	2401      	movs	r4, #1
 800c20a:	9400      	str	r4, [sp, #0]
 800c20c:	f7ff fd16 	bl	800bc3c <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - YCurrent, Y_Center + XCurrent, Color, Line_width, DOT_STYLE_DFT);//3
 800c210:	89bb      	ldrh	r3, [r7, #12]
 800c212:	88fa      	ldrh	r2, [r7, #6]
 800c214:	1ad3      	subs	r3, r2, r3
 800c216:	b298      	uxth	r0, r3
 800c218:	89fa      	ldrh	r2, [r7, #14]
 800c21a:	88bb      	ldrh	r3, [r7, #4]
 800c21c:	4413      	add	r3, r2
 800c21e:	b299      	uxth	r1, r3
 800c220:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c224:	883a      	ldrh	r2, [r7, #0]
 800c226:	2401      	movs	r4, #1
 800c228:	9400      	str	r4, [sp, #0]
 800c22a:	f7ff fd07 	bl	800bc3c <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - YCurrent, Y_Center - XCurrent, Color, Line_width, DOT_STYLE_DFT);//4
 800c22e:	89bb      	ldrh	r3, [r7, #12]
 800c230:	88fa      	ldrh	r2, [r7, #6]
 800c232:	1ad3      	subs	r3, r2, r3
 800c234:	b298      	uxth	r0, r3
 800c236:	89fb      	ldrh	r3, [r7, #14]
 800c238:	88ba      	ldrh	r2, [r7, #4]
 800c23a:	1ad3      	subs	r3, r2, r3
 800c23c:	b299      	uxth	r1, r3
 800c23e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c242:	883a      	ldrh	r2, [r7, #0]
 800c244:	2401      	movs	r4, #1
 800c246:	9400      	str	r4, [sp, #0]
 800c248:	f7ff fcf8 	bl	800bc3c <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - XCurrent, Y_Center - YCurrent, Color, Line_width, DOT_STYLE_DFT);//5
 800c24c:	89fb      	ldrh	r3, [r7, #14]
 800c24e:	88fa      	ldrh	r2, [r7, #6]
 800c250:	1ad3      	subs	r3, r2, r3
 800c252:	b298      	uxth	r0, r3
 800c254:	89bb      	ldrh	r3, [r7, #12]
 800c256:	88ba      	ldrh	r2, [r7, #4]
 800c258:	1ad3      	subs	r3, r2, r3
 800c25a:	b299      	uxth	r1, r3
 800c25c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c260:	883a      	ldrh	r2, [r7, #0]
 800c262:	2401      	movs	r4, #1
 800c264:	9400      	str	r4, [sp, #0]
 800c266:	f7ff fce9 	bl	800bc3c <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + XCurrent, Y_Center - YCurrent, Color, Line_width, DOT_STYLE_DFT);//6
 800c26a:	89fa      	ldrh	r2, [r7, #14]
 800c26c:	88fb      	ldrh	r3, [r7, #6]
 800c26e:	4413      	add	r3, r2
 800c270:	b298      	uxth	r0, r3
 800c272:	89bb      	ldrh	r3, [r7, #12]
 800c274:	88ba      	ldrh	r2, [r7, #4]
 800c276:	1ad3      	subs	r3, r2, r3
 800c278:	b299      	uxth	r1, r3
 800c27a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c27e:	883a      	ldrh	r2, [r7, #0]
 800c280:	2401      	movs	r4, #1
 800c282:	9400      	str	r4, [sp, #0]
 800c284:	f7ff fcda 	bl	800bc3c <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + YCurrent, Y_Center - XCurrent, Color, Line_width, DOT_STYLE_DFT);//7
 800c288:	89ba      	ldrh	r2, [r7, #12]
 800c28a:	88fb      	ldrh	r3, [r7, #6]
 800c28c:	4413      	add	r3, r2
 800c28e:	b298      	uxth	r0, r3
 800c290:	89fb      	ldrh	r3, [r7, #14]
 800c292:	88ba      	ldrh	r2, [r7, #4]
 800c294:	1ad3      	subs	r3, r2, r3
 800c296:	b299      	uxth	r1, r3
 800c298:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c29c:	883a      	ldrh	r2, [r7, #0]
 800c29e:	2401      	movs	r4, #1
 800c2a0:	9400      	str	r4, [sp, #0]
 800c2a2:	f7ff fccb 	bl	800bc3c <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + YCurrent, Y_Center + XCurrent, Color, Line_width, DOT_STYLE_DFT);//0
 800c2a6:	89ba      	ldrh	r2, [r7, #12]
 800c2a8:	88fb      	ldrh	r3, [r7, #6]
 800c2aa:	4413      	add	r3, r2
 800c2ac:	b298      	uxth	r0, r3
 800c2ae:	89fa      	ldrh	r2, [r7, #14]
 800c2b0:	88bb      	ldrh	r3, [r7, #4]
 800c2b2:	4413      	add	r3, r2
 800c2b4:	b299      	uxth	r1, r3
 800c2b6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c2ba:	883a      	ldrh	r2, [r7, #0]
 800c2bc:	2401      	movs	r4, #1
 800c2be:	9400      	str	r4, [sp, #0]
 800c2c0:	f7ff fcbc 	bl	800bc3c <Paint_DrawPoint>

            if (Esp < 0 )
 800c2c4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	da09      	bge.n	800c2e0 <Paint_DrawCircle+0x2d0>
                Esp += 4 * XCurrent + 6;
 800c2cc:	89fb      	ldrh	r3, [r7, #14]
 800c2ce:	009b      	lsls	r3, r3, #2
 800c2d0:	b29a      	uxth	r2, r3
 800c2d2:	897b      	ldrh	r3, [r7, #10]
 800c2d4:	4413      	add	r3, r2
 800c2d6:	b29b      	uxth	r3, r3
 800c2d8:	3306      	adds	r3, #6
 800c2da:	b29b      	uxth	r3, r3
 800c2dc:	817b      	strh	r3, [r7, #10]
 800c2de:	e013      	b.n	800c308 <Paint_DrawCircle+0x2f8>
            else {
                Esp += 10 + 4 * (XCurrent - YCurrent );
 800c2e0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800c2e4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c2e8:	1ad3      	subs	r3, r2, r3
 800c2ea:	b29b      	uxth	r3, r3
 800c2ec:	009b      	lsls	r3, r3, #2
 800c2ee:	b29a      	uxth	r2, r3
 800c2f0:	897b      	ldrh	r3, [r7, #10]
 800c2f2:	4413      	add	r3, r2
 800c2f4:	b29b      	uxth	r3, r3
 800c2f6:	330a      	adds	r3, #10
 800c2f8:	b29b      	uxth	r3, r3
 800c2fa:	817b      	strh	r3, [r7, #10]
                YCurrent --;
 800c2fc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c300:	b29b      	uxth	r3, r3
 800c302:	3b01      	subs	r3, #1
 800c304:	b29b      	uxth	r3, r3
 800c306:	81bb      	strh	r3, [r7, #12]
            }
            XCurrent ++;
 800c308:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800c30c:	b29b      	uxth	r3, r3
 800c30e:	3301      	adds	r3, #1
 800c310:	b29b      	uxth	r3, r3
 800c312:	81fb      	strh	r3, [r7, #14]
        while (XCurrent <= YCurrent ) {
 800c314:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800c318:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c31c:	429a      	cmp	r2, r3
 800c31e:	f77f af59 	ble.w	800c1d4 <Paint_DrawCircle+0x1c4>
        }
    }
}
 800c322:	3714      	adds	r7, #20
 800c324:	46bd      	mov	sp, r7
 800c326:	bd90      	pop	{r4, r7, pc}

0800c328 <Paint_DrawChar>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
                    sFONT* Font, UWORD Color_Foreground, UWORD Color_Background)
{
 800c328:	b580      	push	{r7, lr}
 800c32a:	b088      	sub	sp, #32
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	607b      	str	r3, [r7, #4]
 800c330:	4603      	mov	r3, r0
 800c332:	81fb      	strh	r3, [r7, #14]
 800c334:	460b      	mov	r3, r1
 800c336:	81bb      	strh	r3, [r7, #12]
 800c338:	4613      	mov	r3, r2
 800c33a:	72fb      	strb	r3, [r7, #11]
    UWORD Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 800c33c:	4b4d      	ldr	r3, [pc, #308]	; (800c474 <Paint_DrawChar+0x14c>)
 800c33e:	889b      	ldrh	r3, [r3, #4]
 800c340:	89fa      	ldrh	r2, [r7, #14]
 800c342:	429a      	cmp	r2, r3
 800c344:	d804      	bhi.n	800c350 <Paint_DrawChar+0x28>
 800c346:	4b4b      	ldr	r3, [pc, #300]	; (800c474 <Paint_DrawChar+0x14c>)
 800c348:	88db      	ldrh	r3, [r3, #6]
 800c34a:	89ba      	ldrh	r2, [r7, #12]
 800c34c:	429a      	cmp	r2, r3
 800c34e:	d903      	bls.n	800c358 <Paint_DrawChar+0x30>
        Debug("Paint_DrawChar Input exceeds the normal display range\r\n");
 800c350:	4849      	ldr	r0, [pc, #292]	; (800c478 <Paint_DrawChar+0x150>)
 800c352:	f001 f887 	bl	800d464 <puts>
        return;
 800c356:	e089      	b.n	800c46c <Paint_DrawChar+0x144>
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 800c358:	7afb      	ldrb	r3, [r7, #11]
 800c35a:	3b20      	subs	r3, #32
 800c35c:	687a      	ldr	r2, [r7, #4]
 800c35e:	88d2      	ldrh	r2, [r2, #6]
 800c360:	fb02 f303 	mul.w	r3, r2, r3
 800c364:	687a      	ldr	r2, [r7, #4]
 800c366:	8892      	ldrh	r2, [r2, #4]
 800c368:	08d2      	lsrs	r2, r2, #3
 800c36a:	b292      	uxth	r2, r2
 800c36c:	4611      	mov	r1, r2
 800c36e:	687a      	ldr	r2, [r7, #4]
 800c370:	8892      	ldrh	r2, [r2, #4]
 800c372:	f002 0207 	and.w	r2, r2, #7
 800c376:	b292      	uxth	r2, r2
 800c378:	2a00      	cmp	r2, #0
 800c37a:	bf14      	ite	ne
 800c37c:	2201      	movne	r2, #1
 800c37e:	2200      	moveq	r2, #0
 800c380:	b2d2      	uxtb	r2, r2
 800c382:	440a      	add	r2, r1
 800c384:	fb02 f303 	mul.w	r3, r2, r3
 800c388:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681a      	ldr	r2, [r3, #0]
 800c38e:	697b      	ldr	r3, [r7, #20]
 800c390:	4413      	add	r3, r2
 800c392:	61bb      	str	r3, [r7, #24]

    for (Page = 0; Page < Font->Height; Page ++ ) {
 800c394:	2300      	movs	r3, #0
 800c396:	83fb      	strh	r3, [r7, #30]
 800c398:	e063      	b.n	800c462 <Paint_DrawChar+0x13a>
        for (Column = 0; Column < Font->Width; Column ++ ) {
 800c39a:	2300      	movs	r3, #0
 800c39c:	83bb      	strh	r3, [r7, #28]
 800c39e:	e04e      	b.n	800c43e <Paint_DrawChar+0x116>

            //To determine whether the font background color and screen background color is consistent
            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 800c3a0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c3a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c3a6:	4293      	cmp	r3, r2
 800c3a8:	d118      	bne.n	800c3dc <Paint_DrawChar+0xb4>
                if (*ptr & (0x80 >> (Column % 8)))
 800c3aa:	69bb      	ldr	r3, [r7, #24]
 800c3ac:	781b      	ldrb	r3, [r3, #0]
 800c3ae:	4619      	mov	r1, r3
 800c3b0:	8bbb      	ldrh	r3, [r7, #28]
 800c3b2:	f003 0307 	and.w	r3, r3, #7
 800c3b6:	2280      	movs	r2, #128	; 0x80
 800c3b8:	fa42 f303 	asr.w	r3, r2, r3
 800c3bc:	400b      	ands	r3, r1
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d031      	beq.n	800c426 <Paint_DrawChar+0xfe>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 800c3c2:	89fa      	ldrh	r2, [r7, #14]
 800c3c4:	8bbb      	ldrh	r3, [r7, #28]
 800c3c6:	4413      	add	r3, r2
 800c3c8:	b298      	uxth	r0, r3
 800c3ca:	89ba      	ldrh	r2, [r7, #12]
 800c3cc:	8bfb      	ldrh	r3, [r7, #30]
 800c3ce:	4413      	add	r3, r2
 800c3d0:	b29b      	uxth	r3, r3
 800c3d2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800c3d4:	4619      	mov	r1, r3
 800c3d6:	f7ff fa15 	bl	800b804 <Paint_SetPixel>
 800c3da:	e024      	b.n	800c426 <Paint_DrawChar+0xfe>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
            } else {
                if (*ptr & (0x80 >> (Column % 8))) {
 800c3dc:	69bb      	ldr	r3, [r7, #24]
 800c3de:	781b      	ldrb	r3, [r3, #0]
 800c3e0:	4619      	mov	r1, r3
 800c3e2:	8bbb      	ldrh	r3, [r7, #28]
 800c3e4:	f003 0307 	and.w	r3, r3, #7
 800c3e8:	2280      	movs	r2, #128	; 0x80
 800c3ea:	fa42 f303 	asr.w	r3, r2, r3
 800c3ee:	400b      	ands	r3, r1
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d00c      	beq.n	800c40e <Paint_DrawChar+0xe6>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 800c3f4:	89fa      	ldrh	r2, [r7, #14]
 800c3f6:	8bbb      	ldrh	r3, [r7, #28]
 800c3f8:	4413      	add	r3, r2
 800c3fa:	b298      	uxth	r0, r3
 800c3fc:	89ba      	ldrh	r2, [r7, #12]
 800c3fe:	8bfb      	ldrh	r3, [r7, #30]
 800c400:	4413      	add	r3, r2
 800c402:	b29b      	uxth	r3, r3
 800c404:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800c406:	4619      	mov	r1, r3
 800c408:	f7ff f9fc 	bl	800b804 <Paint_SetPixel>
 800c40c:	e00b      	b.n	800c426 <Paint_DrawChar+0xfe>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                } else {
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 800c40e:	89fa      	ldrh	r2, [r7, #14]
 800c410:	8bbb      	ldrh	r3, [r7, #28]
 800c412:	4413      	add	r3, r2
 800c414:	b298      	uxth	r0, r3
 800c416:	89ba      	ldrh	r2, [r7, #12]
 800c418:	8bfb      	ldrh	r3, [r7, #30]
 800c41a:	4413      	add	r3, r2
 800c41c:	b29b      	uxth	r3, r3
 800c41e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800c420:	4619      	mov	r1, r3
 800c422:	f7ff f9ef 	bl	800b804 <Paint_SetPixel>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                }
            }
            //One pixel is 8 bits
            if (Column % 8 == 7)
 800c426:	8bbb      	ldrh	r3, [r7, #28]
 800c428:	f003 0307 	and.w	r3, r3, #7
 800c42c:	b29b      	uxth	r3, r3
 800c42e:	2b07      	cmp	r3, #7
 800c430:	d102      	bne.n	800c438 <Paint_DrawChar+0x110>
                ptr++;
 800c432:	69bb      	ldr	r3, [r7, #24]
 800c434:	3301      	adds	r3, #1
 800c436:	61bb      	str	r3, [r7, #24]
        for (Column = 0; Column < Font->Width; Column ++ ) {
 800c438:	8bbb      	ldrh	r3, [r7, #28]
 800c43a:	3301      	adds	r3, #1
 800c43c:	83bb      	strh	r3, [r7, #28]
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	889b      	ldrh	r3, [r3, #4]
 800c442:	8bba      	ldrh	r2, [r7, #28]
 800c444:	429a      	cmp	r2, r3
 800c446:	d3ab      	bcc.n	800c3a0 <Paint_DrawChar+0x78>
        }// Write a line
        if (Font->Width % 8 != 0)
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	889b      	ldrh	r3, [r3, #4]
 800c44c:	f003 0307 	and.w	r3, r3, #7
 800c450:	b29b      	uxth	r3, r3
 800c452:	2b00      	cmp	r3, #0
 800c454:	d002      	beq.n	800c45c <Paint_DrawChar+0x134>
            ptr++;
 800c456:	69bb      	ldr	r3, [r7, #24]
 800c458:	3301      	adds	r3, #1
 800c45a:	61bb      	str	r3, [r7, #24]
    for (Page = 0; Page < Font->Height; Page ++ ) {
 800c45c:	8bfb      	ldrh	r3, [r7, #30]
 800c45e:	3301      	adds	r3, #1
 800c460:	83fb      	strh	r3, [r7, #30]
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	88db      	ldrh	r3, [r3, #6]
 800c466:	8bfa      	ldrh	r2, [r7, #30]
 800c468:	429a      	cmp	r2, r3
 800c46a:	d396      	bcc.n	800c39a <Paint_DrawChar+0x72>
    }// Write all
}
 800c46c:	3720      	adds	r7, #32
 800c46e:	46bd      	mov	sp, r7
 800c470:	bd80      	pop	{r7, pc}
 800c472:	bf00      	nop
 800c474:	20001a50 	.word	0x20001a50
 800c478:	080107c4 	.word	0x080107c4

0800c47c <Paint_DrawString_EN>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char * pString,
                         sFONT* Font, UWORD Color_Foreground, UWORD Color_Background)
{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b088      	sub	sp, #32
 800c480:	af02      	add	r7, sp, #8
 800c482:	60ba      	str	r2, [r7, #8]
 800c484:	607b      	str	r3, [r7, #4]
 800c486:	4603      	mov	r3, r0
 800c488:	81fb      	strh	r3, [r7, #14]
 800c48a:	460b      	mov	r3, r1
 800c48c:	81bb      	strh	r3, [r7, #12]
    UWORD Xpoint = Xstart;
 800c48e:	89fb      	ldrh	r3, [r7, #14]
 800c490:	82fb      	strh	r3, [r7, #22]
    UWORD Ypoint = Ystart;
 800c492:	89bb      	ldrh	r3, [r7, #12]
 800c494:	82bb      	strh	r3, [r7, #20]

    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 800c496:	4b21      	ldr	r3, [pc, #132]	; (800c51c <Paint_DrawString_EN+0xa0>)
 800c498:	889b      	ldrh	r3, [r3, #4]
 800c49a:	89fa      	ldrh	r2, [r7, #14]
 800c49c:	429a      	cmp	r2, r3
 800c49e:	d804      	bhi.n	800c4aa <Paint_DrawString_EN+0x2e>
 800c4a0:	4b1e      	ldr	r3, [pc, #120]	; (800c51c <Paint_DrawString_EN+0xa0>)
 800c4a2:	88db      	ldrh	r3, [r3, #6]
 800c4a4:	89ba      	ldrh	r2, [r7, #12]
 800c4a6:	429a      	cmp	r2, r3
 800c4a8:	d931      	bls.n	800c50e <Paint_DrawString_EN+0x92>
        Debug("Paint_DrawString_EN Input exceeds the normal display range\r\n");
 800c4aa:	481d      	ldr	r0, [pc, #116]	; (800c520 <Paint_DrawString_EN+0xa4>)
 800c4ac:	f000 ffda 	bl	800d464 <puts>
        return;
 800c4b0:	e031      	b.n	800c516 <Paint_DrawString_EN+0x9a>
    }

    while (* pString != '\0') {
        //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
        if ((Xpoint + Font->Width ) > Paint.Width ) {
 800c4b2:	8afb      	ldrh	r3, [r7, #22]
 800c4b4:	687a      	ldr	r2, [r7, #4]
 800c4b6:	8892      	ldrh	r2, [r2, #4]
 800c4b8:	4413      	add	r3, r2
 800c4ba:	4a18      	ldr	r2, [pc, #96]	; (800c51c <Paint_DrawString_EN+0xa0>)
 800c4bc:	8892      	ldrh	r2, [r2, #4]
 800c4be:	4293      	cmp	r3, r2
 800c4c0:	dd06      	ble.n	800c4d0 <Paint_DrawString_EN+0x54>
            Xpoint = Xstart;
 800c4c2:	89fb      	ldrh	r3, [r7, #14]
 800c4c4:	82fb      	strh	r3, [r7, #22]
            Ypoint += Font->Height;
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	88da      	ldrh	r2, [r3, #6]
 800c4ca:	8abb      	ldrh	r3, [r7, #20]
 800c4cc:	4413      	add	r3, r2
 800c4ce:	82bb      	strh	r3, [r7, #20]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if ((Ypoint  + Font->Height ) > Paint.Height ) {
 800c4d0:	8abb      	ldrh	r3, [r7, #20]
 800c4d2:	687a      	ldr	r2, [r7, #4]
 800c4d4:	88d2      	ldrh	r2, [r2, #6]
 800c4d6:	4413      	add	r3, r2
 800c4d8:	4a10      	ldr	r2, [pc, #64]	; (800c51c <Paint_DrawString_EN+0xa0>)
 800c4da:	88d2      	ldrh	r2, [r2, #6]
 800c4dc:	4293      	cmp	r3, r2
 800c4de:	dd03      	ble.n	800c4e8 <Paint_DrawString_EN+0x6c>
            Xpoint = Xstart;
 800c4e0:	89fb      	ldrh	r3, [r7, #14]
 800c4e2:	82fb      	strh	r3, [r7, #22]
            Ypoint = Ystart;
 800c4e4:	89bb      	ldrh	r3, [r7, #12]
 800c4e6:	82bb      	strh	r3, [r7, #20]
        }
        Paint_DrawChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 800c4e8:	68bb      	ldr	r3, [r7, #8]
 800c4ea:	781a      	ldrb	r2, [r3, #0]
 800c4ec:	8ab9      	ldrh	r1, [r7, #20]
 800c4ee:	8af8      	ldrh	r0, [r7, #22]
 800c4f0:	8c3b      	ldrh	r3, [r7, #32]
 800c4f2:	9301      	str	r3, [sp, #4]
 800c4f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c4f6:	9300      	str	r3, [sp, #0]
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	f7ff ff15 	bl	800c328 <Paint_DrawChar>

        //The next character of the address
        pString ++;
 800c4fe:	68bb      	ldr	r3, [r7, #8]
 800c500:	3301      	adds	r3, #1
 800c502:	60bb      	str	r3, [r7, #8]

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	889a      	ldrh	r2, [r3, #4]
 800c508:	8afb      	ldrh	r3, [r7, #22]
 800c50a:	4413      	add	r3, r2
 800c50c:	82fb      	strh	r3, [r7, #22]
    while (* pString != '\0') {
 800c50e:	68bb      	ldr	r3, [r7, #8]
 800c510:	781b      	ldrb	r3, [r3, #0]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d1cd      	bne.n	800c4b2 <Paint_DrawString_EN+0x36>
    }
}
 800c516:	3718      	adds	r7, #24
 800c518:	46bd      	mov	sp, r7
 800c51a:	bd80      	pop	{r7, pc}
 800c51c:	20001a50 	.word	0x20001a50
 800c520:	08010804 	.word	0x08010804

0800c524 <OLED_Reset>:
/*******************************************************************************
function:
            Hardware reset
*******************************************************************************/
static void OLED_Reset(void)
{
 800c524:	b580      	push	{r7, lr}
 800c526:	af00      	add	r7, sp, #0
	OLED_RST_1;
 800c528:	2201      	movs	r2, #1
 800c52a:	2110      	movs	r1, #16
 800c52c:	480b      	ldr	r0, [pc, #44]	; (800c55c <OLED_Reset+0x38>)
 800c52e:	f7fa fde7 	bl	8007100 <HAL_GPIO_WritePin>
    Driver_Delay_ms(100);
 800c532:	2064      	movs	r0, #100	; 0x64
 800c534:	f7ff f87c 	bl	800b630 <Driver_Delay_ms>
    OLED_RST_0;
 800c538:	2200      	movs	r2, #0
 800c53a:	2110      	movs	r1, #16
 800c53c:	4807      	ldr	r0, [pc, #28]	; (800c55c <OLED_Reset+0x38>)
 800c53e:	f7fa fddf 	bl	8007100 <HAL_GPIO_WritePin>
    Driver_Delay_ms(100);
 800c542:	2064      	movs	r0, #100	; 0x64
 800c544:	f7ff f874 	bl	800b630 <Driver_Delay_ms>
    OLED_RST_1;
 800c548:	2201      	movs	r2, #1
 800c54a:	2110      	movs	r1, #16
 800c54c:	4803      	ldr	r0, [pc, #12]	; (800c55c <OLED_Reset+0x38>)
 800c54e:	f7fa fdd7 	bl	8007100 <HAL_GPIO_WritePin>
    Driver_Delay_ms(100);
 800c552:	2064      	movs	r0, #100	; 0x64
 800c554:	f7ff f86c 	bl	800b630 <Driver_Delay_ms>
}
 800c558:	bf00      	nop
 800c55a:	bd80      	pop	{r7, pc}
 800c55c:	48000400 	.word	0x48000400

0800c560 <OLED_WriteReg>:
/*******************************************************************************
function:
            Write register address and data
*******************************************************************************/
static void OLED_WriteReg(uint8_t Reg)
{
 800c560:	b580      	push	{r7, lr}
 800c562:	b082      	sub	sp, #8
 800c564:	af00      	add	r7, sp, #0
 800c566:	4603      	mov	r3, r0
 800c568:	71fb      	strb	r3, [r7, #7]
#if USE_SPI_4W
	OLED_DC_0;
 800c56a:	2200      	movs	r2, #0
 800c56c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c570:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800c574:	f7fa fdc4 	bl	8007100 <HAL_GPIO_WritePin>
	OLED_CS_0;
 800c578:	2200      	movs	r2, #0
 800c57a:	2140      	movs	r1, #64	; 0x40
 800c57c:	4807      	ldr	r0, [pc, #28]	; (800c59c <OLED_WriteReg+0x3c>)
 800c57e:	f7fa fdbf 	bl	8007100 <HAL_GPIO_WritePin>
    SPI4W_Write_Byte(Reg);
 800c582:	79fb      	ldrb	r3, [r7, #7]
 800c584:	4618      	mov	r0, r3
 800c586:	f7ff f819 	bl	800b5bc <SPI4W_Write_Byte>
    OLED_CS_1;
 800c58a:	2201      	movs	r2, #1
 800c58c:	2140      	movs	r1, #64	; 0x40
 800c58e:	4803      	ldr	r0, [pc, #12]	; (800c59c <OLED_WriteReg+0x3c>)
 800c590:	f7fa fdb6 	bl	8007100 <HAL_GPIO_WritePin>
#elif USE_IIC
    I2C_Write_Byte(Reg,IIC_CMD);
#endif
}
 800c594:	bf00      	nop
 800c596:	3708      	adds	r7, #8
 800c598:	46bd      	mov	sp, r7
 800c59a:	bd80      	pop	{r7, pc}
 800c59c:	48000400 	.word	0x48000400

0800c5a0 <OLED_WriteData>:

static void OLED_WriteData(uint8_t Data)
{   
 800c5a0:	b580      	push	{r7, lr}
 800c5a2:	b082      	sub	sp, #8
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	4603      	mov	r3, r0
 800c5a8:	71fb      	strb	r3, [r7, #7]
#if USE_SPI_4W
	OLED_DC_1;
 800c5aa:	2201      	movs	r2, #1
 800c5ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c5b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800c5b4:	f7fa fda4 	bl	8007100 <HAL_GPIO_WritePin>
	OLED_CS_0;
 800c5b8:	2200      	movs	r2, #0
 800c5ba:	2140      	movs	r1, #64	; 0x40
 800c5bc:	4807      	ldr	r0, [pc, #28]	; (800c5dc <OLED_WriteData+0x3c>)
 800c5be:	f7fa fd9f 	bl	8007100 <HAL_GPIO_WritePin>
    SPI4W_Write_Byte(Data);
 800c5c2:	79fb      	ldrb	r3, [r7, #7]
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	f7fe fff9 	bl	800b5bc <SPI4W_Write_Byte>
    OLED_CS_1;
 800c5ca:	2201      	movs	r2, #1
 800c5cc:	2140      	movs	r1, #64	; 0x40
 800c5ce:	4803      	ldr	r0, [pc, #12]	; (800c5dc <OLED_WriteData+0x3c>)
 800c5d0:	f7fa fd96 	bl	8007100 <HAL_GPIO_WritePin>
#elif USE_IIC
    I2C_Write_Byte(Data,IIC_RAM);
#endif
}
 800c5d4:	bf00      	nop
 800c5d6:	3708      	adds	r7, #8
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	bd80      	pop	{r7, pc}
 800c5dc:	48000400 	.word	0x48000400

0800c5e0 <OLED_InitReg>:
/*******************************************************************************
function:
        Common register initialization
*******************************************************************************/
static void OLED_InitReg(void)
{
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	af00      	add	r7, sp, #0
    OLED_WriteReg(0xae);//--turn off oled panel
 800c5e4:	20ae      	movs	r0, #174	; 0xae
 800c5e6:	f7ff ffbb 	bl	800c560 <OLED_WriteReg>

    OLED_WriteReg(0x15);    //   set column address
 800c5ea:	2015      	movs	r0, #21
 800c5ec:	f7ff ffb8 	bl	800c560 <OLED_WriteReg>
    OLED_WriteReg(0x00);    //  start column   0
 800c5f0:	2000      	movs	r0, #0
 800c5f2:	f7ff ffb5 	bl	800c560 <OLED_WriteReg>
    OLED_WriteReg(0x7f);    //  end column   127
 800c5f6:	207f      	movs	r0, #127	; 0x7f
 800c5f8:	f7ff ffb2 	bl	800c560 <OLED_WriteReg>

    OLED_WriteReg(0x75);    //   set row address
 800c5fc:	2075      	movs	r0, #117	; 0x75
 800c5fe:	f7ff ffaf 	bl	800c560 <OLED_WriteReg>
    OLED_WriteReg(0x00);    //  start row   0
 800c602:	2000      	movs	r0, #0
 800c604:	f7ff ffac 	bl	800c560 <OLED_WriteReg>
    OLED_WriteReg(0x7f);    //  end row   127
 800c608:	207f      	movs	r0, #127	; 0x7f
 800c60a:	f7ff ffa9 	bl	800c560 <OLED_WriteReg>

    OLED_WriteReg(0x81);  // set contrast control
 800c60e:	2081      	movs	r0, #129	; 0x81
 800c610:	f7ff ffa6 	bl	800c560 <OLED_WriteReg>
    OLED_WriteReg(0x80);
 800c614:	2080      	movs	r0, #128	; 0x80
 800c616:	f7ff ffa3 	bl	800c560 <OLED_WriteReg>

    OLED_WriteReg(0xa0);    // gment remap
 800c61a:	20a0      	movs	r0, #160	; 0xa0
 800c61c:	f7ff ffa0 	bl	800c560 <OLED_WriteReg>
    OLED_WriteReg(0x51);   //51
 800c620:	2051      	movs	r0, #81	; 0x51
 800c622:	f7ff ff9d 	bl	800c560 <OLED_WriteReg>

    OLED_WriteReg(0xa1);  // start line
 800c626:	20a1      	movs	r0, #161	; 0xa1
 800c628:	f7ff ff9a 	bl	800c560 <OLED_WriteReg>
    OLED_WriteReg(0x00);
 800c62c:	2000      	movs	r0, #0
 800c62e:	f7ff ff97 	bl	800c560 <OLED_WriteReg>

    OLED_WriteReg(0xa2);  // display offset
 800c632:	20a2      	movs	r0, #162	; 0xa2
 800c634:	f7ff ff94 	bl	800c560 <OLED_WriteReg>
    OLED_WriteReg(0x00);
 800c638:	2000      	movs	r0, #0
 800c63a:	f7ff ff91 	bl	800c560 <OLED_WriteReg>

    OLED_WriteReg(0xa4);    // rmal display
 800c63e:	20a4      	movs	r0, #164	; 0xa4
 800c640:	f7ff ff8e 	bl	800c560 <OLED_WriteReg>
    OLED_WriteReg(0xa8);    // set multiplex ratio
 800c644:	20a8      	movs	r0, #168	; 0xa8
 800c646:	f7ff ff8b 	bl	800c560 <OLED_WriteReg>
    OLED_WriteReg(0x7f);
 800c64a:	207f      	movs	r0, #127	; 0x7f
 800c64c:	f7ff ff88 	bl	800c560 <OLED_WriteReg>

    OLED_WriteReg(0xb1);  // set phase leghth
 800c650:	20b1      	movs	r0, #177	; 0xb1
 800c652:	f7ff ff85 	bl	800c560 <OLED_WriteReg>
    OLED_WriteReg(0xf1);
 800c656:	20f1      	movs	r0, #241	; 0xf1
 800c658:	f7ff ff82 	bl	800c560 <OLED_WriteReg>

    OLED_WriteReg(0xb3);  // set dclk
 800c65c:	20b3      	movs	r0, #179	; 0xb3
 800c65e:	f7ff ff7f 	bl	800c560 <OLED_WriteReg>
    OLED_WriteReg(0x00);  //80Hz:0xc1 90Hz:0xe1   100Hz:0x00   110Hz:0x30 120Hz:0x50   130Hz:0x70     01
 800c662:	2000      	movs	r0, #0
 800c664:	f7ff ff7c 	bl	800c560 <OLED_WriteReg>

    OLED_WriteReg(0xab);  //
 800c668:	20ab      	movs	r0, #171	; 0xab
 800c66a:	f7ff ff79 	bl	800c560 <OLED_WriteReg>
    OLED_WriteReg(0x01);  //
 800c66e:	2001      	movs	r0, #1
 800c670:	f7ff ff76 	bl	800c560 <OLED_WriteReg>

    OLED_WriteReg(0xb6);  // set phase leghth
 800c674:	20b6      	movs	r0, #182	; 0xb6
 800c676:	f7ff ff73 	bl	800c560 <OLED_WriteReg>
    OLED_WriteReg(0x0f);
 800c67a:	200f      	movs	r0, #15
 800c67c:	f7ff ff70 	bl	800c560 <OLED_WriteReg>

    OLED_WriteReg(0xbe);
 800c680:	20be      	movs	r0, #190	; 0xbe
 800c682:	f7ff ff6d 	bl	800c560 <OLED_WriteReg>
    OLED_WriteReg(0x0f);
 800c686:	200f      	movs	r0, #15
 800c688:	f7ff ff6a 	bl	800c560 <OLED_WriteReg>

    OLED_WriteReg(0xbc);
 800c68c:	20bc      	movs	r0, #188	; 0xbc
 800c68e:	f7ff ff67 	bl	800c560 <OLED_WriteReg>
    OLED_WriteReg(0x08);
 800c692:	2008      	movs	r0, #8
 800c694:	f7ff ff64 	bl	800c560 <OLED_WriteReg>

    OLED_WriteReg(0xd5);
 800c698:	20d5      	movs	r0, #213	; 0xd5
 800c69a:	f7ff ff61 	bl	800c560 <OLED_WriteReg>
    OLED_WriteReg(0x62);
 800c69e:	2062      	movs	r0, #98	; 0x62
 800c6a0:	f7ff ff5e 	bl	800c560 <OLED_WriteReg>

    OLED_WriteReg(0xfd);
 800c6a4:	20fd      	movs	r0, #253	; 0xfd
 800c6a6:	f7ff ff5b 	bl	800c560 <OLED_WriteReg>
    OLED_WriteReg(0x12);
 800c6aa:	2012      	movs	r0, #18
 800c6ac:	f7ff ff58 	bl	800c560 <OLED_WriteReg>

}
 800c6b0:	bf00      	nop
 800c6b2:	bd80      	pop	{r7, pc}

0800c6b4 <OLED_1in5_Init>:
/********************************************************************************
function:
            initialization
********************************************************************************/
void OLED_1in5_Init(void)
{
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	af00      	add	r7, sp, #0
    //Hardware reset
    OLED_Reset();
 800c6b8:	f7ff ff34 	bl	800c524 <OLED_Reset>

    //Set the initialization register
    OLED_InitReg();
 800c6bc:	f7ff ff90 	bl	800c5e0 <OLED_InitReg>
    Driver_Delay_ms(200);
 800c6c0:	20c8      	movs	r0, #200	; 0xc8
 800c6c2:	f7fe ffb5 	bl	800b630 <Driver_Delay_ms>

    //Turn on the OLED display
    OLED_WriteReg(0xAF);
 800c6c6:	20af      	movs	r0, #175	; 0xaf
 800c6c8:	f7ff ff4a 	bl	800c560 <OLED_WriteReg>
}
 800c6cc:	bf00      	nop
 800c6ce:	bd80      	pop	{r7, pc}

0800c6d0 <OLED_SetWindow>:
        Ystart :   Y direction Start coordinates
        Xend   :   X direction end coordinates
        Yend   :   Y direction end coordinates
********************************************************************************/
static void OLED_SetWindow(UBYTE Xstart, UBYTE Ystart, UBYTE Xend, UBYTE Yend)
{
 800c6d0:	b590      	push	{r4, r7, lr}
 800c6d2:	b083      	sub	sp, #12
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	4604      	mov	r4, r0
 800c6d8:	4608      	mov	r0, r1
 800c6da:	4611      	mov	r1, r2
 800c6dc:	461a      	mov	r2, r3
 800c6de:	4623      	mov	r3, r4
 800c6e0:	71fb      	strb	r3, [r7, #7]
 800c6e2:	4603      	mov	r3, r0
 800c6e4:	71bb      	strb	r3, [r7, #6]
 800c6e6:	460b      	mov	r3, r1
 800c6e8:	717b      	strb	r3, [r7, #5]
 800c6ea:	4613      	mov	r3, r2
 800c6ec:	713b      	strb	r3, [r7, #4]
    if((Xstart > OLED_1in5_WIDTH) || (Ystart > OLED_1in5_HEIGHT) ||
 800c6ee:	79fb      	ldrb	r3, [r7, #7]
 800c6f0:	2b80      	cmp	r3, #128	; 0x80
 800c6f2:	d827      	bhi.n	800c744 <OLED_SetWindow+0x74>
 800c6f4:	79bb      	ldrb	r3, [r7, #6]
 800c6f6:	2b80      	cmp	r3, #128	; 0x80
 800c6f8:	d824      	bhi.n	800c744 <OLED_SetWindow+0x74>
 800c6fa:	797b      	ldrb	r3, [r7, #5]
 800c6fc:	2b80      	cmp	r3, #128	; 0x80
 800c6fe:	d821      	bhi.n	800c744 <OLED_SetWindow+0x74>
       (Xend > OLED_1in5_WIDTH) || (Yend > OLED_1in5_HEIGHT))
 800c700:	793b      	ldrb	r3, [r7, #4]
 800c702:	2b80      	cmp	r3, #128	; 0x80
 800c704:	d81e      	bhi.n	800c744 <OLED_SetWindow+0x74>
        return;

    OLED_WriteReg(0x15);
 800c706:	2015      	movs	r0, #21
 800c708:	f7ff ff2a 	bl	800c560 <OLED_WriteReg>
    OLED_WriteReg(Xstart/2);
 800c70c:	79fb      	ldrb	r3, [r7, #7]
 800c70e:	085b      	lsrs	r3, r3, #1
 800c710:	b2db      	uxtb	r3, r3
 800c712:	4618      	mov	r0, r3
 800c714:	f7ff ff24 	bl	800c560 <OLED_WriteReg>
    OLED_WriteReg(Xend/2 - 1);
 800c718:	797b      	ldrb	r3, [r7, #5]
 800c71a:	085b      	lsrs	r3, r3, #1
 800c71c:	b2db      	uxtb	r3, r3
 800c71e:	3b01      	subs	r3, #1
 800c720:	b2db      	uxtb	r3, r3
 800c722:	4618      	mov	r0, r3
 800c724:	f7ff ff1c 	bl	800c560 <OLED_WriteReg>

    OLED_WriteReg(0x75);
 800c728:	2075      	movs	r0, #117	; 0x75
 800c72a:	f7ff ff19 	bl	800c560 <OLED_WriteReg>
    OLED_WriteReg(Ystart);
 800c72e:	79bb      	ldrb	r3, [r7, #6]
 800c730:	4618      	mov	r0, r3
 800c732:	f7ff ff15 	bl	800c560 <OLED_WriteReg>
    OLED_WriteReg(Yend - 1);
 800c736:	793b      	ldrb	r3, [r7, #4]
 800c738:	3b01      	subs	r3, #1
 800c73a:	b2db      	uxtb	r3, r3
 800c73c:	4618      	mov	r0, r3
 800c73e:	f7ff ff0f 	bl	800c560 <OLED_WriteReg>
 800c742:	e000      	b.n	800c746 <OLED_SetWindow+0x76>
        return;
 800c744:	bf00      	nop
}
 800c746:	370c      	adds	r7, #12
 800c748:	46bd      	mov	sp, r7
 800c74a:	bd90      	pop	{r4, r7, pc}

0800c74c <OLED_1in5_Clear>:
/********************************************************************************
function:
            Clear screen
********************************************************************************/
void OLED_1in5_Clear(void)
{
 800c74c:	b580      	push	{r7, lr}
 800c74e:	b082      	sub	sp, #8
 800c750:	af00      	add	r7, sp, #0
    UWORD i;
    OLED_SetWindow(0, 0, 128, 128);
 800c752:	2380      	movs	r3, #128	; 0x80
 800c754:	2280      	movs	r2, #128	; 0x80
 800c756:	2100      	movs	r1, #0
 800c758:	2000      	movs	r0, #0
 800c75a:	f7ff ffb9 	bl	800c6d0 <OLED_SetWindow>
    for(i=0; i<OLED_1in5_WIDTH*OLED_1in5_HEIGHT/2; i++){
 800c75e:	2300      	movs	r3, #0
 800c760:	80fb      	strh	r3, [r7, #6]
 800c762:	e005      	b.n	800c770 <OLED_1in5_Clear+0x24>
        OLED_WriteData(0x00);
 800c764:	2000      	movs	r0, #0
 800c766:	f7ff ff1b 	bl	800c5a0 <OLED_WriteData>
    for(i=0; i<OLED_1in5_WIDTH*OLED_1in5_HEIGHT/2; i++){
 800c76a:	88fb      	ldrh	r3, [r7, #6]
 800c76c:	3301      	adds	r3, #1
 800c76e:	80fb      	strh	r3, [r7, #6]
 800c770:	88fb      	ldrh	r3, [r7, #6]
 800c772:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c776:	d3f5      	bcc.n	800c764 <OLED_1in5_Clear+0x18>
    }
}
 800c778:	bf00      	nop
 800c77a:	bf00      	nop
 800c77c:	3708      	adds	r7, #8
 800c77e:	46bd      	mov	sp, r7
 800c780:	bd80      	pop	{r7, pc}

0800c782 <OLED_1in5_Display>:

/********************************************************************************
function:   Update all memory to OLED
********************************************************************************/
void OLED_1in5_Display(const UBYTE *Image)
{
 800c782:	b580      	push	{r7, lr}
 800c784:	b084      	sub	sp, #16
 800c786:	af00      	add	r7, sp, #0
 800c788:	6078      	str	r0, [r7, #4]
    UWORD i, j, temp;
    OLED_SetWindow(0, 0, 128, 128);
 800c78a:	2380      	movs	r3, #128	; 0x80
 800c78c:	2280      	movs	r2, #128	; 0x80
 800c78e:	2100      	movs	r1, #0
 800c790:	2000      	movs	r0, #0
 800c792:	f7ff ff9d 	bl	800c6d0 <OLED_SetWindow>
    for(i=0; i<OLED_1in5_HEIGHT; i++)
 800c796:	2300      	movs	r3, #0
 800c798:	81fb      	strh	r3, [r7, #14]
 800c79a:	e019      	b.n	800c7d0 <OLED_1in5_Display+0x4e>
        for(j=0; j<OLED_1in5_WIDTH/2; j++)
 800c79c:	2300      	movs	r3, #0
 800c79e:	81bb      	strh	r3, [r7, #12]
 800c7a0:	e010      	b.n	800c7c4 <OLED_1in5_Display+0x42>
        {
            temp = Image[j + i*64];
 800c7a2:	89ba      	ldrh	r2, [r7, #12]
 800c7a4:	89fb      	ldrh	r3, [r7, #14]
 800c7a6:	019b      	lsls	r3, r3, #6
 800c7a8:	4413      	add	r3, r2
 800c7aa:	461a      	mov	r2, r3
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	4413      	add	r3, r2
 800c7b0:	781b      	ldrb	r3, [r3, #0]
 800c7b2:	817b      	strh	r3, [r7, #10]
            OLED_WriteData(temp);
 800c7b4:	897b      	ldrh	r3, [r7, #10]
 800c7b6:	b2db      	uxtb	r3, r3
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	f7ff fef1 	bl	800c5a0 <OLED_WriteData>
        for(j=0; j<OLED_1in5_WIDTH/2; j++)
 800c7be:	89bb      	ldrh	r3, [r7, #12]
 800c7c0:	3301      	adds	r3, #1
 800c7c2:	81bb      	strh	r3, [r7, #12]
 800c7c4:	89bb      	ldrh	r3, [r7, #12]
 800c7c6:	2b3f      	cmp	r3, #63	; 0x3f
 800c7c8:	d9eb      	bls.n	800c7a2 <OLED_1in5_Display+0x20>
    for(i=0; i<OLED_1in5_HEIGHT; i++)
 800c7ca:	89fb      	ldrh	r3, [r7, #14]
 800c7cc:	3301      	adds	r3, #1
 800c7ce:	81fb      	strh	r3, [r7, #14]
 800c7d0:	89fb      	ldrh	r3, [r7, #14]
 800c7d2:	2b7f      	cmp	r3, #127	; 0x7f
 800c7d4:	d9e2      	bls.n	800c79c <OLED_1in5_Display+0x1a>
        }
}
 800c7d6:	bf00      	nop
 800c7d8:	bf00      	nop
 800c7da:	3710      	adds	r7, #16
 800c7dc:	46bd      	mov	sp, r7
 800c7de:	bd80      	pop	{r7, pc}

0800c7e0 <malloc>:
 800c7e0:	4b02      	ldr	r3, [pc, #8]	; (800c7ec <malloc+0xc>)
 800c7e2:	4601      	mov	r1, r0
 800c7e4:	6818      	ldr	r0, [r3, #0]
 800c7e6:	f000 b823 	b.w	800c830 <_malloc_r>
 800c7ea:	bf00      	nop
 800c7ec:	200000fc 	.word	0x200000fc

0800c7f0 <sbrk_aligned>:
 800c7f0:	b570      	push	{r4, r5, r6, lr}
 800c7f2:	4e0e      	ldr	r6, [pc, #56]	; (800c82c <sbrk_aligned+0x3c>)
 800c7f4:	460c      	mov	r4, r1
 800c7f6:	6831      	ldr	r1, [r6, #0]
 800c7f8:	4605      	mov	r5, r0
 800c7fa:	b911      	cbnz	r1, 800c802 <sbrk_aligned+0x12>
 800c7fc:	f000 ff72 	bl	800d6e4 <_sbrk_r>
 800c800:	6030      	str	r0, [r6, #0]
 800c802:	4621      	mov	r1, r4
 800c804:	4628      	mov	r0, r5
 800c806:	f000 ff6d 	bl	800d6e4 <_sbrk_r>
 800c80a:	1c43      	adds	r3, r0, #1
 800c80c:	d00a      	beq.n	800c824 <sbrk_aligned+0x34>
 800c80e:	1cc4      	adds	r4, r0, #3
 800c810:	f024 0403 	bic.w	r4, r4, #3
 800c814:	42a0      	cmp	r0, r4
 800c816:	d007      	beq.n	800c828 <sbrk_aligned+0x38>
 800c818:	1a21      	subs	r1, r4, r0
 800c81a:	4628      	mov	r0, r5
 800c81c:	f000 ff62 	bl	800d6e4 <_sbrk_r>
 800c820:	3001      	adds	r0, #1
 800c822:	d101      	bne.n	800c828 <sbrk_aligned+0x38>
 800c824:	f04f 34ff 	mov.w	r4, #4294967295
 800c828:	4620      	mov	r0, r4
 800c82a:	bd70      	pop	{r4, r5, r6, pc}
 800c82c:	20001a6c 	.word	0x20001a6c

0800c830 <_malloc_r>:
 800c830:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c834:	1ccd      	adds	r5, r1, #3
 800c836:	f025 0503 	bic.w	r5, r5, #3
 800c83a:	3508      	adds	r5, #8
 800c83c:	2d0c      	cmp	r5, #12
 800c83e:	bf38      	it	cc
 800c840:	250c      	movcc	r5, #12
 800c842:	2d00      	cmp	r5, #0
 800c844:	4607      	mov	r7, r0
 800c846:	db01      	blt.n	800c84c <_malloc_r+0x1c>
 800c848:	42a9      	cmp	r1, r5
 800c84a:	d905      	bls.n	800c858 <_malloc_r+0x28>
 800c84c:	230c      	movs	r3, #12
 800c84e:	603b      	str	r3, [r7, #0]
 800c850:	2600      	movs	r6, #0
 800c852:	4630      	mov	r0, r6
 800c854:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c858:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c92c <_malloc_r+0xfc>
 800c85c:	f000 f868 	bl	800c930 <__malloc_lock>
 800c860:	f8d8 3000 	ldr.w	r3, [r8]
 800c864:	461c      	mov	r4, r3
 800c866:	bb5c      	cbnz	r4, 800c8c0 <_malloc_r+0x90>
 800c868:	4629      	mov	r1, r5
 800c86a:	4638      	mov	r0, r7
 800c86c:	f7ff ffc0 	bl	800c7f0 <sbrk_aligned>
 800c870:	1c43      	adds	r3, r0, #1
 800c872:	4604      	mov	r4, r0
 800c874:	d155      	bne.n	800c922 <_malloc_r+0xf2>
 800c876:	f8d8 4000 	ldr.w	r4, [r8]
 800c87a:	4626      	mov	r6, r4
 800c87c:	2e00      	cmp	r6, #0
 800c87e:	d145      	bne.n	800c90c <_malloc_r+0xdc>
 800c880:	2c00      	cmp	r4, #0
 800c882:	d048      	beq.n	800c916 <_malloc_r+0xe6>
 800c884:	6823      	ldr	r3, [r4, #0]
 800c886:	4631      	mov	r1, r6
 800c888:	4638      	mov	r0, r7
 800c88a:	eb04 0903 	add.w	r9, r4, r3
 800c88e:	f000 ff29 	bl	800d6e4 <_sbrk_r>
 800c892:	4581      	cmp	r9, r0
 800c894:	d13f      	bne.n	800c916 <_malloc_r+0xe6>
 800c896:	6821      	ldr	r1, [r4, #0]
 800c898:	1a6d      	subs	r5, r5, r1
 800c89a:	4629      	mov	r1, r5
 800c89c:	4638      	mov	r0, r7
 800c89e:	f7ff ffa7 	bl	800c7f0 <sbrk_aligned>
 800c8a2:	3001      	adds	r0, #1
 800c8a4:	d037      	beq.n	800c916 <_malloc_r+0xe6>
 800c8a6:	6823      	ldr	r3, [r4, #0]
 800c8a8:	442b      	add	r3, r5
 800c8aa:	6023      	str	r3, [r4, #0]
 800c8ac:	f8d8 3000 	ldr.w	r3, [r8]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d038      	beq.n	800c926 <_malloc_r+0xf6>
 800c8b4:	685a      	ldr	r2, [r3, #4]
 800c8b6:	42a2      	cmp	r2, r4
 800c8b8:	d12b      	bne.n	800c912 <_malloc_r+0xe2>
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	605a      	str	r2, [r3, #4]
 800c8be:	e00f      	b.n	800c8e0 <_malloc_r+0xb0>
 800c8c0:	6822      	ldr	r2, [r4, #0]
 800c8c2:	1b52      	subs	r2, r2, r5
 800c8c4:	d41f      	bmi.n	800c906 <_malloc_r+0xd6>
 800c8c6:	2a0b      	cmp	r2, #11
 800c8c8:	d917      	bls.n	800c8fa <_malloc_r+0xca>
 800c8ca:	1961      	adds	r1, r4, r5
 800c8cc:	42a3      	cmp	r3, r4
 800c8ce:	6025      	str	r5, [r4, #0]
 800c8d0:	bf18      	it	ne
 800c8d2:	6059      	strne	r1, [r3, #4]
 800c8d4:	6863      	ldr	r3, [r4, #4]
 800c8d6:	bf08      	it	eq
 800c8d8:	f8c8 1000 	streq.w	r1, [r8]
 800c8dc:	5162      	str	r2, [r4, r5]
 800c8de:	604b      	str	r3, [r1, #4]
 800c8e0:	4638      	mov	r0, r7
 800c8e2:	f104 060b 	add.w	r6, r4, #11
 800c8e6:	f000 f829 	bl	800c93c <__malloc_unlock>
 800c8ea:	f026 0607 	bic.w	r6, r6, #7
 800c8ee:	1d23      	adds	r3, r4, #4
 800c8f0:	1af2      	subs	r2, r6, r3
 800c8f2:	d0ae      	beq.n	800c852 <_malloc_r+0x22>
 800c8f4:	1b9b      	subs	r3, r3, r6
 800c8f6:	50a3      	str	r3, [r4, r2]
 800c8f8:	e7ab      	b.n	800c852 <_malloc_r+0x22>
 800c8fa:	42a3      	cmp	r3, r4
 800c8fc:	6862      	ldr	r2, [r4, #4]
 800c8fe:	d1dd      	bne.n	800c8bc <_malloc_r+0x8c>
 800c900:	f8c8 2000 	str.w	r2, [r8]
 800c904:	e7ec      	b.n	800c8e0 <_malloc_r+0xb0>
 800c906:	4623      	mov	r3, r4
 800c908:	6864      	ldr	r4, [r4, #4]
 800c90a:	e7ac      	b.n	800c866 <_malloc_r+0x36>
 800c90c:	4634      	mov	r4, r6
 800c90e:	6876      	ldr	r6, [r6, #4]
 800c910:	e7b4      	b.n	800c87c <_malloc_r+0x4c>
 800c912:	4613      	mov	r3, r2
 800c914:	e7cc      	b.n	800c8b0 <_malloc_r+0x80>
 800c916:	230c      	movs	r3, #12
 800c918:	603b      	str	r3, [r7, #0]
 800c91a:	4638      	mov	r0, r7
 800c91c:	f000 f80e 	bl	800c93c <__malloc_unlock>
 800c920:	e797      	b.n	800c852 <_malloc_r+0x22>
 800c922:	6025      	str	r5, [r4, #0]
 800c924:	e7dc      	b.n	800c8e0 <_malloc_r+0xb0>
 800c926:	605b      	str	r3, [r3, #4]
 800c928:	deff      	udf	#255	; 0xff
 800c92a:	bf00      	nop
 800c92c:	20001a68 	.word	0x20001a68

0800c930 <__malloc_lock>:
 800c930:	4801      	ldr	r0, [pc, #4]	; (800c938 <__malloc_lock+0x8>)
 800c932:	f000 bf24 	b.w	800d77e <__retarget_lock_acquire_recursive>
 800c936:	bf00      	nop
 800c938:	20001bb0 	.word	0x20001bb0

0800c93c <__malloc_unlock>:
 800c93c:	4801      	ldr	r0, [pc, #4]	; (800c944 <__malloc_unlock+0x8>)
 800c93e:	f000 bf1f 	b.w	800d780 <__retarget_lock_release_recursive>
 800c942:	bf00      	nop
 800c944:	20001bb0 	.word	0x20001bb0

0800c948 <__cvt>:
 800c948:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c94c:	ec55 4b10 	vmov	r4, r5, d0
 800c950:	2d00      	cmp	r5, #0
 800c952:	460e      	mov	r6, r1
 800c954:	4619      	mov	r1, r3
 800c956:	462b      	mov	r3, r5
 800c958:	bfbb      	ittet	lt
 800c95a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c95e:	461d      	movlt	r5, r3
 800c960:	2300      	movge	r3, #0
 800c962:	232d      	movlt	r3, #45	; 0x2d
 800c964:	700b      	strb	r3, [r1, #0]
 800c966:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c968:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c96c:	4691      	mov	r9, r2
 800c96e:	f023 0820 	bic.w	r8, r3, #32
 800c972:	bfbc      	itt	lt
 800c974:	4622      	movlt	r2, r4
 800c976:	4614      	movlt	r4, r2
 800c978:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c97c:	d005      	beq.n	800c98a <__cvt+0x42>
 800c97e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c982:	d100      	bne.n	800c986 <__cvt+0x3e>
 800c984:	3601      	adds	r6, #1
 800c986:	2102      	movs	r1, #2
 800c988:	e000      	b.n	800c98c <__cvt+0x44>
 800c98a:	2103      	movs	r1, #3
 800c98c:	ab03      	add	r3, sp, #12
 800c98e:	9301      	str	r3, [sp, #4]
 800c990:	ab02      	add	r3, sp, #8
 800c992:	9300      	str	r3, [sp, #0]
 800c994:	ec45 4b10 	vmov	d0, r4, r5
 800c998:	4653      	mov	r3, sl
 800c99a:	4632      	mov	r2, r6
 800c99c:	f000 ff7c 	bl	800d898 <_dtoa_r>
 800c9a0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c9a4:	4607      	mov	r7, r0
 800c9a6:	d102      	bne.n	800c9ae <__cvt+0x66>
 800c9a8:	f019 0f01 	tst.w	r9, #1
 800c9ac:	d022      	beq.n	800c9f4 <__cvt+0xac>
 800c9ae:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c9b2:	eb07 0906 	add.w	r9, r7, r6
 800c9b6:	d110      	bne.n	800c9da <__cvt+0x92>
 800c9b8:	783b      	ldrb	r3, [r7, #0]
 800c9ba:	2b30      	cmp	r3, #48	; 0x30
 800c9bc:	d10a      	bne.n	800c9d4 <__cvt+0x8c>
 800c9be:	2200      	movs	r2, #0
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	4620      	mov	r0, r4
 800c9c4:	4629      	mov	r1, r5
 800c9c6:	f7f4 f8a7 	bl	8000b18 <__aeabi_dcmpeq>
 800c9ca:	b918      	cbnz	r0, 800c9d4 <__cvt+0x8c>
 800c9cc:	f1c6 0601 	rsb	r6, r6, #1
 800c9d0:	f8ca 6000 	str.w	r6, [sl]
 800c9d4:	f8da 3000 	ldr.w	r3, [sl]
 800c9d8:	4499      	add	r9, r3
 800c9da:	2200      	movs	r2, #0
 800c9dc:	2300      	movs	r3, #0
 800c9de:	4620      	mov	r0, r4
 800c9e0:	4629      	mov	r1, r5
 800c9e2:	f7f4 f899 	bl	8000b18 <__aeabi_dcmpeq>
 800c9e6:	b108      	cbz	r0, 800c9ec <__cvt+0xa4>
 800c9e8:	f8cd 900c 	str.w	r9, [sp, #12]
 800c9ec:	2230      	movs	r2, #48	; 0x30
 800c9ee:	9b03      	ldr	r3, [sp, #12]
 800c9f0:	454b      	cmp	r3, r9
 800c9f2:	d307      	bcc.n	800ca04 <__cvt+0xbc>
 800c9f4:	9b03      	ldr	r3, [sp, #12]
 800c9f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c9f8:	1bdb      	subs	r3, r3, r7
 800c9fa:	4638      	mov	r0, r7
 800c9fc:	6013      	str	r3, [r2, #0]
 800c9fe:	b004      	add	sp, #16
 800ca00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca04:	1c59      	adds	r1, r3, #1
 800ca06:	9103      	str	r1, [sp, #12]
 800ca08:	701a      	strb	r2, [r3, #0]
 800ca0a:	e7f0      	b.n	800c9ee <__cvt+0xa6>

0800ca0c <__exponent>:
 800ca0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ca0e:	4603      	mov	r3, r0
 800ca10:	2900      	cmp	r1, #0
 800ca12:	bfb8      	it	lt
 800ca14:	4249      	neglt	r1, r1
 800ca16:	f803 2b02 	strb.w	r2, [r3], #2
 800ca1a:	bfb4      	ite	lt
 800ca1c:	222d      	movlt	r2, #45	; 0x2d
 800ca1e:	222b      	movge	r2, #43	; 0x2b
 800ca20:	2909      	cmp	r1, #9
 800ca22:	7042      	strb	r2, [r0, #1]
 800ca24:	dd2a      	ble.n	800ca7c <__exponent+0x70>
 800ca26:	f10d 0207 	add.w	r2, sp, #7
 800ca2a:	4617      	mov	r7, r2
 800ca2c:	260a      	movs	r6, #10
 800ca2e:	4694      	mov	ip, r2
 800ca30:	fb91 f5f6 	sdiv	r5, r1, r6
 800ca34:	fb06 1415 	mls	r4, r6, r5, r1
 800ca38:	3430      	adds	r4, #48	; 0x30
 800ca3a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800ca3e:	460c      	mov	r4, r1
 800ca40:	2c63      	cmp	r4, #99	; 0x63
 800ca42:	f102 32ff 	add.w	r2, r2, #4294967295
 800ca46:	4629      	mov	r1, r5
 800ca48:	dcf1      	bgt.n	800ca2e <__exponent+0x22>
 800ca4a:	3130      	adds	r1, #48	; 0x30
 800ca4c:	f1ac 0402 	sub.w	r4, ip, #2
 800ca50:	f802 1c01 	strb.w	r1, [r2, #-1]
 800ca54:	1c41      	adds	r1, r0, #1
 800ca56:	4622      	mov	r2, r4
 800ca58:	42ba      	cmp	r2, r7
 800ca5a:	d30a      	bcc.n	800ca72 <__exponent+0x66>
 800ca5c:	f10d 0209 	add.w	r2, sp, #9
 800ca60:	eba2 020c 	sub.w	r2, r2, ip
 800ca64:	42bc      	cmp	r4, r7
 800ca66:	bf88      	it	hi
 800ca68:	2200      	movhi	r2, #0
 800ca6a:	4413      	add	r3, r2
 800ca6c:	1a18      	subs	r0, r3, r0
 800ca6e:	b003      	add	sp, #12
 800ca70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca72:	f812 5b01 	ldrb.w	r5, [r2], #1
 800ca76:	f801 5f01 	strb.w	r5, [r1, #1]!
 800ca7a:	e7ed      	b.n	800ca58 <__exponent+0x4c>
 800ca7c:	2330      	movs	r3, #48	; 0x30
 800ca7e:	3130      	adds	r1, #48	; 0x30
 800ca80:	7083      	strb	r3, [r0, #2]
 800ca82:	70c1      	strb	r1, [r0, #3]
 800ca84:	1d03      	adds	r3, r0, #4
 800ca86:	e7f1      	b.n	800ca6c <__exponent+0x60>

0800ca88 <_printf_float>:
 800ca88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca8c:	ed2d 8b02 	vpush	{d8}
 800ca90:	b08d      	sub	sp, #52	; 0x34
 800ca92:	460c      	mov	r4, r1
 800ca94:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ca98:	4616      	mov	r6, r2
 800ca9a:	461f      	mov	r7, r3
 800ca9c:	4605      	mov	r5, r0
 800ca9e:	f000 fde9 	bl	800d674 <_localeconv_r>
 800caa2:	f8d0 a000 	ldr.w	sl, [r0]
 800caa6:	4650      	mov	r0, sl
 800caa8:	f7f3 fc0a 	bl	80002c0 <strlen>
 800caac:	2300      	movs	r3, #0
 800caae:	930a      	str	r3, [sp, #40]	; 0x28
 800cab0:	6823      	ldr	r3, [r4, #0]
 800cab2:	9305      	str	r3, [sp, #20]
 800cab4:	f8d8 3000 	ldr.w	r3, [r8]
 800cab8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800cabc:	3307      	adds	r3, #7
 800cabe:	f023 0307 	bic.w	r3, r3, #7
 800cac2:	f103 0208 	add.w	r2, r3, #8
 800cac6:	f8c8 2000 	str.w	r2, [r8]
 800caca:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cace:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800cad2:	9307      	str	r3, [sp, #28]
 800cad4:	f8cd 8018 	str.w	r8, [sp, #24]
 800cad8:	ee08 0a10 	vmov	s16, r0
 800cadc:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800cae0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cae4:	4b9e      	ldr	r3, [pc, #632]	; (800cd60 <_printf_float+0x2d8>)
 800cae6:	f04f 32ff 	mov.w	r2, #4294967295
 800caea:	f7f4 f847 	bl	8000b7c <__aeabi_dcmpun>
 800caee:	bb88      	cbnz	r0, 800cb54 <_printf_float+0xcc>
 800caf0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800caf4:	4b9a      	ldr	r3, [pc, #616]	; (800cd60 <_printf_float+0x2d8>)
 800caf6:	f04f 32ff 	mov.w	r2, #4294967295
 800cafa:	f7f4 f821 	bl	8000b40 <__aeabi_dcmple>
 800cafe:	bb48      	cbnz	r0, 800cb54 <_printf_float+0xcc>
 800cb00:	2200      	movs	r2, #0
 800cb02:	2300      	movs	r3, #0
 800cb04:	4640      	mov	r0, r8
 800cb06:	4649      	mov	r1, r9
 800cb08:	f7f4 f810 	bl	8000b2c <__aeabi_dcmplt>
 800cb0c:	b110      	cbz	r0, 800cb14 <_printf_float+0x8c>
 800cb0e:	232d      	movs	r3, #45	; 0x2d
 800cb10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb14:	4a93      	ldr	r2, [pc, #588]	; (800cd64 <_printf_float+0x2dc>)
 800cb16:	4b94      	ldr	r3, [pc, #592]	; (800cd68 <_printf_float+0x2e0>)
 800cb18:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800cb1c:	bf94      	ite	ls
 800cb1e:	4690      	movls	r8, r2
 800cb20:	4698      	movhi	r8, r3
 800cb22:	2303      	movs	r3, #3
 800cb24:	6123      	str	r3, [r4, #16]
 800cb26:	9b05      	ldr	r3, [sp, #20]
 800cb28:	f023 0304 	bic.w	r3, r3, #4
 800cb2c:	6023      	str	r3, [r4, #0]
 800cb2e:	f04f 0900 	mov.w	r9, #0
 800cb32:	9700      	str	r7, [sp, #0]
 800cb34:	4633      	mov	r3, r6
 800cb36:	aa0b      	add	r2, sp, #44	; 0x2c
 800cb38:	4621      	mov	r1, r4
 800cb3a:	4628      	mov	r0, r5
 800cb3c:	f000 f9da 	bl	800cef4 <_printf_common>
 800cb40:	3001      	adds	r0, #1
 800cb42:	f040 8090 	bne.w	800cc66 <_printf_float+0x1de>
 800cb46:	f04f 30ff 	mov.w	r0, #4294967295
 800cb4a:	b00d      	add	sp, #52	; 0x34
 800cb4c:	ecbd 8b02 	vpop	{d8}
 800cb50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb54:	4642      	mov	r2, r8
 800cb56:	464b      	mov	r3, r9
 800cb58:	4640      	mov	r0, r8
 800cb5a:	4649      	mov	r1, r9
 800cb5c:	f7f4 f80e 	bl	8000b7c <__aeabi_dcmpun>
 800cb60:	b140      	cbz	r0, 800cb74 <_printf_float+0xec>
 800cb62:	464b      	mov	r3, r9
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	bfbc      	itt	lt
 800cb68:	232d      	movlt	r3, #45	; 0x2d
 800cb6a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800cb6e:	4a7f      	ldr	r2, [pc, #508]	; (800cd6c <_printf_float+0x2e4>)
 800cb70:	4b7f      	ldr	r3, [pc, #508]	; (800cd70 <_printf_float+0x2e8>)
 800cb72:	e7d1      	b.n	800cb18 <_printf_float+0x90>
 800cb74:	6863      	ldr	r3, [r4, #4]
 800cb76:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800cb7a:	9206      	str	r2, [sp, #24]
 800cb7c:	1c5a      	adds	r2, r3, #1
 800cb7e:	d13f      	bne.n	800cc00 <_printf_float+0x178>
 800cb80:	2306      	movs	r3, #6
 800cb82:	6063      	str	r3, [r4, #4]
 800cb84:	9b05      	ldr	r3, [sp, #20]
 800cb86:	6861      	ldr	r1, [r4, #4]
 800cb88:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800cb8c:	2300      	movs	r3, #0
 800cb8e:	9303      	str	r3, [sp, #12]
 800cb90:	ab0a      	add	r3, sp, #40	; 0x28
 800cb92:	e9cd b301 	strd	fp, r3, [sp, #4]
 800cb96:	ab09      	add	r3, sp, #36	; 0x24
 800cb98:	ec49 8b10 	vmov	d0, r8, r9
 800cb9c:	9300      	str	r3, [sp, #0]
 800cb9e:	6022      	str	r2, [r4, #0]
 800cba0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800cba4:	4628      	mov	r0, r5
 800cba6:	f7ff fecf 	bl	800c948 <__cvt>
 800cbaa:	9b06      	ldr	r3, [sp, #24]
 800cbac:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cbae:	2b47      	cmp	r3, #71	; 0x47
 800cbb0:	4680      	mov	r8, r0
 800cbb2:	d108      	bne.n	800cbc6 <_printf_float+0x13e>
 800cbb4:	1cc8      	adds	r0, r1, #3
 800cbb6:	db02      	blt.n	800cbbe <_printf_float+0x136>
 800cbb8:	6863      	ldr	r3, [r4, #4]
 800cbba:	4299      	cmp	r1, r3
 800cbbc:	dd41      	ble.n	800cc42 <_printf_float+0x1ba>
 800cbbe:	f1ab 0302 	sub.w	r3, fp, #2
 800cbc2:	fa5f fb83 	uxtb.w	fp, r3
 800cbc6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cbca:	d820      	bhi.n	800cc0e <_printf_float+0x186>
 800cbcc:	3901      	subs	r1, #1
 800cbce:	465a      	mov	r2, fp
 800cbd0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800cbd4:	9109      	str	r1, [sp, #36]	; 0x24
 800cbd6:	f7ff ff19 	bl	800ca0c <__exponent>
 800cbda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cbdc:	1813      	adds	r3, r2, r0
 800cbde:	2a01      	cmp	r2, #1
 800cbe0:	4681      	mov	r9, r0
 800cbe2:	6123      	str	r3, [r4, #16]
 800cbe4:	dc02      	bgt.n	800cbec <_printf_float+0x164>
 800cbe6:	6822      	ldr	r2, [r4, #0]
 800cbe8:	07d2      	lsls	r2, r2, #31
 800cbea:	d501      	bpl.n	800cbf0 <_printf_float+0x168>
 800cbec:	3301      	adds	r3, #1
 800cbee:	6123      	str	r3, [r4, #16]
 800cbf0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d09c      	beq.n	800cb32 <_printf_float+0xaa>
 800cbf8:	232d      	movs	r3, #45	; 0x2d
 800cbfa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cbfe:	e798      	b.n	800cb32 <_printf_float+0xaa>
 800cc00:	9a06      	ldr	r2, [sp, #24]
 800cc02:	2a47      	cmp	r2, #71	; 0x47
 800cc04:	d1be      	bne.n	800cb84 <_printf_float+0xfc>
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d1bc      	bne.n	800cb84 <_printf_float+0xfc>
 800cc0a:	2301      	movs	r3, #1
 800cc0c:	e7b9      	b.n	800cb82 <_printf_float+0xfa>
 800cc0e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800cc12:	d118      	bne.n	800cc46 <_printf_float+0x1be>
 800cc14:	2900      	cmp	r1, #0
 800cc16:	6863      	ldr	r3, [r4, #4]
 800cc18:	dd0b      	ble.n	800cc32 <_printf_float+0x1aa>
 800cc1a:	6121      	str	r1, [r4, #16]
 800cc1c:	b913      	cbnz	r3, 800cc24 <_printf_float+0x19c>
 800cc1e:	6822      	ldr	r2, [r4, #0]
 800cc20:	07d0      	lsls	r0, r2, #31
 800cc22:	d502      	bpl.n	800cc2a <_printf_float+0x1a2>
 800cc24:	3301      	adds	r3, #1
 800cc26:	440b      	add	r3, r1
 800cc28:	6123      	str	r3, [r4, #16]
 800cc2a:	65a1      	str	r1, [r4, #88]	; 0x58
 800cc2c:	f04f 0900 	mov.w	r9, #0
 800cc30:	e7de      	b.n	800cbf0 <_printf_float+0x168>
 800cc32:	b913      	cbnz	r3, 800cc3a <_printf_float+0x1b2>
 800cc34:	6822      	ldr	r2, [r4, #0]
 800cc36:	07d2      	lsls	r2, r2, #31
 800cc38:	d501      	bpl.n	800cc3e <_printf_float+0x1b6>
 800cc3a:	3302      	adds	r3, #2
 800cc3c:	e7f4      	b.n	800cc28 <_printf_float+0x1a0>
 800cc3e:	2301      	movs	r3, #1
 800cc40:	e7f2      	b.n	800cc28 <_printf_float+0x1a0>
 800cc42:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800cc46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc48:	4299      	cmp	r1, r3
 800cc4a:	db05      	blt.n	800cc58 <_printf_float+0x1d0>
 800cc4c:	6823      	ldr	r3, [r4, #0]
 800cc4e:	6121      	str	r1, [r4, #16]
 800cc50:	07d8      	lsls	r0, r3, #31
 800cc52:	d5ea      	bpl.n	800cc2a <_printf_float+0x1a2>
 800cc54:	1c4b      	adds	r3, r1, #1
 800cc56:	e7e7      	b.n	800cc28 <_printf_float+0x1a0>
 800cc58:	2900      	cmp	r1, #0
 800cc5a:	bfd4      	ite	le
 800cc5c:	f1c1 0202 	rsble	r2, r1, #2
 800cc60:	2201      	movgt	r2, #1
 800cc62:	4413      	add	r3, r2
 800cc64:	e7e0      	b.n	800cc28 <_printf_float+0x1a0>
 800cc66:	6823      	ldr	r3, [r4, #0]
 800cc68:	055a      	lsls	r2, r3, #21
 800cc6a:	d407      	bmi.n	800cc7c <_printf_float+0x1f4>
 800cc6c:	6923      	ldr	r3, [r4, #16]
 800cc6e:	4642      	mov	r2, r8
 800cc70:	4631      	mov	r1, r6
 800cc72:	4628      	mov	r0, r5
 800cc74:	47b8      	blx	r7
 800cc76:	3001      	adds	r0, #1
 800cc78:	d12c      	bne.n	800ccd4 <_printf_float+0x24c>
 800cc7a:	e764      	b.n	800cb46 <_printf_float+0xbe>
 800cc7c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cc80:	f240 80e0 	bls.w	800ce44 <_printf_float+0x3bc>
 800cc84:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cc88:	2200      	movs	r2, #0
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	f7f3 ff44 	bl	8000b18 <__aeabi_dcmpeq>
 800cc90:	2800      	cmp	r0, #0
 800cc92:	d034      	beq.n	800ccfe <_printf_float+0x276>
 800cc94:	4a37      	ldr	r2, [pc, #220]	; (800cd74 <_printf_float+0x2ec>)
 800cc96:	2301      	movs	r3, #1
 800cc98:	4631      	mov	r1, r6
 800cc9a:	4628      	mov	r0, r5
 800cc9c:	47b8      	blx	r7
 800cc9e:	3001      	adds	r0, #1
 800cca0:	f43f af51 	beq.w	800cb46 <_printf_float+0xbe>
 800cca4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cca8:	429a      	cmp	r2, r3
 800ccaa:	db02      	blt.n	800ccb2 <_printf_float+0x22a>
 800ccac:	6823      	ldr	r3, [r4, #0]
 800ccae:	07d8      	lsls	r0, r3, #31
 800ccb0:	d510      	bpl.n	800ccd4 <_printf_float+0x24c>
 800ccb2:	ee18 3a10 	vmov	r3, s16
 800ccb6:	4652      	mov	r2, sl
 800ccb8:	4631      	mov	r1, r6
 800ccba:	4628      	mov	r0, r5
 800ccbc:	47b8      	blx	r7
 800ccbe:	3001      	adds	r0, #1
 800ccc0:	f43f af41 	beq.w	800cb46 <_printf_float+0xbe>
 800ccc4:	f04f 0800 	mov.w	r8, #0
 800ccc8:	f104 091a 	add.w	r9, r4, #26
 800cccc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ccce:	3b01      	subs	r3, #1
 800ccd0:	4543      	cmp	r3, r8
 800ccd2:	dc09      	bgt.n	800cce8 <_printf_float+0x260>
 800ccd4:	6823      	ldr	r3, [r4, #0]
 800ccd6:	079b      	lsls	r3, r3, #30
 800ccd8:	f100 8107 	bmi.w	800ceea <_printf_float+0x462>
 800ccdc:	68e0      	ldr	r0, [r4, #12]
 800ccde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cce0:	4298      	cmp	r0, r3
 800cce2:	bfb8      	it	lt
 800cce4:	4618      	movlt	r0, r3
 800cce6:	e730      	b.n	800cb4a <_printf_float+0xc2>
 800cce8:	2301      	movs	r3, #1
 800ccea:	464a      	mov	r2, r9
 800ccec:	4631      	mov	r1, r6
 800ccee:	4628      	mov	r0, r5
 800ccf0:	47b8      	blx	r7
 800ccf2:	3001      	adds	r0, #1
 800ccf4:	f43f af27 	beq.w	800cb46 <_printf_float+0xbe>
 800ccf8:	f108 0801 	add.w	r8, r8, #1
 800ccfc:	e7e6      	b.n	800cccc <_printf_float+0x244>
 800ccfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	dc39      	bgt.n	800cd78 <_printf_float+0x2f0>
 800cd04:	4a1b      	ldr	r2, [pc, #108]	; (800cd74 <_printf_float+0x2ec>)
 800cd06:	2301      	movs	r3, #1
 800cd08:	4631      	mov	r1, r6
 800cd0a:	4628      	mov	r0, r5
 800cd0c:	47b8      	blx	r7
 800cd0e:	3001      	adds	r0, #1
 800cd10:	f43f af19 	beq.w	800cb46 <_printf_float+0xbe>
 800cd14:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800cd18:	4313      	orrs	r3, r2
 800cd1a:	d102      	bne.n	800cd22 <_printf_float+0x29a>
 800cd1c:	6823      	ldr	r3, [r4, #0]
 800cd1e:	07d9      	lsls	r1, r3, #31
 800cd20:	d5d8      	bpl.n	800ccd4 <_printf_float+0x24c>
 800cd22:	ee18 3a10 	vmov	r3, s16
 800cd26:	4652      	mov	r2, sl
 800cd28:	4631      	mov	r1, r6
 800cd2a:	4628      	mov	r0, r5
 800cd2c:	47b8      	blx	r7
 800cd2e:	3001      	adds	r0, #1
 800cd30:	f43f af09 	beq.w	800cb46 <_printf_float+0xbe>
 800cd34:	f04f 0900 	mov.w	r9, #0
 800cd38:	f104 0a1a 	add.w	sl, r4, #26
 800cd3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd3e:	425b      	negs	r3, r3
 800cd40:	454b      	cmp	r3, r9
 800cd42:	dc01      	bgt.n	800cd48 <_printf_float+0x2c0>
 800cd44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd46:	e792      	b.n	800cc6e <_printf_float+0x1e6>
 800cd48:	2301      	movs	r3, #1
 800cd4a:	4652      	mov	r2, sl
 800cd4c:	4631      	mov	r1, r6
 800cd4e:	4628      	mov	r0, r5
 800cd50:	47b8      	blx	r7
 800cd52:	3001      	adds	r0, #1
 800cd54:	f43f aef7 	beq.w	800cb46 <_printf_float+0xbe>
 800cd58:	f109 0901 	add.w	r9, r9, #1
 800cd5c:	e7ee      	b.n	800cd3c <_printf_float+0x2b4>
 800cd5e:	bf00      	nop
 800cd60:	7fefffff 	.word	0x7fefffff
 800cd64:	080136d4 	.word	0x080136d4
 800cd68:	080136d8 	.word	0x080136d8
 800cd6c:	080136dc 	.word	0x080136dc
 800cd70:	080136e0 	.word	0x080136e0
 800cd74:	080136e4 	.word	0x080136e4
 800cd78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cd7a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cd7c:	429a      	cmp	r2, r3
 800cd7e:	bfa8      	it	ge
 800cd80:	461a      	movge	r2, r3
 800cd82:	2a00      	cmp	r2, #0
 800cd84:	4691      	mov	r9, r2
 800cd86:	dc37      	bgt.n	800cdf8 <_printf_float+0x370>
 800cd88:	f04f 0b00 	mov.w	fp, #0
 800cd8c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cd90:	f104 021a 	add.w	r2, r4, #26
 800cd94:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cd96:	9305      	str	r3, [sp, #20]
 800cd98:	eba3 0309 	sub.w	r3, r3, r9
 800cd9c:	455b      	cmp	r3, fp
 800cd9e:	dc33      	bgt.n	800ce08 <_printf_float+0x380>
 800cda0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cda4:	429a      	cmp	r2, r3
 800cda6:	db3b      	blt.n	800ce20 <_printf_float+0x398>
 800cda8:	6823      	ldr	r3, [r4, #0]
 800cdaa:	07da      	lsls	r2, r3, #31
 800cdac:	d438      	bmi.n	800ce20 <_printf_float+0x398>
 800cdae:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800cdb2:	eba2 0903 	sub.w	r9, r2, r3
 800cdb6:	9b05      	ldr	r3, [sp, #20]
 800cdb8:	1ad2      	subs	r2, r2, r3
 800cdba:	4591      	cmp	r9, r2
 800cdbc:	bfa8      	it	ge
 800cdbe:	4691      	movge	r9, r2
 800cdc0:	f1b9 0f00 	cmp.w	r9, #0
 800cdc4:	dc35      	bgt.n	800ce32 <_printf_float+0x3aa>
 800cdc6:	f04f 0800 	mov.w	r8, #0
 800cdca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cdce:	f104 0a1a 	add.w	sl, r4, #26
 800cdd2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cdd6:	1a9b      	subs	r3, r3, r2
 800cdd8:	eba3 0309 	sub.w	r3, r3, r9
 800cddc:	4543      	cmp	r3, r8
 800cdde:	f77f af79 	ble.w	800ccd4 <_printf_float+0x24c>
 800cde2:	2301      	movs	r3, #1
 800cde4:	4652      	mov	r2, sl
 800cde6:	4631      	mov	r1, r6
 800cde8:	4628      	mov	r0, r5
 800cdea:	47b8      	blx	r7
 800cdec:	3001      	adds	r0, #1
 800cdee:	f43f aeaa 	beq.w	800cb46 <_printf_float+0xbe>
 800cdf2:	f108 0801 	add.w	r8, r8, #1
 800cdf6:	e7ec      	b.n	800cdd2 <_printf_float+0x34a>
 800cdf8:	4613      	mov	r3, r2
 800cdfa:	4631      	mov	r1, r6
 800cdfc:	4642      	mov	r2, r8
 800cdfe:	4628      	mov	r0, r5
 800ce00:	47b8      	blx	r7
 800ce02:	3001      	adds	r0, #1
 800ce04:	d1c0      	bne.n	800cd88 <_printf_float+0x300>
 800ce06:	e69e      	b.n	800cb46 <_printf_float+0xbe>
 800ce08:	2301      	movs	r3, #1
 800ce0a:	4631      	mov	r1, r6
 800ce0c:	4628      	mov	r0, r5
 800ce0e:	9205      	str	r2, [sp, #20]
 800ce10:	47b8      	blx	r7
 800ce12:	3001      	adds	r0, #1
 800ce14:	f43f ae97 	beq.w	800cb46 <_printf_float+0xbe>
 800ce18:	9a05      	ldr	r2, [sp, #20]
 800ce1a:	f10b 0b01 	add.w	fp, fp, #1
 800ce1e:	e7b9      	b.n	800cd94 <_printf_float+0x30c>
 800ce20:	ee18 3a10 	vmov	r3, s16
 800ce24:	4652      	mov	r2, sl
 800ce26:	4631      	mov	r1, r6
 800ce28:	4628      	mov	r0, r5
 800ce2a:	47b8      	blx	r7
 800ce2c:	3001      	adds	r0, #1
 800ce2e:	d1be      	bne.n	800cdae <_printf_float+0x326>
 800ce30:	e689      	b.n	800cb46 <_printf_float+0xbe>
 800ce32:	9a05      	ldr	r2, [sp, #20]
 800ce34:	464b      	mov	r3, r9
 800ce36:	4442      	add	r2, r8
 800ce38:	4631      	mov	r1, r6
 800ce3a:	4628      	mov	r0, r5
 800ce3c:	47b8      	blx	r7
 800ce3e:	3001      	adds	r0, #1
 800ce40:	d1c1      	bne.n	800cdc6 <_printf_float+0x33e>
 800ce42:	e680      	b.n	800cb46 <_printf_float+0xbe>
 800ce44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ce46:	2a01      	cmp	r2, #1
 800ce48:	dc01      	bgt.n	800ce4e <_printf_float+0x3c6>
 800ce4a:	07db      	lsls	r3, r3, #31
 800ce4c:	d53a      	bpl.n	800cec4 <_printf_float+0x43c>
 800ce4e:	2301      	movs	r3, #1
 800ce50:	4642      	mov	r2, r8
 800ce52:	4631      	mov	r1, r6
 800ce54:	4628      	mov	r0, r5
 800ce56:	47b8      	blx	r7
 800ce58:	3001      	adds	r0, #1
 800ce5a:	f43f ae74 	beq.w	800cb46 <_printf_float+0xbe>
 800ce5e:	ee18 3a10 	vmov	r3, s16
 800ce62:	4652      	mov	r2, sl
 800ce64:	4631      	mov	r1, r6
 800ce66:	4628      	mov	r0, r5
 800ce68:	47b8      	blx	r7
 800ce6a:	3001      	adds	r0, #1
 800ce6c:	f43f ae6b 	beq.w	800cb46 <_printf_float+0xbe>
 800ce70:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ce74:	2200      	movs	r2, #0
 800ce76:	2300      	movs	r3, #0
 800ce78:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800ce7c:	f7f3 fe4c 	bl	8000b18 <__aeabi_dcmpeq>
 800ce80:	b9d8      	cbnz	r0, 800ceba <_printf_float+0x432>
 800ce82:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ce86:	f108 0201 	add.w	r2, r8, #1
 800ce8a:	4631      	mov	r1, r6
 800ce8c:	4628      	mov	r0, r5
 800ce8e:	47b8      	blx	r7
 800ce90:	3001      	adds	r0, #1
 800ce92:	d10e      	bne.n	800ceb2 <_printf_float+0x42a>
 800ce94:	e657      	b.n	800cb46 <_printf_float+0xbe>
 800ce96:	2301      	movs	r3, #1
 800ce98:	4652      	mov	r2, sl
 800ce9a:	4631      	mov	r1, r6
 800ce9c:	4628      	mov	r0, r5
 800ce9e:	47b8      	blx	r7
 800cea0:	3001      	adds	r0, #1
 800cea2:	f43f ae50 	beq.w	800cb46 <_printf_float+0xbe>
 800cea6:	f108 0801 	add.w	r8, r8, #1
 800ceaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ceac:	3b01      	subs	r3, #1
 800ceae:	4543      	cmp	r3, r8
 800ceb0:	dcf1      	bgt.n	800ce96 <_printf_float+0x40e>
 800ceb2:	464b      	mov	r3, r9
 800ceb4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ceb8:	e6da      	b.n	800cc70 <_printf_float+0x1e8>
 800ceba:	f04f 0800 	mov.w	r8, #0
 800cebe:	f104 0a1a 	add.w	sl, r4, #26
 800cec2:	e7f2      	b.n	800ceaa <_printf_float+0x422>
 800cec4:	2301      	movs	r3, #1
 800cec6:	4642      	mov	r2, r8
 800cec8:	e7df      	b.n	800ce8a <_printf_float+0x402>
 800ceca:	2301      	movs	r3, #1
 800cecc:	464a      	mov	r2, r9
 800cece:	4631      	mov	r1, r6
 800ced0:	4628      	mov	r0, r5
 800ced2:	47b8      	blx	r7
 800ced4:	3001      	adds	r0, #1
 800ced6:	f43f ae36 	beq.w	800cb46 <_printf_float+0xbe>
 800ceda:	f108 0801 	add.w	r8, r8, #1
 800cede:	68e3      	ldr	r3, [r4, #12]
 800cee0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cee2:	1a5b      	subs	r3, r3, r1
 800cee4:	4543      	cmp	r3, r8
 800cee6:	dcf0      	bgt.n	800ceca <_printf_float+0x442>
 800cee8:	e6f8      	b.n	800ccdc <_printf_float+0x254>
 800ceea:	f04f 0800 	mov.w	r8, #0
 800ceee:	f104 0919 	add.w	r9, r4, #25
 800cef2:	e7f4      	b.n	800cede <_printf_float+0x456>

0800cef4 <_printf_common>:
 800cef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cef8:	4616      	mov	r6, r2
 800cefa:	4699      	mov	r9, r3
 800cefc:	688a      	ldr	r2, [r1, #8]
 800cefe:	690b      	ldr	r3, [r1, #16]
 800cf00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cf04:	4293      	cmp	r3, r2
 800cf06:	bfb8      	it	lt
 800cf08:	4613      	movlt	r3, r2
 800cf0a:	6033      	str	r3, [r6, #0]
 800cf0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cf10:	4607      	mov	r7, r0
 800cf12:	460c      	mov	r4, r1
 800cf14:	b10a      	cbz	r2, 800cf1a <_printf_common+0x26>
 800cf16:	3301      	adds	r3, #1
 800cf18:	6033      	str	r3, [r6, #0]
 800cf1a:	6823      	ldr	r3, [r4, #0]
 800cf1c:	0699      	lsls	r1, r3, #26
 800cf1e:	bf42      	ittt	mi
 800cf20:	6833      	ldrmi	r3, [r6, #0]
 800cf22:	3302      	addmi	r3, #2
 800cf24:	6033      	strmi	r3, [r6, #0]
 800cf26:	6825      	ldr	r5, [r4, #0]
 800cf28:	f015 0506 	ands.w	r5, r5, #6
 800cf2c:	d106      	bne.n	800cf3c <_printf_common+0x48>
 800cf2e:	f104 0a19 	add.w	sl, r4, #25
 800cf32:	68e3      	ldr	r3, [r4, #12]
 800cf34:	6832      	ldr	r2, [r6, #0]
 800cf36:	1a9b      	subs	r3, r3, r2
 800cf38:	42ab      	cmp	r3, r5
 800cf3a:	dc26      	bgt.n	800cf8a <_printf_common+0x96>
 800cf3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cf40:	1e13      	subs	r3, r2, #0
 800cf42:	6822      	ldr	r2, [r4, #0]
 800cf44:	bf18      	it	ne
 800cf46:	2301      	movne	r3, #1
 800cf48:	0692      	lsls	r2, r2, #26
 800cf4a:	d42b      	bmi.n	800cfa4 <_printf_common+0xb0>
 800cf4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cf50:	4649      	mov	r1, r9
 800cf52:	4638      	mov	r0, r7
 800cf54:	47c0      	blx	r8
 800cf56:	3001      	adds	r0, #1
 800cf58:	d01e      	beq.n	800cf98 <_printf_common+0xa4>
 800cf5a:	6823      	ldr	r3, [r4, #0]
 800cf5c:	6922      	ldr	r2, [r4, #16]
 800cf5e:	f003 0306 	and.w	r3, r3, #6
 800cf62:	2b04      	cmp	r3, #4
 800cf64:	bf02      	ittt	eq
 800cf66:	68e5      	ldreq	r5, [r4, #12]
 800cf68:	6833      	ldreq	r3, [r6, #0]
 800cf6a:	1aed      	subeq	r5, r5, r3
 800cf6c:	68a3      	ldr	r3, [r4, #8]
 800cf6e:	bf0c      	ite	eq
 800cf70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cf74:	2500      	movne	r5, #0
 800cf76:	4293      	cmp	r3, r2
 800cf78:	bfc4      	itt	gt
 800cf7a:	1a9b      	subgt	r3, r3, r2
 800cf7c:	18ed      	addgt	r5, r5, r3
 800cf7e:	2600      	movs	r6, #0
 800cf80:	341a      	adds	r4, #26
 800cf82:	42b5      	cmp	r5, r6
 800cf84:	d11a      	bne.n	800cfbc <_printf_common+0xc8>
 800cf86:	2000      	movs	r0, #0
 800cf88:	e008      	b.n	800cf9c <_printf_common+0xa8>
 800cf8a:	2301      	movs	r3, #1
 800cf8c:	4652      	mov	r2, sl
 800cf8e:	4649      	mov	r1, r9
 800cf90:	4638      	mov	r0, r7
 800cf92:	47c0      	blx	r8
 800cf94:	3001      	adds	r0, #1
 800cf96:	d103      	bne.n	800cfa0 <_printf_common+0xac>
 800cf98:	f04f 30ff 	mov.w	r0, #4294967295
 800cf9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfa0:	3501      	adds	r5, #1
 800cfa2:	e7c6      	b.n	800cf32 <_printf_common+0x3e>
 800cfa4:	18e1      	adds	r1, r4, r3
 800cfa6:	1c5a      	adds	r2, r3, #1
 800cfa8:	2030      	movs	r0, #48	; 0x30
 800cfaa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cfae:	4422      	add	r2, r4
 800cfb0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cfb4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cfb8:	3302      	adds	r3, #2
 800cfba:	e7c7      	b.n	800cf4c <_printf_common+0x58>
 800cfbc:	2301      	movs	r3, #1
 800cfbe:	4622      	mov	r2, r4
 800cfc0:	4649      	mov	r1, r9
 800cfc2:	4638      	mov	r0, r7
 800cfc4:	47c0      	blx	r8
 800cfc6:	3001      	adds	r0, #1
 800cfc8:	d0e6      	beq.n	800cf98 <_printf_common+0xa4>
 800cfca:	3601      	adds	r6, #1
 800cfcc:	e7d9      	b.n	800cf82 <_printf_common+0x8e>
	...

0800cfd0 <_printf_i>:
 800cfd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cfd4:	7e0f      	ldrb	r7, [r1, #24]
 800cfd6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cfd8:	2f78      	cmp	r7, #120	; 0x78
 800cfda:	4691      	mov	r9, r2
 800cfdc:	4680      	mov	r8, r0
 800cfde:	460c      	mov	r4, r1
 800cfe0:	469a      	mov	sl, r3
 800cfe2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cfe6:	d807      	bhi.n	800cff8 <_printf_i+0x28>
 800cfe8:	2f62      	cmp	r7, #98	; 0x62
 800cfea:	d80a      	bhi.n	800d002 <_printf_i+0x32>
 800cfec:	2f00      	cmp	r7, #0
 800cfee:	f000 80d4 	beq.w	800d19a <_printf_i+0x1ca>
 800cff2:	2f58      	cmp	r7, #88	; 0x58
 800cff4:	f000 80c0 	beq.w	800d178 <_printf_i+0x1a8>
 800cff8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cffc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d000:	e03a      	b.n	800d078 <_printf_i+0xa8>
 800d002:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d006:	2b15      	cmp	r3, #21
 800d008:	d8f6      	bhi.n	800cff8 <_printf_i+0x28>
 800d00a:	a101      	add	r1, pc, #4	; (adr r1, 800d010 <_printf_i+0x40>)
 800d00c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d010:	0800d069 	.word	0x0800d069
 800d014:	0800d07d 	.word	0x0800d07d
 800d018:	0800cff9 	.word	0x0800cff9
 800d01c:	0800cff9 	.word	0x0800cff9
 800d020:	0800cff9 	.word	0x0800cff9
 800d024:	0800cff9 	.word	0x0800cff9
 800d028:	0800d07d 	.word	0x0800d07d
 800d02c:	0800cff9 	.word	0x0800cff9
 800d030:	0800cff9 	.word	0x0800cff9
 800d034:	0800cff9 	.word	0x0800cff9
 800d038:	0800cff9 	.word	0x0800cff9
 800d03c:	0800d181 	.word	0x0800d181
 800d040:	0800d0a9 	.word	0x0800d0a9
 800d044:	0800d13b 	.word	0x0800d13b
 800d048:	0800cff9 	.word	0x0800cff9
 800d04c:	0800cff9 	.word	0x0800cff9
 800d050:	0800d1a3 	.word	0x0800d1a3
 800d054:	0800cff9 	.word	0x0800cff9
 800d058:	0800d0a9 	.word	0x0800d0a9
 800d05c:	0800cff9 	.word	0x0800cff9
 800d060:	0800cff9 	.word	0x0800cff9
 800d064:	0800d143 	.word	0x0800d143
 800d068:	682b      	ldr	r3, [r5, #0]
 800d06a:	1d1a      	adds	r2, r3, #4
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	602a      	str	r2, [r5, #0]
 800d070:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d074:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d078:	2301      	movs	r3, #1
 800d07a:	e09f      	b.n	800d1bc <_printf_i+0x1ec>
 800d07c:	6820      	ldr	r0, [r4, #0]
 800d07e:	682b      	ldr	r3, [r5, #0]
 800d080:	0607      	lsls	r7, r0, #24
 800d082:	f103 0104 	add.w	r1, r3, #4
 800d086:	6029      	str	r1, [r5, #0]
 800d088:	d501      	bpl.n	800d08e <_printf_i+0xbe>
 800d08a:	681e      	ldr	r6, [r3, #0]
 800d08c:	e003      	b.n	800d096 <_printf_i+0xc6>
 800d08e:	0646      	lsls	r6, r0, #25
 800d090:	d5fb      	bpl.n	800d08a <_printf_i+0xba>
 800d092:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d096:	2e00      	cmp	r6, #0
 800d098:	da03      	bge.n	800d0a2 <_printf_i+0xd2>
 800d09a:	232d      	movs	r3, #45	; 0x2d
 800d09c:	4276      	negs	r6, r6
 800d09e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d0a2:	485a      	ldr	r0, [pc, #360]	; (800d20c <_printf_i+0x23c>)
 800d0a4:	230a      	movs	r3, #10
 800d0a6:	e012      	b.n	800d0ce <_printf_i+0xfe>
 800d0a8:	682b      	ldr	r3, [r5, #0]
 800d0aa:	6820      	ldr	r0, [r4, #0]
 800d0ac:	1d19      	adds	r1, r3, #4
 800d0ae:	6029      	str	r1, [r5, #0]
 800d0b0:	0605      	lsls	r5, r0, #24
 800d0b2:	d501      	bpl.n	800d0b8 <_printf_i+0xe8>
 800d0b4:	681e      	ldr	r6, [r3, #0]
 800d0b6:	e002      	b.n	800d0be <_printf_i+0xee>
 800d0b8:	0641      	lsls	r1, r0, #25
 800d0ba:	d5fb      	bpl.n	800d0b4 <_printf_i+0xe4>
 800d0bc:	881e      	ldrh	r6, [r3, #0]
 800d0be:	4853      	ldr	r0, [pc, #332]	; (800d20c <_printf_i+0x23c>)
 800d0c0:	2f6f      	cmp	r7, #111	; 0x6f
 800d0c2:	bf0c      	ite	eq
 800d0c4:	2308      	moveq	r3, #8
 800d0c6:	230a      	movne	r3, #10
 800d0c8:	2100      	movs	r1, #0
 800d0ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d0ce:	6865      	ldr	r5, [r4, #4]
 800d0d0:	60a5      	str	r5, [r4, #8]
 800d0d2:	2d00      	cmp	r5, #0
 800d0d4:	bfa2      	ittt	ge
 800d0d6:	6821      	ldrge	r1, [r4, #0]
 800d0d8:	f021 0104 	bicge.w	r1, r1, #4
 800d0dc:	6021      	strge	r1, [r4, #0]
 800d0de:	b90e      	cbnz	r6, 800d0e4 <_printf_i+0x114>
 800d0e0:	2d00      	cmp	r5, #0
 800d0e2:	d04b      	beq.n	800d17c <_printf_i+0x1ac>
 800d0e4:	4615      	mov	r5, r2
 800d0e6:	fbb6 f1f3 	udiv	r1, r6, r3
 800d0ea:	fb03 6711 	mls	r7, r3, r1, r6
 800d0ee:	5dc7      	ldrb	r7, [r0, r7]
 800d0f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d0f4:	4637      	mov	r7, r6
 800d0f6:	42bb      	cmp	r3, r7
 800d0f8:	460e      	mov	r6, r1
 800d0fa:	d9f4      	bls.n	800d0e6 <_printf_i+0x116>
 800d0fc:	2b08      	cmp	r3, #8
 800d0fe:	d10b      	bne.n	800d118 <_printf_i+0x148>
 800d100:	6823      	ldr	r3, [r4, #0]
 800d102:	07de      	lsls	r6, r3, #31
 800d104:	d508      	bpl.n	800d118 <_printf_i+0x148>
 800d106:	6923      	ldr	r3, [r4, #16]
 800d108:	6861      	ldr	r1, [r4, #4]
 800d10a:	4299      	cmp	r1, r3
 800d10c:	bfde      	ittt	le
 800d10e:	2330      	movle	r3, #48	; 0x30
 800d110:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d114:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d118:	1b52      	subs	r2, r2, r5
 800d11a:	6122      	str	r2, [r4, #16]
 800d11c:	f8cd a000 	str.w	sl, [sp]
 800d120:	464b      	mov	r3, r9
 800d122:	aa03      	add	r2, sp, #12
 800d124:	4621      	mov	r1, r4
 800d126:	4640      	mov	r0, r8
 800d128:	f7ff fee4 	bl	800cef4 <_printf_common>
 800d12c:	3001      	adds	r0, #1
 800d12e:	d14a      	bne.n	800d1c6 <_printf_i+0x1f6>
 800d130:	f04f 30ff 	mov.w	r0, #4294967295
 800d134:	b004      	add	sp, #16
 800d136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d13a:	6823      	ldr	r3, [r4, #0]
 800d13c:	f043 0320 	orr.w	r3, r3, #32
 800d140:	6023      	str	r3, [r4, #0]
 800d142:	4833      	ldr	r0, [pc, #204]	; (800d210 <_printf_i+0x240>)
 800d144:	2778      	movs	r7, #120	; 0x78
 800d146:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d14a:	6823      	ldr	r3, [r4, #0]
 800d14c:	6829      	ldr	r1, [r5, #0]
 800d14e:	061f      	lsls	r7, r3, #24
 800d150:	f851 6b04 	ldr.w	r6, [r1], #4
 800d154:	d402      	bmi.n	800d15c <_printf_i+0x18c>
 800d156:	065f      	lsls	r7, r3, #25
 800d158:	bf48      	it	mi
 800d15a:	b2b6      	uxthmi	r6, r6
 800d15c:	07df      	lsls	r7, r3, #31
 800d15e:	bf48      	it	mi
 800d160:	f043 0320 	orrmi.w	r3, r3, #32
 800d164:	6029      	str	r1, [r5, #0]
 800d166:	bf48      	it	mi
 800d168:	6023      	strmi	r3, [r4, #0]
 800d16a:	b91e      	cbnz	r6, 800d174 <_printf_i+0x1a4>
 800d16c:	6823      	ldr	r3, [r4, #0]
 800d16e:	f023 0320 	bic.w	r3, r3, #32
 800d172:	6023      	str	r3, [r4, #0]
 800d174:	2310      	movs	r3, #16
 800d176:	e7a7      	b.n	800d0c8 <_printf_i+0xf8>
 800d178:	4824      	ldr	r0, [pc, #144]	; (800d20c <_printf_i+0x23c>)
 800d17a:	e7e4      	b.n	800d146 <_printf_i+0x176>
 800d17c:	4615      	mov	r5, r2
 800d17e:	e7bd      	b.n	800d0fc <_printf_i+0x12c>
 800d180:	682b      	ldr	r3, [r5, #0]
 800d182:	6826      	ldr	r6, [r4, #0]
 800d184:	6961      	ldr	r1, [r4, #20]
 800d186:	1d18      	adds	r0, r3, #4
 800d188:	6028      	str	r0, [r5, #0]
 800d18a:	0635      	lsls	r5, r6, #24
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	d501      	bpl.n	800d194 <_printf_i+0x1c4>
 800d190:	6019      	str	r1, [r3, #0]
 800d192:	e002      	b.n	800d19a <_printf_i+0x1ca>
 800d194:	0670      	lsls	r0, r6, #25
 800d196:	d5fb      	bpl.n	800d190 <_printf_i+0x1c0>
 800d198:	8019      	strh	r1, [r3, #0]
 800d19a:	2300      	movs	r3, #0
 800d19c:	6123      	str	r3, [r4, #16]
 800d19e:	4615      	mov	r5, r2
 800d1a0:	e7bc      	b.n	800d11c <_printf_i+0x14c>
 800d1a2:	682b      	ldr	r3, [r5, #0]
 800d1a4:	1d1a      	adds	r2, r3, #4
 800d1a6:	602a      	str	r2, [r5, #0]
 800d1a8:	681d      	ldr	r5, [r3, #0]
 800d1aa:	6862      	ldr	r2, [r4, #4]
 800d1ac:	2100      	movs	r1, #0
 800d1ae:	4628      	mov	r0, r5
 800d1b0:	f7f3 f836 	bl	8000220 <memchr>
 800d1b4:	b108      	cbz	r0, 800d1ba <_printf_i+0x1ea>
 800d1b6:	1b40      	subs	r0, r0, r5
 800d1b8:	6060      	str	r0, [r4, #4]
 800d1ba:	6863      	ldr	r3, [r4, #4]
 800d1bc:	6123      	str	r3, [r4, #16]
 800d1be:	2300      	movs	r3, #0
 800d1c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d1c4:	e7aa      	b.n	800d11c <_printf_i+0x14c>
 800d1c6:	6923      	ldr	r3, [r4, #16]
 800d1c8:	462a      	mov	r2, r5
 800d1ca:	4649      	mov	r1, r9
 800d1cc:	4640      	mov	r0, r8
 800d1ce:	47d0      	blx	sl
 800d1d0:	3001      	adds	r0, #1
 800d1d2:	d0ad      	beq.n	800d130 <_printf_i+0x160>
 800d1d4:	6823      	ldr	r3, [r4, #0]
 800d1d6:	079b      	lsls	r3, r3, #30
 800d1d8:	d413      	bmi.n	800d202 <_printf_i+0x232>
 800d1da:	68e0      	ldr	r0, [r4, #12]
 800d1dc:	9b03      	ldr	r3, [sp, #12]
 800d1de:	4298      	cmp	r0, r3
 800d1e0:	bfb8      	it	lt
 800d1e2:	4618      	movlt	r0, r3
 800d1e4:	e7a6      	b.n	800d134 <_printf_i+0x164>
 800d1e6:	2301      	movs	r3, #1
 800d1e8:	4632      	mov	r2, r6
 800d1ea:	4649      	mov	r1, r9
 800d1ec:	4640      	mov	r0, r8
 800d1ee:	47d0      	blx	sl
 800d1f0:	3001      	adds	r0, #1
 800d1f2:	d09d      	beq.n	800d130 <_printf_i+0x160>
 800d1f4:	3501      	adds	r5, #1
 800d1f6:	68e3      	ldr	r3, [r4, #12]
 800d1f8:	9903      	ldr	r1, [sp, #12]
 800d1fa:	1a5b      	subs	r3, r3, r1
 800d1fc:	42ab      	cmp	r3, r5
 800d1fe:	dcf2      	bgt.n	800d1e6 <_printf_i+0x216>
 800d200:	e7eb      	b.n	800d1da <_printf_i+0x20a>
 800d202:	2500      	movs	r5, #0
 800d204:	f104 0619 	add.w	r6, r4, #25
 800d208:	e7f5      	b.n	800d1f6 <_printf_i+0x226>
 800d20a:	bf00      	nop
 800d20c:	080136e6 	.word	0x080136e6
 800d210:	080136f7 	.word	0x080136f7

0800d214 <std>:
 800d214:	2300      	movs	r3, #0
 800d216:	b510      	push	{r4, lr}
 800d218:	4604      	mov	r4, r0
 800d21a:	e9c0 3300 	strd	r3, r3, [r0]
 800d21e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d222:	6083      	str	r3, [r0, #8]
 800d224:	8181      	strh	r1, [r0, #12]
 800d226:	6643      	str	r3, [r0, #100]	; 0x64
 800d228:	81c2      	strh	r2, [r0, #14]
 800d22a:	6183      	str	r3, [r0, #24]
 800d22c:	4619      	mov	r1, r3
 800d22e:	2208      	movs	r2, #8
 800d230:	305c      	adds	r0, #92	; 0x5c
 800d232:	f000 fa17 	bl	800d664 <memset>
 800d236:	4b0d      	ldr	r3, [pc, #52]	; (800d26c <std+0x58>)
 800d238:	6263      	str	r3, [r4, #36]	; 0x24
 800d23a:	4b0d      	ldr	r3, [pc, #52]	; (800d270 <std+0x5c>)
 800d23c:	62a3      	str	r3, [r4, #40]	; 0x28
 800d23e:	4b0d      	ldr	r3, [pc, #52]	; (800d274 <std+0x60>)
 800d240:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d242:	4b0d      	ldr	r3, [pc, #52]	; (800d278 <std+0x64>)
 800d244:	6323      	str	r3, [r4, #48]	; 0x30
 800d246:	4b0d      	ldr	r3, [pc, #52]	; (800d27c <std+0x68>)
 800d248:	6224      	str	r4, [r4, #32]
 800d24a:	429c      	cmp	r4, r3
 800d24c:	d006      	beq.n	800d25c <std+0x48>
 800d24e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800d252:	4294      	cmp	r4, r2
 800d254:	d002      	beq.n	800d25c <std+0x48>
 800d256:	33d0      	adds	r3, #208	; 0xd0
 800d258:	429c      	cmp	r4, r3
 800d25a:	d105      	bne.n	800d268 <std+0x54>
 800d25c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d260:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d264:	f000 ba8a 	b.w	800d77c <__retarget_lock_init_recursive>
 800d268:	bd10      	pop	{r4, pc}
 800d26a:	bf00      	nop
 800d26c:	0800d4b5 	.word	0x0800d4b5
 800d270:	0800d4d7 	.word	0x0800d4d7
 800d274:	0800d50f 	.word	0x0800d50f
 800d278:	0800d533 	.word	0x0800d533
 800d27c:	20001a70 	.word	0x20001a70

0800d280 <stdio_exit_handler>:
 800d280:	4a02      	ldr	r2, [pc, #8]	; (800d28c <stdio_exit_handler+0xc>)
 800d282:	4903      	ldr	r1, [pc, #12]	; (800d290 <stdio_exit_handler+0x10>)
 800d284:	4803      	ldr	r0, [pc, #12]	; (800d294 <stdio_exit_handler+0x14>)
 800d286:	f000 b869 	b.w	800d35c <_fwalk_sglue>
 800d28a:	bf00      	nop
 800d28c:	200000a4 	.word	0x200000a4
 800d290:	0800f251 	.word	0x0800f251
 800d294:	200000b0 	.word	0x200000b0

0800d298 <cleanup_stdio>:
 800d298:	6841      	ldr	r1, [r0, #4]
 800d29a:	4b0c      	ldr	r3, [pc, #48]	; (800d2cc <cleanup_stdio+0x34>)
 800d29c:	4299      	cmp	r1, r3
 800d29e:	b510      	push	{r4, lr}
 800d2a0:	4604      	mov	r4, r0
 800d2a2:	d001      	beq.n	800d2a8 <cleanup_stdio+0x10>
 800d2a4:	f001 ffd4 	bl	800f250 <_fflush_r>
 800d2a8:	68a1      	ldr	r1, [r4, #8]
 800d2aa:	4b09      	ldr	r3, [pc, #36]	; (800d2d0 <cleanup_stdio+0x38>)
 800d2ac:	4299      	cmp	r1, r3
 800d2ae:	d002      	beq.n	800d2b6 <cleanup_stdio+0x1e>
 800d2b0:	4620      	mov	r0, r4
 800d2b2:	f001 ffcd 	bl	800f250 <_fflush_r>
 800d2b6:	68e1      	ldr	r1, [r4, #12]
 800d2b8:	4b06      	ldr	r3, [pc, #24]	; (800d2d4 <cleanup_stdio+0x3c>)
 800d2ba:	4299      	cmp	r1, r3
 800d2bc:	d004      	beq.n	800d2c8 <cleanup_stdio+0x30>
 800d2be:	4620      	mov	r0, r4
 800d2c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d2c4:	f001 bfc4 	b.w	800f250 <_fflush_r>
 800d2c8:	bd10      	pop	{r4, pc}
 800d2ca:	bf00      	nop
 800d2cc:	20001a70 	.word	0x20001a70
 800d2d0:	20001ad8 	.word	0x20001ad8
 800d2d4:	20001b40 	.word	0x20001b40

0800d2d8 <global_stdio_init.part.0>:
 800d2d8:	b510      	push	{r4, lr}
 800d2da:	4b0b      	ldr	r3, [pc, #44]	; (800d308 <global_stdio_init.part.0+0x30>)
 800d2dc:	4c0b      	ldr	r4, [pc, #44]	; (800d30c <global_stdio_init.part.0+0x34>)
 800d2de:	4a0c      	ldr	r2, [pc, #48]	; (800d310 <global_stdio_init.part.0+0x38>)
 800d2e0:	601a      	str	r2, [r3, #0]
 800d2e2:	4620      	mov	r0, r4
 800d2e4:	2200      	movs	r2, #0
 800d2e6:	2104      	movs	r1, #4
 800d2e8:	f7ff ff94 	bl	800d214 <std>
 800d2ec:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800d2f0:	2201      	movs	r2, #1
 800d2f2:	2109      	movs	r1, #9
 800d2f4:	f7ff ff8e 	bl	800d214 <std>
 800d2f8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800d2fc:	2202      	movs	r2, #2
 800d2fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d302:	2112      	movs	r1, #18
 800d304:	f7ff bf86 	b.w	800d214 <std>
 800d308:	20001ba8 	.word	0x20001ba8
 800d30c:	20001a70 	.word	0x20001a70
 800d310:	0800d281 	.word	0x0800d281

0800d314 <__sfp_lock_acquire>:
 800d314:	4801      	ldr	r0, [pc, #4]	; (800d31c <__sfp_lock_acquire+0x8>)
 800d316:	f000 ba32 	b.w	800d77e <__retarget_lock_acquire_recursive>
 800d31a:	bf00      	nop
 800d31c:	20001bb1 	.word	0x20001bb1

0800d320 <__sfp_lock_release>:
 800d320:	4801      	ldr	r0, [pc, #4]	; (800d328 <__sfp_lock_release+0x8>)
 800d322:	f000 ba2d 	b.w	800d780 <__retarget_lock_release_recursive>
 800d326:	bf00      	nop
 800d328:	20001bb1 	.word	0x20001bb1

0800d32c <__sinit>:
 800d32c:	b510      	push	{r4, lr}
 800d32e:	4604      	mov	r4, r0
 800d330:	f7ff fff0 	bl	800d314 <__sfp_lock_acquire>
 800d334:	6a23      	ldr	r3, [r4, #32]
 800d336:	b11b      	cbz	r3, 800d340 <__sinit+0x14>
 800d338:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d33c:	f7ff bff0 	b.w	800d320 <__sfp_lock_release>
 800d340:	4b04      	ldr	r3, [pc, #16]	; (800d354 <__sinit+0x28>)
 800d342:	6223      	str	r3, [r4, #32]
 800d344:	4b04      	ldr	r3, [pc, #16]	; (800d358 <__sinit+0x2c>)
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d1f5      	bne.n	800d338 <__sinit+0xc>
 800d34c:	f7ff ffc4 	bl	800d2d8 <global_stdio_init.part.0>
 800d350:	e7f2      	b.n	800d338 <__sinit+0xc>
 800d352:	bf00      	nop
 800d354:	0800d299 	.word	0x0800d299
 800d358:	20001ba8 	.word	0x20001ba8

0800d35c <_fwalk_sglue>:
 800d35c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d360:	4607      	mov	r7, r0
 800d362:	4688      	mov	r8, r1
 800d364:	4614      	mov	r4, r2
 800d366:	2600      	movs	r6, #0
 800d368:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d36c:	f1b9 0901 	subs.w	r9, r9, #1
 800d370:	d505      	bpl.n	800d37e <_fwalk_sglue+0x22>
 800d372:	6824      	ldr	r4, [r4, #0]
 800d374:	2c00      	cmp	r4, #0
 800d376:	d1f7      	bne.n	800d368 <_fwalk_sglue+0xc>
 800d378:	4630      	mov	r0, r6
 800d37a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d37e:	89ab      	ldrh	r3, [r5, #12]
 800d380:	2b01      	cmp	r3, #1
 800d382:	d907      	bls.n	800d394 <_fwalk_sglue+0x38>
 800d384:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d388:	3301      	adds	r3, #1
 800d38a:	d003      	beq.n	800d394 <_fwalk_sglue+0x38>
 800d38c:	4629      	mov	r1, r5
 800d38e:	4638      	mov	r0, r7
 800d390:	47c0      	blx	r8
 800d392:	4306      	orrs	r6, r0
 800d394:	3568      	adds	r5, #104	; 0x68
 800d396:	e7e9      	b.n	800d36c <_fwalk_sglue+0x10>

0800d398 <iprintf>:
 800d398:	b40f      	push	{r0, r1, r2, r3}
 800d39a:	b507      	push	{r0, r1, r2, lr}
 800d39c:	4906      	ldr	r1, [pc, #24]	; (800d3b8 <iprintf+0x20>)
 800d39e:	ab04      	add	r3, sp, #16
 800d3a0:	6808      	ldr	r0, [r1, #0]
 800d3a2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d3a6:	6881      	ldr	r1, [r0, #8]
 800d3a8:	9301      	str	r3, [sp, #4]
 800d3aa:	f001 fdb1 	bl	800ef10 <_vfiprintf_r>
 800d3ae:	b003      	add	sp, #12
 800d3b0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d3b4:	b004      	add	sp, #16
 800d3b6:	4770      	bx	lr
 800d3b8:	200000fc 	.word	0x200000fc

0800d3bc <_puts_r>:
 800d3bc:	6a03      	ldr	r3, [r0, #32]
 800d3be:	b570      	push	{r4, r5, r6, lr}
 800d3c0:	6884      	ldr	r4, [r0, #8]
 800d3c2:	4605      	mov	r5, r0
 800d3c4:	460e      	mov	r6, r1
 800d3c6:	b90b      	cbnz	r3, 800d3cc <_puts_r+0x10>
 800d3c8:	f7ff ffb0 	bl	800d32c <__sinit>
 800d3cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d3ce:	07db      	lsls	r3, r3, #31
 800d3d0:	d405      	bmi.n	800d3de <_puts_r+0x22>
 800d3d2:	89a3      	ldrh	r3, [r4, #12]
 800d3d4:	0598      	lsls	r0, r3, #22
 800d3d6:	d402      	bmi.n	800d3de <_puts_r+0x22>
 800d3d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d3da:	f000 f9d0 	bl	800d77e <__retarget_lock_acquire_recursive>
 800d3de:	89a3      	ldrh	r3, [r4, #12]
 800d3e0:	0719      	lsls	r1, r3, #28
 800d3e2:	d513      	bpl.n	800d40c <_puts_r+0x50>
 800d3e4:	6923      	ldr	r3, [r4, #16]
 800d3e6:	b18b      	cbz	r3, 800d40c <_puts_r+0x50>
 800d3e8:	3e01      	subs	r6, #1
 800d3ea:	68a3      	ldr	r3, [r4, #8]
 800d3ec:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d3f0:	3b01      	subs	r3, #1
 800d3f2:	60a3      	str	r3, [r4, #8]
 800d3f4:	b9e9      	cbnz	r1, 800d432 <_puts_r+0x76>
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	da2e      	bge.n	800d458 <_puts_r+0x9c>
 800d3fa:	4622      	mov	r2, r4
 800d3fc:	210a      	movs	r1, #10
 800d3fe:	4628      	mov	r0, r5
 800d400:	f000 f89b 	bl	800d53a <__swbuf_r>
 800d404:	3001      	adds	r0, #1
 800d406:	d007      	beq.n	800d418 <_puts_r+0x5c>
 800d408:	250a      	movs	r5, #10
 800d40a:	e007      	b.n	800d41c <_puts_r+0x60>
 800d40c:	4621      	mov	r1, r4
 800d40e:	4628      	mov	r0, r5
 800d410:	f000 f8d0 	bl	800d5b4 <__swsetup_r>
 800d414:	2800      	cmp	r0, #0
 800d416:	d0e7      	beq.n	800d3e8 <_puts_r+0x2c>
 800d418:	f04f 35ff 	mov.w	r5, #4294967295
 800d41c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d41e:	07da      	lsls	r2, r3, #31
 800d420:	d405      	bmi.n	800d42e <_puts_r+0x72>
 800d422:	89a3      	ldrh	r3, [r4, #12]
 800d424:	059b      	lsls	r3, r3, #22
 800d426:	d402      	bmi.n	800d42e <_puts_r+0x72>
 800d428:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d42a:	f000 f9a9 	bl	800d780 <__retarget_lock_release_recursive>
 800d42e:	4628      	mov	r0, r5
 800d430:	bd70      	pop	{r4, r5, r6, pc}
 800d432:	2b00      	cmp	r3, #0
 800d434:	da04      	bge.n	800d440 <_puts_r+0x84>
 800d436:	69a2      	ldr	r2, [r4, #24]
 800d438:	429a      	cmp	r2, r3
 800d43a:	dc06      	bgt.n	800d44a <_puts_r+0x8e>
 800d43c:	290a      	cmp	r1, #10
 800d43e:	d004      	beq.n	800d44a <_puts_r+0x8e>
 800d440:	6823      	ldr	r3, [r4, #0]
 800d442:	1c5a      	adds	r2, r3, #1
 800d444:	6022      	str	r2, [r4, #0]
 800d446:	7019      	strb	r1, [r3, #0]
 800d448:	e7cf      	b.n	800d3ea <_puts_r+0x2e>
 800d44a:	4622      	mov	r2, r4
 800d44c:	4628      	mov	r0, r5
 800d44e:	f000 f874 	bl	800d53a <__swbuf_r>
 800d452:	3001      	adds	r0, #1
 800d454:	d1c9      	bne.n	800d3ea <_puts_r+0x2e>
 800d456:	e7df      	b.n	800d418 <_puts_r+0x5c>
 800d458:	6823      	ldr	r3, [r4, #0]
 800d45a:	250a      	movs	r5, #10
 800d45c:	1c5a      	adds	r2, r3, #1
 800d45e:	6022      	str	r2, [r4, #0]
 800d460:	701d      	strb	r5, [r3, #0]
 800d462:	e7db      	b.n	800d41c <_puts_r+0x60>

0800d464 <puts>:
 800d464:	4b02      	ldr	r3, [pc, #8]	; (800d470 <puts+0xc>)
 800d466:	4601      	mov	r1, r0
 800d468:	6818      	ldr	r0, [r3, #0]
 800d46a:	f7ff bfa7 	b.w	800d3bc <_puts_r>
 800d46e:	bf00      	nop
 800d470:	200000fc 	.word	0x200000fc

0800d474 <siprintf>:
 800d474:	b40e      	push	{r1, r2, r3}
 800d476:	b500      	push	{lr}
 800d478:	b09c      	sub	sp, #112	; 0x70
 800d47a:	ab1d      	add	r3, sp, #116	; 0x74
 800d47c:	9002      	str	r0, [sp, #8]
 800d47e:	9006      	str	r0, [sp, #24]
 800d480:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d484:	4809      	ldr	r0, [pc, #36]	; (800d4ac <siprintf+0x38>)
 800d486:	9107      	str	r1, [sp, #28]
 800d488:	9104      	str	r1, [sp, #16]
 800d48a:	4909      	ldr	r1, [pc, #36]	; (800d4b0 <siprintf+0x3c>)
 800d48c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d490:	9105      	str	r1, [sp, #20]
 800d492:	6800      	ldr	r0, [r0, #0]
 800d494:	9301      	str	r3, [sp, #4]
 800d496:	a902      	add	r1, sp, #8
 800d498:	f001 fc12 	bl	800ecc0 <_svfiprintf_r>
 800d49c:	9b02      	ldr	r3, [sp, #8]
 800d49e:	2200      	movs	r2, #0
 800d4a0:	701a      	strb	r2, [r3, #0]
 800d4a2:	b01c      	add	sp, #112	; 0x70
 800d4a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800d4a8:	b003      	add	sp, #12
 800d4aa:	4770      	bx	lr
 800d4ac:	200000fc 	.word	0x200000fc
 800d4b0:	ffff0208 	.word	0xffff0208

0800d4b4 <__sread>:
 800d4b4:	b510      	push	{r4, lr}
 800d4b6:	460c      	mov	r4, r1
 800d4b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4bc:	f000 f900 	bl	800d6c0 <_read_r>
 800d4c0:	2800      	cmp	r0, #0
 800d4c2:	bfab      	itete	ge
 800d4c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d4c6:	89a3      	ldrhlt	r3, [r4, #12]
 800d4c8:	181b      	addge	r3, r3, r0
 800d4ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d4ce:	bfac      	ite	ge
 800d4d0:	6563      	strge	r3, [r4, #84]	; 0x54
 800d4d2:	81a3      	strhlt	r3, [r4, #12]
 800d4d4:	bd10      	pop	{r4, pc}

0800d4d6 <__swrite>:
 800d4d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4da:	461f      	mov	r7, r3
 800d4dc:	898b      	ldrh	r3, [r1, #12]
 800d4de:	05db      	lsls	r3, r3, #23
 800d4e0:	4605      	mov	r5, r0
 800d4e2:	460c      	mov	r4, r1
 800d4e4:	4616      	mov	r6, r2
 800d4e6:	d505      	bpl.n	800d4f4 <__swrite+0x1e>
 800d4e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4ec:	2302      	movs	r3, #2
 800d4ee:	2200      	movs	r2, #0
 800d4f0:	f000 f8d4 	bl	800d69c <_lseek_r>
 800d4f4:	89a3      	ldrh	r3, [r4, #12]
 800d4f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d4fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d4fe:	81a3      	strh	r3, [r4, #12]
 800d500:	4632      	mov	r2, r6
 800d502:	463b      	mov	r3, r7
 800d504:	4628      	mov	r0, r5
 800d506:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d50a:	f000 b8fb 	b.w	800d704 <_write_r>

0800d50e <__sseek>:
 800d50e:	b510      	push	{r4, lr}
 800d510:	460c      	mov	r4, r1
 800d512:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d516:	f000 f8c1 	bl	800d69c <_lseek_r>
 800d51a:	1c43      	adds	r3, r0, #1
 800d51c:	89a3      	ldrh	r3, [r4, #12]
 800d51e:	bf15      	itete	ne
 800d520:	6560      	strne	r0, [r4, #84]	; 0x54
 800d522:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d526:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d52a:	81a3      	strheq	r3, [r4, #12]
 800d52c:	bf18      	it	ne
 800d52e:	81a3      	strhne	r3, [r4, #12]
 800d530:	bd10      	pop	{r4, pc}

0800d532 <__sclose>:
 800d532:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d536:	f000 b8a1 	b.w	800d67c <_close_r>

0800d53a <__swbuf_r>:
 800d53a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d53c:	460e      	mov	r6, r1
 800d53e:	4614      	mov	r4, r2
 800d540:	4605      	mov	r5, r0
 800d542:	b118      	cbz	r0, 800d54c <__swbuf_r+0x12>
 800d544:	6a03      	ldr	r3, [r0, #32]
 800d546:	b90b      	cbnz	r3, 800d54c <__swbuf_r+0x12>
 800d548:	f7ff fef0 	bl	800d32c <__sinit>
 800d54c:	69a3      	ldr	r3, [r4, #24]
 800d54e:	60a3      	str	r3, [r4, #8]
 800d550:	89a3      	ldrh	r3, [r4, #12]
 800d552:	071a      	lsls	r2, r3, #28
 800d554:	d525      	bpl.n	800d5a2 <__swbuf_r+0x68>
 800d556:	6923      	ldr	r3, [r4, #16]
 800d558:	b31b      	cbz	r3, 800d5a2 <__swbuf_r+0x68>
 800d55a:	6823      	ldr	r3, [r4, #0]
 800d55c:	6922      	ldr	r2, [r4, #16]
 800d55e:	1a98      	subs	r0, r3, r2
 800d560:	6963      	ldr	r3, [r4, #20]
 800d562:	b2f6      	uxtb	r6, r6
 800d564:	4283      	cmp	r3, r0
 800d566:	4637      	mov	r7, r6
 800d568:	dc04      	bgt.n	800d574 <__swbuf_r+0x3a>
 800d56a:	4621      	mov	r1, r4
 800d56c:	4628      	mov	r0, r5
 800d56e:	f001 fe6f 	bl	800f250 <_fflush_r>
 800d572:	b9e0      	cbnz	r0, 800d5ae <__swbuf_r+0x74>
 800d574:	68a3      	ldr	r3, [r4, #8]
 800d576:	3b01      	subs	r3, #1
 800d578:	60a3      	str	r3, [r4, #8]
 800d57a:	6823      	ldr	r3, [r4, #0]
 800d57c:	1c5a      	adds	r2, r3, #1
 800d57e:	6022      	str	r2, [r4, #0]
 800d580:	701e      	strb	r6, [r3, #0]
 800d582:	6962      	ldr	r2, [r4, #20]
 800d584:	1c43      	adds	r3, r0, #1
 800d586:	429a      	cmp	r2, r3
 800d588:	d004      	beq.n	800d594 <__swbuf_r+0x5a>
 800d58a:	89a3      	ldrh	r3, [r4, #12]
 800d58c:	07db      	lsls	r3, r3, #31
 800d58e:	d506      	bpl.n	800d59e <__swbuf_r+0x64>
 800d590:	2e0a      	cmp	r6, #10
 800d592:	d104      	bne.n	800d59e <__swbuf_r+0x64>
 800d594:	4621      	mov	r1, r4
 800d596:	4628      	mov	r0, r5
 800d598:	f001 fe5a 	bl	800f250 <_fflush_r>
 800d59c:	b938      	cbnz	r0, 800d5ae <__swbuf_r+0x74>
 800d59e:	4638      	mov	r0, r7
 800d5a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d5a2:	4621      	mov	r1, r4
 800d5a4:	4628      	mov	r0, r5
 800d5a6:	f000 f805 	bl	800d5b4 <__swsetup_r>
 800d5aa:	2800      	cmp	r0, #0
 800d5ac:	d0d5      	beq.n	800d55a <__swbuf_r+0x20>
 800d5ae:	f04f 37ff 	mov.w	r7, #4294967295
 800d5b2:	e7f4      	b.n	800d59e <__swbuf_r+0x64>

0800d5b4 <__swsetup_r>:
 800d5b4:	b538      	push	{r3, r4, r5, lr}
 800d5b6:	4b2a      	ldr	r3, [pc, #168]	; (800d660 <__swsetup_r+0xac>)
 800d5b8:	4605      	mov	r5, r0
 800d5ba:	6818      	ldr	r0, [r3, #0]
 800d5bc:	460c      	mov	r4, r1
 800d5be:	b118      	cbz	r0, 800d5c8 <__swsetup_r+0x14>
 800d5c0:	6a03      	ldr	r3, [r0, #32]
 800d5c2:	b90b      	cbnz	r3, 800d5c8 <__swsetup_r+0x14>
 800d5c4:	f7ff feb2 	bl	800d32c <__sinit>
 800d5c8:	89a3      	ldrh	r3, [r4, #12]
 800d5ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d5ce:	0718      	lsls	r0, r3, #28
 800d5d0:	d422      	bmi.n	800d618 <__swsetup_r+0x64>
 800d5d2:	06d9      	lsls	r1, r3, #27
 800d5d4:	d407      	bmi.n	800d5e6 <__swsetup_r+0x32>
 800d5d6:	2309      	movs	r3, #9
 800d5d8:	602b      	str	r3, [r5, #0]
 800d5da:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d5de:	81a3      	strh	r3, [r4, #12]
 800d5e0:	f04f 30ff 	mov.w	r0, #4294967295
 800d5e4:	e034      	b.n	800d650 <__swsetup_r+0x9c>
 800d5e6:	0758      	lsls	r0, r3, #29
 800d5e8:	d512      	bpl.n	800d610 <__swsetup_r+0x5c>
 800d5ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d5ec:	b141      	cbz	r1, 800d600 <__swsetup_r+0x4c>
 800d5ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d5f2:	4299      	cmp	r1, r3
 800d5f4:	d002      	beq.n	800d5fc <__swsetup_r+0x48>
 800d5f6:	4628      	mov	r0, r5
 800d5f8:	f000 ff40 	bl	800e47c <_free_r>
 800d5fc:	2300      	movs	r3, #0
 800d5fe:	6363      	str	r3, [r4, #52]	; 0x34
 800d600:	89a3      	ldrh	r3, [r4, #12]
 800d602:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d606:	81a3      	strh	r3, [r4, #12]
 800d608:	2300      	movs	r3, #0
 800d60a:	6063      	str	r3, [r4, #4]
 800d60c:	6923      	ldr	r3, [r4, #16]
 800d60e:	6023      	str	r3, [r4, #0]
 800d610:	89a3      	ldrh	r3, [r4, #12]
 800d612:	f043 0308 	orr.w	r3, r3, #8
 800d616:	81a3      	strh	r3, [r4, #12]
 800d618:	6923      	ldr	r3, [r4, #16]
 800d61a:	b94b      	cbnz	r3, 800d630 <__swsetup_r+0x7c>
 800d61c:	89a3      	ldrh	r3, [r4, #12]
 800d61e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d622:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d626:	d003      	beq.n	800d630 <__swsetup_r+0x7c>
 800d628:	4621      	mov	r1, r4
 800d62a:	4628      	mov	r0, r5
 800d62c:	f001 fe5e 	bl	800f2ec <__smakebuf_r>
 800d630:	89a0      	ldrh	r0, [r4, #12]
 800d632:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d636:	f010 0301 	ands.w	r3, r0, #1
 800d63a:	d00a      	beq.n	800d652 <__swsetup_r+0x9e>
 800d63c:	2300      	movs	r3, #0
 800d63e:	60a3      	str	r3, [r4, #8]
 800d640:	6963      	ldr	r3, [r4, #20]
 800d642:	425b      	negs	r3, r3
 800d644:	61a3      	str	r3, [r4, #24]
 800d646:	6923      	ldr	r3, [r4, #16]
 800d648:	b943      	cbnz	r3, 800d65c <__swsetup_r+0xa8>
 800d64a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d64e:	d1c4      	bne.n	800d5da <__swsetup_r+0x26>
 800d650:	bd38      	pop	{r3, r4, r5, pc}
 800d652:	0781      	lsls	r1, r0, #30
 800d654:	bf58      	it	pl
 800d656:	6963      	ldrpl	r3, [r4, #20]
 800d658:	60a3      	str	r3, [r4, #8]
 800d65a:	e7f4      	b.n	800d646 <__swsetup_r+0x92>
 800d65c:	2000      	movs	r0, #0
 800d65e:	e7f7      	b.n	800d650 <__swsetup_r+0x9c>
 800d660:	200000fc 	.word	0x200000fc

0800d664 <memset>:
 800d664:	4402      	add	r2, r0
 800d666:	4603      	mov	r3, r0
 800d668:	4293      	cmp	r3, r2
 800d66a:	d100      	bne.n	800d66e <memset+0xa>
 800d66c:	4770      	bx	lr
 800d66e:	f803 1b01 	strb.w	r1, [r3], #1
 800d672:	e7f9      	b.n	800d668 <memset+0x4>

0800d674 <_localeconv_r>:
 800d674:	4800      	ldr	r0, [pc, #0]	; (800d678 <_localeconv_r+0x4>)
 800d676:	4770      	bx	lr
 800d678:	200001f0 	.word	0x200001f0

0800d67c <_close_r>:
 800d67c:	b538      	push	{r3, r4, r5, lr}
 800d67e:	4d06      	ldr	r5, [pc, #24]	; (800d698 <_close_r+0x1c>)
 800d680:	2300      	movs	r3, #0
 800d682:	4604      	mov	r4, r0
 800d684:	4608      	mov	r0, r1
 800d686:	602b      	str	r3, [r5, #0]
 800d688:	f7f6 fa2b 	bl	8003ae2 <_close>
 800d68c:	1c43      	adds	r3, r0, #1
 800d68e:	d102      	bne.n	800d696 <_close_r+0x1a>
 800d690:	682b      	ldr	r3, [r5, #0]
 800d692:	b103      	cbz	r3, 800d696 <_close_r+0x1a>
 800d694:	6023      	str	r3, [r4, #0]
 800d696:	bd38      	pop	{r3, r4, r5, pc}
 800d698:	20001bac 	.word	0x20001bac

0800d69c <_lseek_r>:
 800d69c:	b538      	push	{r3, r4, r5, lr}
 800d69e:	4d07      	ldr	r5, [pc, #28]	; (800d6bc <_lseek_r+0x20>)
 800d6a0:	4604      	mov	r4, r0
 800d6a2:	4608      	mov	r0, r1
 800d6a4:	4611      	mov	r1, r2
 800d6a6:	2200      	movs	r2, #0
 800d6a8:	602a      	str	r2, [r5, #0]
 800d6aa:	461a      	mov	r2, r3
 800d6ac:	f7f6 fa40 	bl	8003b30 <_lseek>
 800d6b0:	1c43      	adds	r3, r0, #1
 800d6b2:	d102      	bne.n	800d6ba <_lseek_r+0x1e>
 800d6b4:	682b      	ldr	r3, [r5, #0]
 800d6b6:	b103      	cbz	r3, 800d6ba <_lseek_r+0x1e>
 800d6b8:	6023      	str	r3, [r4, #0]
 800d6ba:	bd38      	pop	{r3, r4, r5, pc}
 800d6bc:	20001bac 	.word	0x20001bac

0800d6c0 <_read_r>:
 800d6c0:	b538      	push	{r3, r4, r5, lr}
 800d6c2:	4d07      	ldr	r5, [pc, #28]	; (800d6e0 <_read_r+0x20>)
 800d6c4:	4604      	mov	r4, r0
 800d6c6:	4608      	mov	r0, r1
 800d6c8:	4611      	mov	r1, r2
 800d6ca:	2200      	movs	r2, #0
 800d6cc:	602a      	str	r2, [r5, #0]
 800d6ce:	461a      	mov	r2, r3
 800d6d0:	f7f6 f9ce 	bl	8003a70 <_read>
 800d6d4:	1c43      	adds	r3, r0, #1
 800d6d6:	d102      	bne.n	800d6de <_read_r+0x1e>
 800d6d8:	682b      	ldr	r3, [r5, #0]
 800d6da:	b103      	cbz	r3, 800d6de <_read_r+0x1e>
 800d6dc:	6023      	str	r3, [r4, #0]
 800d6de:	bd38      	pop	{r3, r4, r5, pc}
 800d6e0:	20001bac 	.word	0x20001bac

0800d6e4 <_sbrk_r>:
 800d6e4:	b538      	push	{r3, r4, r5, lr}
 800d6e6:	4d06      	ldr	r5, [pc, #24]	; (800d700 <_sbrk_r+0x1c>)
 800d6e8:	2300      	movs	r3, #0
 800d6ea:	4604      	mov	r4, r0
 800d6ec:	4608      	mov	r0, r1
 800d6ee:	602b      	str	r3, [r5, #0]
 800d6f0:	f7f6 fa2c 	bl	8003b4c <_sbrk>
 800d6f4:	1c43      	adds	r3, r0, #1
 800d6f6:	d102      	bne.n	800d6fe <_sbrk_r+0x1a>
 800d6f8:	682b      	ldr	r3, [r5, #0]
 800d6fa:	b103      	cbz	r3, 800d6fe <_sbrk_r+0x1a>
 800d6fc:	6023      	str	r3, [r4, #0]
 800d6fe:	bd38      	pop	{r3, r4, r5, pc}
 800d700:	20001bac 	.word	0x20001bac

0800d704 <_write_r>:
 800d704:	b538      	push	{r3, r4, r5, lr}
 800d706:	4d07      	ldr	r5, [pc, #28]	; (800d724 <_write_r+0x20>)
 800d708:	4604      	mov	r4, r0
 800d70a:	4608      	mov	r0, r1
 800d70c:	4611      	mov	r1, r2
 800d70e:	2200      	movs	r2, #0
 800d710:	602a      	str	r2, [r5, #0]
 800d712:	461a      	mov	r2, r3
 800d714:	f7f6 f9c9 	bl	8003aaa <_write>
 800d718:	1c43      	adds	r3, r0, #1
 800d71a:	d102      	bne.n	800d722 <_write_r+0x1e>
 800d71c:	682b      	ldr	r3, [r5, #0]
 800d71e:	b103      	cbz	r3, 800d722 <_write_r+0x1e>
 800d720:	6023      	str	r3, [r4, #0]
 800d722:	bd38      	pop	{r3, r4, r5, pc}
 800d724:	20001bac 	.word	0x20001bac

0800d728 <__errno>:
 800d728:	4b01      	ldr	r3, [pc, #4]	; (800d730 <__errno+0x8>)
 800d72a:	6818      	ldr	r0, [r3, #0]
 800d72c:	4770      	bx	lr
 800d72e:	bf00      	nop
 800d730:	200000fc 	.word	0x200000fc

0800d734 <__libc_init_array>:
 800d734:	b570      	push	{r4, r5, r6, lr}
 800d736:	4d0d      	ldr	r5, [pc, #52]	; (800d76c <__libc_init_array+0x38>)
 800d738:	4c0d      	ldr	r4, [pc, #52]	; (800d770 <__libc_init_array+0x3c>)
 800d73a:	1b64      	subs	r4, r4, r5
 800d73c:	10a4      	asrs	r4, r4, #2
 800d73e:	2600      	movs	r6, #0
 800d740:	42a6      	cmp	r6, r4
 800d742:	d109      	bne.n	800d758 <__libc_init_array+0x24>
 800d744:	4d0b      	ldr	r5, [pc, #44]	; (800d774 <__libc_init_array+0x40>)
 800d746:	4c0c      	ldr	r4, [pc, #48]	; (800d778 <__libc_init_array+0x44>)
 800d748:	f002 fe76 	bl	8010438 <_init>
 800d74c:	1b64      	subs	r4, r4, r5
 800d74e:	10a4      	asrs	r4, r4, #2
 800d750:	2600      	movs	r6, #0
 800d752:	42a6      	cmp	r6, r4
 800d754:	d105      	bne.n	800d762 <__libc_init_array+0x2e>
 800d756:	bd70      	pop	{r4, r5, r6, pc}
 800d758:	f855 3b04 	ldr.w	r3, [r5], #4
 800d75c:	4798      	blx	r3
 800d75e:	3601      	adds	r6, #1
 800d760:	e7ee      	b.n	800d740 <__libc_init_array+0xc>
 800d762:	f855 3b04 	ldr.w	r3, [r5], #4
 800d766:	4798      	blx	r3
 800d768:	3601      	adds	r6, #1
 800d76a:	e7f2      	b.n	800d752 <__libc_init_array+0x1e>
 800d76c:	08013a80 	.word	0x08013a80
 800d770:	08013a80 	.word	0x08013a80
 800d774:	08013a80 	.word	0x08013a80
 800d778:	08013a84 	.word	0x08013a84

0800d77c <__retarget_lock_init_recursive>:
 800d77c:	4770      	bx	lr

0800d77e <__retarget_lock_acquire_recursive>:
 800d77e:	4770      	bx	lr

0800d780 <__retarget_lock_release_recursive>:
 800d780:	4770      	bx	lr

0800d782 <quorem>:
 800d782:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d786:	6903      	ldr	r3, [r0, #16]
 800d788:	690c      	ldr	r4, [r1, #16]
 800d78a:	42a3      	cmp	r3, r4
 800d78c:	4607      	mov	r7, r0
 800d78e:	db7e      	blt.n	800d88e <quorem+0x10c>
 800d790:	3c01      	subs	r4, #1
 800d792:	f101 0814 	add.w	r8, r1, #20
 800d796:	f100 0514 	add.w	r5, r0, #20
 800d79a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d79e:	9301      	str	r3, [sp, #4]
 800d7a0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d7a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d7a8:	3301      	adds	r3, #1
 800d7aa:	429a      	cmp	r2, r3
 800d7ac:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d7b0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d7b4:	fbb2 f6f3 	udiv	r6, r2, r3
 800d7b8:	d331      	bcc.n	800d81e <quorem+0x9c>
 800d7ba:	f04f 0e00 	mov.w	lr, #0
 800d7be:	4640      	mov	r0, r8
 800d7c0:	46ac      	mov	ip, r5
 800d7c2:	46f2      	mov	sl, lr
 800d7c4:	f850 2b04 	ldr.w	r2, [r0], #4
 800d7c8:	b293      	uxth	r3, r2
 800d7ca:	fb06 e303 	mla	r3, r6, r3, lr
 800d7ce:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d7d2:	0c1a      	lsrs	r2, r3, #16
 800d7d4:	b29b      	uxth	r3, r3
 800d7d6:	ebaa 0303 	sub.w	r3, sl, r3
 800d7da:	f8dc a000 	ldr.w	sl, [ip]
 800d7de:	fa13 f38a 	uxtah	r3, r3, sl
 800d7e2:	fb06 220e 	mla	r2, r6, lr, r2
 800d7e6:	9300      	str	r3, [sp, #0]
 800d7e8:	9b00      	ldr	r3, [sp, #0]
 800d7ea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d7ee:	b292      	uxth	r2, r2
 800d7f0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d7f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d7f8:	f8bd 3000 	ldrh.w	r3, [sp]
 800d7fc:	4581      	cmp	r9, r0
 800d7fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d802:	f84c 3b04 	str.w	r3, [ip], #4
 800d806:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d80a:	d2db      	bcs.n	800d7c4 <quorem+0x42>
 800d80c:	f855 300b 	ldr.w	r3, [r5, fp]
 800d810:	b92b      	cbnz	r3, 800d81e <quorem+0x9c>
 800d812:	9b01      	ldr	r3, [sp, #4]
 800d814:	3b04      	subs	r3, #4
 800d816:	429d      	cmp	r5, r3
 800d818:	461a      	mov	r2, r3
 800d81a:	d32c      	bcc.n	800d876 <quorem+0xf4>
 800d81c:	613c      	str	r4, [r7, #16]
 800d81e:	4638      	mov	r0, r7
 800d820:	f001 f8f4 	bl	800ea0c <__mcmp>
 800d824:	2800      	cmp	r0, #0
 800d826:	db22      	blt.n	800d86e <quorem+0xec>
 800d828:	3601      	adds	r6, #1
 800d82a:	4629      	mov	r1, r5
 800d82c:	2000      	movs	r0, #0
 800d82e:	f858 2b04 	ldr.w	r2, [r8], #4
 800d832:	f8d1 c000 	ldr.w	ip, [r1]
 800d836:	b293      	uxth	r3, r2
 800d838:	1ac3      	subs	r3, r0, r3
 800d83a:	0c12      	lsrs	r2, r2, #16
 800d83c:	fa13 f38c 	uxtah	r3, r3, ip
 800d840:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800d844:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d848:	b29b      	uxth	r3, r3
 800d84a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d84e:	45c1      	cmp	r9, r8
 800d850:	f841 3b04 	str.w	r3, [r1], #4
 800d854:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d858:	d2e9      	bcs.n	800d82e <quorem+0xac>
 800d85a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d85e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d862:	b922      	cbnz	r2, 800d86e <quorem+0xec>
 800d864:	3b04      	subs	r3, #4
 800d866:	429d      	cmp	r5, r3
 800d868:	461a      	mov	r2, r3
 800d86a:	d30a      	bcc.n	800d882 <quorem+0x100>
 800d86c:	613c      	str	r4, [r7, #16]
 800d86e:	4630      	mov	r0, r6
 800d870:	b003      	add	sp, #12
 800d872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d876:	6812      	ldr	r2, [r2, #0]
 800d878:	3b04      	subs	r3, #4
 800d87a:	2a00      	cmp	r2, #0
 800d87c:	d1ce      	bne.n	800d81c <quorem+0x9a>
 800d87e:	3c01      	subs	r4, #1
 800d880:	e7c9      	b.n	800d816 <quorem+0x94>
 800d882:	6812      	ldr	r2, [r2, #0]
 800d884:	3b04      	subs	r3, #4
 800d886:	2a00      	cmp	r2, #0
 800d888:	d1f0      	bne.n	800d86c <quorem+0xea>
 800d88a:	3c01      	subs	r4, #1
 800d88c:	e7eb      	b.n	800d866 <quorem+0xe4>
 800d88e:	2000      	movs	r0, #0
 800d890:	e7ee      	b.n	800d870 <quorem+0xee>
 800d892:	0000      	movs	r0, r0
 800d894:	0000      	movs	r0, r0
	...

0800d898 <_dtoa_r>:
 800d898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d89c:	ed2d 8b04 	vpush	{d8-d9}
 800d8a0:	69c5      	ldr	r5, [r0, #28]
 800d8a2:	b093      	sub	sp, #76	; 0x4c
 800d8a4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d8a8:	ec57 6b10 	vmov	r6, r7, d0
 800d8ac:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d8b0:	9107      	str	r1, [sp, #28]
 800d8b2:	4604      	mov	r4, r0
 800d8b4:	920a      	str	r2, [sp, #40]	; 0x28
 800d8b6:	930d      	str	r3, [sp, #52]	; 0x34
 800d8b8:	b975      	cbnz	r5, 800d8d8 <_dtoa_r+0x40>
 800d8ba:	2010      	movs	r0, #16
 800d8bc:	f7fe ff90 	bl	800c7e0 <malloc>
 800d8c0:	4602      	mov	r2, r0
 800d8c2:	61e0      	str	r0, [r4, #28]
 800d8c4:	b920      	cbnz	r0, 800d8d0 <_dtoa_r+0x38>
 800d8c6:	4bae      	ldr	r3, [pc, #696]	; (800db80 <_dtoa_r+0x2e8>)
 800d8c8:	21ef      	movs	r1, #239	; 0xef
 800d8ca:	48ae      	ldr	r0, [pc, #696]	; (800db84 <_dtoa_r+0x2ec>)
 800d8cc:	f001 fd94 	bl	800f3f8 <__assert_func>
 800d8d0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d8d4:	6005      	str	r5, [r0, #0]
 800d8d6:	60c5      	str	r5, [r0, #12]
 800d8d8:	69e3      	ldr	r3, [r4, #28]
 800d8da:	6819      	ldr	r1, [r3, #0]
 800d8dc:	b151      	cbz	r1, 800d8f4 <_dtoa_r+0x5c>
 800d8de:	685a      	ldr	r2, [r3, #4]
 800d8e0:	604a      	str	r2, [r1, #4]
 800d8e2:	2301      	movs	r3, #1
 800d8e4:	4093      	lsls	r3, r2
 800d8e6:	608b      	str	r3, [r1, #8]
 800d8e8:	4620      	mov	r0, r4
 800d8ea:	f000 fe53 	bl	800e594 <_Bfree>
 800d8ee:	69e3      	ldr	r3, [r4, #28]
 800d8f0:	2200      	movs	r2, #0
 800d8f2:	601a      	str	r2, [r3, #0]
 800d8f4:	1e3b      	subs	r3, r7, #0
 800d8f6:	bfbb      	ittet	lt
 800d8f8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d8fc:	9303      	strlt	r3, [sp, #12]
 800d8fe:	2300      	movge	r3, #0
 800d900:	2201      	movlt	r2, #1
 800d902:	bfac      	ite	ge
 800d904:	f8c8 3000 	strge.w	r3, [r8]
 800d908:	f8c8 2000 	strlt.w	r2, [r8]
 800d90c:	4b9e      	ldr	r3, [pc, #632]	; (800db88 <_dtoa_r+0x2f0>)
 800d90e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800d912:	ea33 0308 	bics.w	r3, r3, r8
 800d916:	d11b      	bne.n	800d950 <_dtoa_r+0xb8>
 800d918:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d91a:	f242 730f 	movw	r3, #9999	; 0x270f
 800d91e:	6013      	str	r3, [r2, #0]
 800d920:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800d924:	4333      	orrs	r3, r6
 800d926:	f000 8593 	beq.w	800e450 <_dtoa_r+0xbb8>
 800d92a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d92c:	b963      	cbnz	r3, 800d948 <_dtoa_r+0xb0>
 800d92e:	4b97      	ldr	r3, [pc, #604]	; (800db8c <_dtoa_r+0x2f4>)
 800d930:	e027      	b.n	800d982 <_dtoa_r+0xea>
 800d932:	4b97      	ldr	r3, [pc, #604]	; (800db90 <_dtoa_r+0x2f8>)
 800d934:	9300      	str	r3, [sp, #0]
 800d936:	3308      	adds	r3, #8
 800d938:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d93a:	6013      	str	r3, [r2, #0]
 800d93c:	9800      	ldr	r0, [sp, #0]
 800d93e:	b013      	add	sp, #76	; 0x4c
 800d940:	ecbd 8b04 	vpop	{d8-d9}
 800d944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d948:	4b90      	ldr	r3, [pc, #576]	; (800db8c <_dtoa_r+0x2f4>)
 800d94a:	9300      	str	r3, [sp, #0]
 800d94c:	3303      	adds	r3, #3
 800d94e:	e7f3      	b.n	800d938 <_dtoa_r+0xa0>
 800d950:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d954:	2200      	movs	r2, #0
 800d956:	ec51 0b17 	vmov	r0, r1, d7
 800d95a:	eeb0 8a47 	vmov.f32	s16, s14
 800d95e:	eef0 8a67 	vmov.f32	s17, s15
 800d962:	2300      	movs	r3, #0
 800d964:	f7f3 f8d8 	bl	8000b18 <__aeabi_dcmpeq>
 800d968:	4681      	mov	r9, r0
 800d96a:	b160      	cbz	r0, 800d986 <_dtoa_r+0xee>
 800d96c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d96e:	2301      	movs	r3, #1
 800d970:	6013      	str	r3, [r2, #0]
 800d972:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d974:	2b00      	cmp	r3, #0
 800d976:	f000 8568 	beq.w	800e44a <_dtoa_r+0xbb2>
 800d97a:	4b86      	ldr	r3, [pc, #536]	; (800db94 <_dtoa_r+0x2fc>)
 800d97c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d97e:	6013      	str	r3, [r2, #0]
 800d980:	3b01      	subs	r3, #1
 800d982:	9300      	str	r3, [sp, #0]
 800d984:	e7da      	b.n	800d93c <_dtoa_r+0xa4>
 800d986:	aa10      	add	r2, sp, #64	; 0x40
 800d988:	a911      	add	r1, sp, #68	; 0x44
 800d98a:	4620      	mov	r0, r4
 800d98c:	eeb0 0a48 	vmov.f32	s0, s16
 800d990:	eef0 0a68 	vmov.f32	s1, s17
 800d994:	f001 f8e0 	bl	800eb58 <__d2b>
 800d998:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800d99c:	4682      	mov	sl, r0
 800d99e:	2d00      	cmp	r5, #0
 800d9a0:	d07f      	beq.n	800daa2 <_dtoa_r+0x20a>
 800d9a2:	ee18 3a90 	vmov	r3, s17
 800d9a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d9aa:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800d9ae:	ec51 0b18 	vmov	r0, r1, d8
 800d9b2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d9b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d9ba:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800d9be:	4619      	mov	r1, r3
 800d9c0:	2200      	movs	r2, #0
 800d9c2:	4b75      	ldr	r3, [pc, #468]	; (800db98 <_dtoa_r+0x300>)
 800d9c4:	f7f2 fc88 	bl	80002d8 <__aeabi_dsub>
 800d9c8:	a367      	add	r3, pc, #412	; (adr r3, 800db68 <_dtoa_r+0x2d0>)
 800d9ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9ce:	f7f2 fe3b 	bl	8000648 <__aeabi_dmul>
 800d9d2:	a367      	add	r3, pc, #412	; (adr r3, 800db70 <_dtoa_r+0x2d8>)
 800d9d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9d8:	f7f2 fc80 	bl	80002dc <__adddf3>
 800d9dc:	4606      	mov	r6, r0
 800d9de:	4628      	mov	r0, r5
 800d9e0:	460f      	mov	r7, r1
 800d9e2:	f7f2 fdc7 	bl	8000574 <__aeabi_i2d>
 800d9e6:	a364      	add	r3, pc, #400	; (adr r3, 800db78 <_dtoa_r+0x2e0>)
 800d9e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9ec:	f7f2 fe2c 	bl	8000648 <__aeabi_dmul>
 800d9f0:	4602      	mov	r2, r0
 800d9f2:	460b      	mov	r3, r1
 800d9f4:	4630      	mov	r0, r6
 800d9f6:	4639      	mov	r1, r7
 800d9f8:	f7f2 fc70 	bl	80002dc <__adddf3>
 800d9fc:	4606      	mov	r6, r0
 800d9fe:	460f      	mov	r7, r1
 800da00:	f7f3 f8d2 	bl	8000ba8 <__aeabi_d2iz>
 800da04:	2200      	movs	r2, #0
 800da06:	4683      	mov	fp, r0
 800da08:	2300      	movs	r3, #0
 800da0a:	4630      	mov	r0, r6
 800da0c:	4639      	mov	r1, r7
 800da0e:	f7f3 f88d 	bl	8000b2c <__aeabi_dcmplt>
 800da12:	b148      	cbz	r0, 800da28 <_dtoa_r+0x190>
 800da14:	4658      	mov	r0, fp
 800da16:	f7f2 fdad 	bl	8000574 <__aeabi_i2d>
 800da1a:	4632      	mov	r2, r6
 800da1c:	463b      	mov	r3, r7
 800da1e:	f7f3 f87b 	bl	8000b18 <__aeabi_dcmpeq>
 800da22:	b908      	cbnz	r0, 800da28 <_dtoa_r+0x190>
 800da24:	f10b 3bff 	add.w	fp, fp, #4294967295
 800da28:	f1bb 0f16 	cmp.w	fp, #22
 800da2c:	d857      	bhi.n	800dade <_dtoa_r+0x246>
 800da2e:	4b5b      	ldr	r3, [pc, #364]	; (800db9c <_dtoa_r+0x304>)
 800da30:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800da34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da38:	ec51 0b18 	vmov	r0, r1, d8
 800da3c:	f7f3 f876 	bl	8000b2c <__aeabi_dcmplt>
 800da40:	2800      	cmp	r0, #0
 800da42:	d04e      	beq.n	800dae2 <_dtoa_r+0x24a>
 800da44:	f10b 3bff 	add.w	fp, fp, #4294967295
 800da48:	2300      	movs	r3, #0
 800da4a:	930c      	str	r3, [sp, #48]	; 0x30
 800da4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800da4e:	1b5b      	subs	r3, r3, r5
 800da50:	1e5a      	subs	r2, r3, #1
 800da52:	bf45      	ittet	mi
 800da54:	f1c3 0301 	rsbmi	r3, r3, #1
 800da58:	9305      	strmi	r3, [sp, #20]
 800da5a:	2300      	movpl	r3, #0
 800da5c:	2300      	movmi	r3, #0
 800da5e:	9206      	str	r2, [sp, #24]
 800da60:	bf54      	ite	pl
 800da62:	9305      	strpl	r3, [sp, #20]
 800da64:	9306      	strmi	r3, [sp, #24]
 800da66:	f1bb 0f00 	cmp.w	fp, #0
 800da6a:	db3c      	blt.n	800dae6 <_dtoa_r+0x24e>
 800da6c:	9b06      	ldr	r3, [sp, #24]
 800da6e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800da72:	445b      	add	r3, fp
 800da74:	9306      	str	r3, [sp, #24]
 800da76:	2300      	movs	r3, #0
 800da78:	9308      	str	r3, [sp, #32]
 800da7a:	9b07      	ldr	r3, [sp, #28]
 800da7c:	2b09      	cmp	r3, #9
 800da7e:	d868      	bhi.n	800db52 <_dtoa_r+0x2ba>
 800da80:	2b05      	cmp	r3, #5
 800da82:	bfc4      	itt	gt
 800da84:	3b04      	subgt	r3, #4
 800da86:	9307      	strgt	r3, [sp, #28]
 800da88:	9b07      	ldr	r3, [sp, #28]
 800da8a:	f1a3 0302 	sub.w	r3, r3, #2
 800da8e:	bfcc      	ite	gt
 800da90:	2500      	movgt	r5, #0
 800da92:	2501      	movle	r5, #1
 800da94:	2b03      	cmp	r3, #3
 800da96:	f200 8085 	bhi.w	800dba4 <_dtoa_r+0x30c>
 800da9a:	e8df f003 	tbb	[pc, r3]
 800da9e:	3b2e      	.short	0x3b2e
 800daa0:	5839      	.short	0x5839
 800daa2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800daa6:	441d      	add	r5, r3
 800daa8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800daac:	2b20      	cmp	r3, #32
 800daae:	bfc1      	itttt	gt
 800dab0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800dab4:	fa08 f803 	lslgt.w	r8, r8, r3
 800dab8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800dabc:	fa26 f303 	lsrgt.w	r3, r6, r3
 800dac0:	bfd6      	itet	le
 800dac2:	f1c3 0320 	rsble	r3, r3, #32
 800dac6:	ea48 0003 	orrgt.w	r0, r8, r3
 800daca:	fa06 f003 	lslle.w	r0, r6, r3
 800dace:	f7f2 fd41 	bl	8000554 <__aeabi_ui2d>
 800dad2:	2201      	movs	r2, #1
 800dad4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800dad8:	3d01      	subs	r5, #1
 800dada:	920e      	str	r2, [sp, #56]	; 0x38
 800dadc:	e76f      	b.n	800d9be <_dtoa_r+0x126>
 800dade:	2301      	movs	r3, #1
 800dae0:	e7b3      	b.n	800da4a <_dtoa_r+0x1b2>
 800dae2:	900c      	str	r0, [sp, #48]	; 0x30
 800dae4:	e7b2      	b.n	800da4c <_dtoa_r+0x1b4>
 800dae6:	9b05      	ldr	r3, [sp, #20]
 800dae8:	eba3 030b 	sub.w	r3, r3, fp
 800daec:	9305      	str	r3, [sp, #20]
 800daee:	f1cb 0300 	rsb	r3, fp, #0
 800daf2:	9308      	str	r3, [sp, #32]
 800daf4:	2300      	movs	r3, #0
 800daf6:	930b      	str	r3, [sp, #44]	; 0x2c
 800daf8:	e7bf      	b.n	800da7a <_dtoa_r+0x1e2>
 800dafa:	2300      	movs	r3, #0
 800dafc:	9309      	str	r3, [sp, #36]	; 0x24
 800dafe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db00:	2b00      	cmp	r3, #0
 800db02:	dc52      	bgt.n	800dbaa <_dtoa_r+0x312>
 800db04:	2301      	movs	r3, #1
 800db06:	9301      	str	r3, [sp, #4]
 800db08:	9304      	str	r3, [sp, #16]
 800db0a:	461a      	mov	r2, r3
 800db0c:	920a      	str	r2, [sp, #40]	; 0x28
 800db0e:	e00b      	b.n	800db28 <_dtoa_r+0x290>
 800db10:	2301      	movs	r3, #1
 800db12:	e7f3      	b.n	800dafc <_dtoa_r+0x264>
 800db14:	2300      	movs	r3, #0
 800db16:	9309      	str	r3, [sp, #36]	; 0x24
 800db18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db1a:	445b      	add	r3, fp
 800db1c:	9301      	str	r3, [sp, #4]
 800db1e:	3301      	adds	r3, #1
 800db20:	2b01      	cmp	r3, #1
 800db22:	9304      	str	r3, [sp, #16]
 800db24:	bfb8      	it	lt
 800db26:	2301      	movlt	r3, #1
 800db28:	69e0      	ldr	r0, [r4, #28]
 800db2a:	2100      	movs	r1, #0
 800db2c:	2204      	movs	r2, #4
 800db2e:	f102 0614 	add.w	r6, r2, #20
 800db32:	429e      	cmp	r6, r3
 800db34:	d93d      	bls.n	800dbb2 <_dtoa_r+0x31a>
 800db36:	6041      	str	r1, [r0, #4]
 800db38:	4620      	mov	r0, r4
 800db3a:	f000 fceb 	bl	800e514 <_Balloc>
 800db3e:	9000      	str	r0, [sp, #0]
 800db40:	2800      	cmp	r0, #0
 800db42:	d139      	bne.n	800dbb8 <_dtoa_r+0x320>
 800db44:	4b16      	ldr	r3, [pc, #88]	; (800dba0 <_dtoa_r+0x308>)
 800db46:	4602      	mov	r2, r0
 800db48:	f240 11af 	movw	r1, #431	; 0x1af
 800db4c:	e6bd      	b.n	800d8ca <_dtoa_r+0x32>
 800db4e:	2301      	movs	r3, #1
 800db50:	e7e1      	b.n	800db16 <_dtoa_r+0x27e>
 800db52:	2501      	movs	r5, #1
 800db54:	2300      	movs	r3, #0
 800db56:	9307      	str	r3, [sp, #28]
 800db58:	9509      	str	r5, [sp, #36]	; 0x24
 800db5a:	f04f 33ff 	mov.w	r3, #4294967295
 800db5e:	9301      	str	r3, [sp, #4]
 800db60:	9304      	str	r3, [sp, #16]
 800db62:	2200      	movs	r2, #0
 800db64:	2312      	movs	r3, #18
 800db66:	e7d1      	b.n	800db0c <_dtoa_r+0x274>
 800db68:	636f4361 	.word	0x636f4361
 800db6c:	3fd287a7 	.word	0x3fd287a7
 800db70:	8b60c8b3 	.word	0x8b60c8b3
 800db74:	3fc68a28 	.word	0x3fc68a28
 800db78:	509f79fb 	.word	0x509f79fb
 800db7c:	3fd34413 	.word	0x3fd34413
 800db80:	08013715 	.word	0x08013715
 800db84:	0801372c 	.word	0x0801372c
 800db88:	7ff00000 	.word	0x7ff00000
 800db8c:	08013711 	.word	0x08013711
 800db90:	08013708 	.word	0x08013708
 800db94:	080136e5 	.word	0x080136e5
 800db98:	3ff80000 	.word	0x3ff80000
 800db9c:	08013818 	.word	0x08013818
 800dba0:	08013784 	.word	0x08013784
 800dba4:	2301      	movs	r3, #1
 800dba6:	9309      	str	r3, [sp, #36]	; 0x24
 800dba8:	e7d7      	b.n	800db5a <_dtoa_r+0x2c2>
 800dbaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dbac:	9301      	str	r3, [sp, #4]
 800dbae:	9304      	str	r3, [sp, #16]
 800dbb0:	e7ba      	b.n	800db28 <_dtoa_r+0x290>
 800dbb2:	3101      	adds	r1, #1
 800dbb4:	0052      	lsls	r2, r2, #1
 800dbb6:	e7ba      	b.n	800db2e <_dtoa_r+0x296>
 800dbb8:	69e3      	ldr	r3, [r4, #28]
 800dbba:	9a00      	ldr	r2, [sp, #0]
 800dbbc:	601a      	str	r2, [r3, #0]
 800dbbe:	9b04      	ldr	r3, [sp, #16]
 800dbc0:	2b0e      	cmp	r3, #14
 800dbc2:	f200 80a8 	bhi.w	800dd16 <_dtoa_r+0x47e>
 800dbc6:	2d00      	cmp	r5, #0
 800dbc8:	f000 80a5 	beq.w	800dd16 <_dtoa_r+0x47e>
 800dbcc:	f1bb 0f00 	cmp.w	fp, #0
 800dbd0:	dd38      	ble.n	800dc44 <_dtoa_r+0x3ac>
 800dbd2:	4bc0      	ldr	r3, [pc, #768]	; (800ded4 <_dtoa_r+0x63c>)
 800dbd4:	f00b 020f 	and.w	r2, fp, #15
 800dbd8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dbdc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800dbe0:	e9d3 6700 	ldrd	r6, r7, [r3]
 800dbe4:	ea4f 182b 	mov.w	r8, fp, asr #4
 800dbe8:	d019      	beq.n	800dc1e <_dtoa_r+0x386>
 800dbea:	4bbb      	ldr	r3, [pc, #748]	; (800ded8 <_dtoa_r+0x640>)
 800dbec:	ec51 0b18 	vmov	r0, r1, d8
 800dbf0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800dbf4:	f7f2 fe52 	bl	800089c <__aeabi_ddiv>
 800dbf8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dbfc:	f008 080f 	and.w	r8, r8, #15
 800dc00:	2503      	movs	r5, #3
 800dc02:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800ded8 <_dtoa_r+0x640>
 800dc06:	f1b8 0f00 	cmp.w	r8, #0
 800dc0a:	d10a      	bne.n	800dc22 <_dtoa_r+0x38a>
 800dc0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dc10:	4632      	mov	r2, r6
 800dc12:	463b      	mov	r3, r7
 800dc14:	f7f2 fe42 	bl	800089c <__aeabi_ddiv>
 800dc18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dc1c:	e02b      	b.n	800dc76 <_dtoa_r+0x3de>
 800dc1e:	2502      	movs	r5, #2
 800dc20:	e7ef      	b.n	800dc02 <_dtoa_r+0x36a>
 800dc22:	f018 0f01 	tst.w	r8, #1
 800dc26:	d008      	beq.n	800dc3a <_dtoa_r+0x3a2>
 800dc28:	4630      	mov	r0, r6
 800dc2a:	4639      	mov	r1, r7
 800dc2c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800dc30:	f7f2 fd0a 	bl	8000648 <__aeabi_dmul>
 800dc34:	3501      	adds	r5, #1
 800dc36:	4606      	mov	r6, r0
 800dc38:	460f      	mov	r7, r1
 800dc3a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800dc3e:	f109 0908 	add.w	r9, r9, #8
 800dc42:	e7e0      	b.n	800dc06 <_dtoa_r+0x36e>
 800dc44:	f000 809f 	beq.w	800dd86 <_dtoa_r+0x4ee>
 800dc48:	f1cb 0600 	rsb	r6, fp, #0
 800dc4c:	4ba1      	ldr	r3, [pc, #644]	; (800ded4 <_dtoa_r+0x63c>)
 800dc4e:	4fa2      	ldr	r7, [pc, #648]	; (800ded8 <_dtoa_r+0x640>)
 800dc50:	f006 020f 	and.w	r2, r6, #15
 800dc54:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dc58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc5c:	ec51 0b18 	vmov	r0, r1, d8
 800dc60:	f7f2 fcf2 	bl	8000648 <__aeabi_dmul>
 800dc64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dc68:	1136      	asrs	r6, r6, #4
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	2502      	movs	r5, #2
 800dc6e:	2e00      	cmp	r6, #0
 800dc70:	d17e      	bne.n	800dd70 <_dtoa_r+0x4d8>
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d1d0      	bne.n	800dc18 <_dtoa_r+0x380>
 800dc76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dc78:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	f000 8084 	beq.w	800dd8a <_dtoa_r+0x4f2>
 800dc82:	4b96      	ldr	r3, [pc, #600]	; (800dedc <_dtoa_r+0x644>)
 800dc84:	2200      	movs	r2, #0
 800dc86:	4640      	mov	r0, r8
 800dc88:	4649      	mov	r1, r9
 800dc8a:	f7f2 ff4f 	bl	8000b2c <__aeabi_dcmplt>
 800dc8e:	2800      	cmp	r0, #0
 800dc90:	d07b      	beq.n	800dd8a <_dtoa_r+0x4f2>
 800dc92:	9b04      	ldr	r3, [sp, #16]
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d078      	beq.n	800dd8a <_dtoa_r+0x4f2>
 800dc98:	9b01      	ldr	r3, [sp, #4]
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	dd39      	ble.n	800dd12 <_dtoa_r+0x47a>
 800dc9e:	4b90      	ldr	r3, [pc, #576]	; (800dee0 <_dtoa_r+0x648>)
 800dca0:	2200      	movs	r2, #0
 800dca2:	4640      	mov	r0, r8
 800dca4:	4649      	mov	r1, r9
 800dca6:	f7f2 fccf 	bl	8000648 <__aeabi_dmul>
 800dcaa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dcae:	9e01      	ldr	r6, [sp, #4]
 800dcb0:	f10b 37ff 	add.w	r7, fp, #4294967295
 800dcb4:	3501      	adds	r5, #1
 800dcb6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800dcba:	4628      	mov	r0, r5
 800dcbc:	f7f2 fc5a 	bl	8000574 <__aeabi_i2d>
 800dcc0:	4642      	mov	r2, r8
 800dcc2:	464b      	mov	r3, r9
 800dcc4:	f7f2 fcc0 	bl	8000648 <__aeabi_dmul>
 800dcc8:	4b86      	ldr	r3, [pc, #536]	; (800dee4 <_dtoa_r+0x64c>)
 800dcca:	2200      	movs	r2, #0
 800dccc:	f7f2 fb06 	bl	80002dc <__adddf3>
 800dcd0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800dcd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dcd8:	9303      	str	r3, [sp, #12]
 800dcda:	2e00      	cmp	r6, #0
 800dcdc:	d158      	bne.n	800dd90 <_dtoa_r+0x4f8>
 800dcde:	4b82      	ldr	r3, [pc, #520]	; (800dee8 <_dtoa_r+0x650>)
 800dce0:	2200      	movs	r2, #0
 800dce2:	4640      	mov	r0, r8
 800dce4:	4649      	mov	r1, r9
 800dce6:	f7f2 faf7 	bl	80002d8 <__aeabi_dsub>
 800dcea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dcee:	4680      	mov	r8, r0
 800dcf0:	4689      	mov	r9, r1
 800dcf2:	f7f2 ff39 	bl	8000b68 <__aeabi_dcmpgt>
 800dcf6:	2800      	cmp	r0, #0
 800dcf8:	f040 8296 	bne.w	800e228 <_dtoa_r+0x990>
 800dcfc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800dd00:	4640      	mov	r0, r8
 800dd02:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dd06:	4649      	mov	r1, r9
 800dd08:	f7f2 ff10 	bl	8000b2c <__aeabi_dcmplt>
 800dd0c:	2800      	cmp	r0, #0
 800dd0e:	f040 8289 	bne.w	800e224 <_dtoa_r+0x98c>
 800dd12:	ed8d 8b02 	vstr	d8, [sp, #8]
 800dd16:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	f2c0 814e 	blt.w	800dfba <_dtoa_r+0x722>
 800dd1e:	f1bb 0f0e 	cmp.w	fp, #14
 800dd22:	f300 814a 	bgt.w	800dfba <_dtoa_r+0x722>
 800dd26:	4b6b      	ldr	r3, [pc, #428]	; (800ded4 <_dtoa_r+0x63c>)
 800dd28:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800dd2c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800dd30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	f280 80dc 	bge.w	800def0 <_dtoa_r+0x658>
 800dd38:	9b04      	ldr	r3, [sp, #16]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	f300 80d8 	bgt.w	800def0 <_dtoa_r+0x658>
 800dd40:	f040 826f 	bne.w	800e222 <_dtoa_r+0x98a>
 800dd44:	4b68      	ldr	r3, [pc, #416]	; (800dee8 <_dtoa_r+0x650>)
 800dd46:	2200      	movs	r2, #0
 800dd48:	4640      	mov	r0, r8
 800dd4a:	4649      	mov	r1, r9
 800dd4c:	f7f2 fc7c 	bl	8000648 <__aeabi_dmul>
 800dd50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dd54:	f7f2 fefe 	bl	8000b54 <__aeabi_dcmpge>
 800dd58:	9e04      	ldr	r6, [sp, #16]
 800dd5a:	4637      	mov	r7, r6
 800dd5c:	2800      	cmp	r0, #0
 800dd5e:	f040 8245 	bne.w	800e1ec <_dtoa_r+0x954>
 800dd62:	9d00      	ldr	r5, [sp, #0]
 800dd64:	2331      	movs	r3, #49	; 0x31
 800dd66:	f805 3b01 	strb.w	r3, [r5], #1
 800dd6a:	f10b 0b01 	add.w	fp, fp, #1
 800dd6e:	e241      	b.n	800e1f4 <_dtoa_r+0x95c>
 800dd70:	07f2      	lsls	r2, r6, #31
 800dd72:	d505      	bpl.n	800dd80 <_dtoa_r+0x4e8>
 800dd74:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dd78:	f7f2 fc66 	bl	8000648 <__aeabi_dmul>
 800dd7c:	3501      	adds	r5, #1
 800dd7e:	2301      	movs	r3, #1
 800dd80:	1076      	asrs	r6, r6, #1
 800dd82:	3708      	adds	r7, #8
 800dd84:	e773      	b.n	800dc6e <_dtoa_r+0x3d6>
 800dd86:	2502      	movs	r5, #2
 800dd88:	e775      	b.n	800dc76 <_dtoa_r+0x3de>
 800dd8a:	9e04      	ldr	r6, [sp, #16]
 800dd8c:	465f      	mov	r7, fp
 800dd8e:	e792      	b.n	800dcb6 <_dtoa_r+0x41e>
 800dd90:	9900      	ldr	r1, [sp, #0]
 800dd92:	4b50      	ldr	r3, [pc, #320]	; (800ded4 <_dtoa_r+0x63c>)
 800dd94:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dd98:	4431      	add	r1, r6
 800dd9a:	9102      	str	r1, [sp, #8]
 800dd9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dd9e:	eeb0 9a47 	vmov.f32	s18, s14
 800dda2:	eef0 9a67 	vmov.f32	s19, s15
 800dda6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ddaa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ddae:	2900      	cmp	r1, #0
 800ddb0:	d044      	beq.n	800de3c <_dtoa_r+0x5a4>
 800ddb2:	494e      	ldr	r1, [pc, #312]	; (800deec <_dtoa_r+0x654>)
 800ddb4:	2000      	movs	r0, #0
 800ddb6:	f7f2 fd71 	bl	800089c <__aeabi_ddiv>
 800ddba:	ec53 2b19 	vmov	r2, r3, d9
 800ddbe:	f7f2 fa8b 	bl	80002d8 <__aeabi_dsub>
 800ddc2:	9d00      	ldr	r5, [sp, #0]
 800ddc4:	ec41 0b19 	vmov	d9, r0, r1
 800ddc8:	4649      	mov	r1, r9
 800ddca:	4640      	mov	r0, r8
 800ddcc:	f7f2 feec 	bl	8000ba8 <__aeabi_d2iz>
 800ddd0:	4606      	mov	r6, r0
 800ddd2:	f7f2 fbcf 	bl	8000574 <__aeabi_i2d>
 800ddd6:	4602      	mov	r2, r0
 800ddd8:	460b      	mov	r3, r1
 800ddda:	4640      	mov	r0, r8
 800dddc:	4649      	mov	r1, r9
 800ddde:	f7f2 fa7b 	bl	80002d8 <__aeabi_dsub>
 800dde2:	3630      	adds	r6, #48	; 0x30
 800dde4:	f805 6b01 	strb.w	r6, [r5], #1
 800dde8:	ec53 2b19 	vmov	r2, r3, d9
 800ddec:	4680      	mov	r8, r0
 800ddee:	4689      	mov	r9, r1
 800ddf0:	f7f2 fe9c 	bl	8000b2c <__aeabi_dcmplt>
 800ddf4:	2800      	cmp	r0, #0
 800ddf6:	d164      	bne.n	800dec2 <_dtoa_r+0x62a>
 800ddf8:	4642      	mov	r2, r8
 800ddfa:	464b      	mov	r3, r9
 800ddfc:	4937      	ldr	r1, [pc, #220]	; (800dedc <_dtoa_r+0x644>)
 800ddfe:	2000      	movs	r0, #0
 800de00:	f7f2 fa6a 	bl	80002d8 <__aeabi_dsub>
 800de04:	ec53 2b19 	vmov	r2, r3, d9
 800de08:	f7f2 fe90 	bl	8000b2c <__aeabi_dcmplt>
 800de0c:	2800      	cmp	r0, #0
 800de0e:	f040 80b6 	bne.w	800df7e <_dtoa_r+0x6e6>
 800de12:	9b02      	ldr	r3, [sp, #8]
 800de14:	429d      	cmp	r5, r3
 800de16:	f43f af7c 	beq.w	800dd12 <_dtoa_r+0x47a>
 800de1a:	4b31      	ldr	r3, [pc, #196]	; (800dee0 <_dtoa_r+0x648>)
 800de1c:	ec51 0b19 	vmov	r0, r1, d9
 800de20:	2200      	movs	r2, #0
 800de22:	f7f2 fc11 	bl	8000648 <__aeabi_dmul>
 800de26:	4b2e      	ldr	r3, [pc, #184]	; (800dee0 <_dtoa_r+0x648>)
 800de28:	ec41 0b19 	vmov	d9, r0, r1
 800de2c:	2200      	movs	r2, #0
 800de2e:	4640      	mov	r0, r8
 800de30:	4649      	mov	r1, r9
 800de32:	f7f2 fc09 	bl	8000648 <__aeabi_dmul>
 800de36:	4680      	mov	r8, r0
 800de38:	4689      	mov	r9, r1
 800de3a:	e7c5      	b.n	800ddc8 <_dtoa_r+0x530>
 800de3c:	ec51 0b17 	vmov	r0, r1, d7
 800de40:	f7f2 fc02 	bl	8000648 <__aeabi_dmul>
 800de44:	9b02      	ldr	r3, [sp, #8]
 800de46:	9d00      	ldr	r5, [sp, #0]
 800de48:	930f      	str	r3, [sp, #60]	; 0x3c
 800de4a:	ec41 0b19 	vmov	d9, r0, r1
 800de4e:	4649      	mov	r1, r9
 800de50:	4640      	mov	r0, r8
 800de52:	f7f2 fea9 	bl	8000ba8 <__aeabi_d2iz>
 800de56:	4606      	mov	r6, r0
 800de58:	f7f2 fb8c 	bl	8000574 <__aeabi_i2d>
 800de5c:	3630      	adds	r6, #48	; 0x30
 800de5e:	4602      	mov	r2, r0
 800de60:	460b      	mov	r3, r1
 800de62:	4640      	mov	r0, r8
 800de64:	4649      	mov	r1, r9
 800de66:	f7f2 fa37 	bl	80002d8 <__aeabi_dsub>
 800de6a:	f805 6b01 	strb.w	r6, [r5], #1
 800de6e:	9b02      	ldr	r3, [sp, #8]
 800de70:	429d      	cmp	r5, r3
 800de72:	4680      	mov	r8, r0
 800de74:	4689      	mov	r9, r1
 800de76:	f04f 0200 	mov.w	r2, #0
 800de7a:	d124      	bne.n	800dec6 <_dtoa_r+0x62e>
 800de7c:	4b1b      	ldr	r3, [pc, #108]	; (800deec <_dtoa_r+0x654>)
 800de7e:	ec51 0b19 	vmov	r0, r1, d9
 800de82:	f7f2 fa2b 	bl	80002dc <__adddf3>
 800de86:	4602      	mov	r2, r0
 800de88:	460b      	mov	r3, r1
 800de8a:	4640      	mov	r0, r8
 800de8c:	4649      	mov	r1, r9
 800de8e:	f7f2 fe6b 	bl	8000b68 <__aeabi_dcmpgt>
 800de92:	2800      	cmp	r0, #0
 800de94:	d173      	bne.n	800df7e <_dtoa_r+0x6e6>
 800de96:	ec53 2b19 	vmov	r2, r3, d9
 800de9a:	4914      	ldr	r1, [pc, #80]	; (800deec <_dtoa_r+0x654>)
 800de9c:	2000      	movs	r0, #0
 800de9e:	f7f2 fa1b 	bl	80002d8 <__aeabi_dsub>
 800dea2:	4602      	mov	r2, r0
 800dea4:	460b      	mov	r3, r1
 800dea6:	4640      	mov	r0, r8
 800dea8:	4649      	mov	r1, r9
 800deaa:	f7f2 fe3f 	bl	8000b2c <__aeabi_dcmplt>
 800deae:	2800      	cmp	r0, #0
 800deb0:	f43f af2f 	beq.w	800dd12 <_dtoa_r+0x47a>
 800deb4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800deb6:	1e6b      	subs	r3, r5, #1
 800deb8:	930f      	str	r3, [sp, #60]	; 0x3c
 800deba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800debe:	2b30      	cmp	r3, #48	; 0x30
 800dec0:	d0f8      	beq.n	800deb4 <_dtoa_r+0x61c>
 800dec2:	46bb      	mov	fp, r7
 800dec4:	e04a      	b.n	800df5c <_dtoa_r+0x6c4>
 800dec6:	4b06      	ldr	r3, [pc, #24]	; (800dee0 <_dtoa_r+0x648>)
 800dec8:	f7f2 fbbe 	bl	8000648 <__aeabi_dmul>
 800decc:	4680      	mov	r8, r0
 800dece:	4689      	mov	r9, r1
 800ded0:	e7bd      	b.n	800de4e <_dtoa_r+0x5b6>
 800ded2:	bf00      	nop
 800ded4:	08013818 	.word	0x08013818
 800ded8:	080137f0 	.word	0x080137f0
 800dedc:	3ff00000 	.word	0x3ff00000
 800dee0:	40240000 	.word	0x40240000
 800dee4:	401c0000 	.word	0x401c0000
 800dee8:	40140000 	.word	0x40140000
 800deec:	3fe00000 	.word	0x3fe00000
 800def0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800def4:	9d00      	ldr	r5, [sp, #0]
 800def6:	4642      	mov	r2, r8
 800def8:	464b      	mov	r3, r9
 800defa:	4630      	mov	r0, r6
 800defc:	4639      	mov	r1, r7
 800defe:	f7f2 fccd 	bl	800089c <__aeabi_ddiv>
 800df02:	f7f2 fe51 	bl	8000ba8 <__aeabi_d2iz>
 800df06:	9001      	str	r0, [sp, #4]
 800df08:	f7f2 fb34 	bl	8000574 <__aeabi_i2d>
 800df0c:	4642      	mov	r2, r8
 800df0e:	464b      	mov	r3, r9
 800df10:	f7f2 fb9a 	bl	8000648 <__aeabi_dmul>
 800df14:	4602      	mov	r2, r0
 800df16:	460b      	mov	r3, r1
 800df18:	4630      	mov	r0, r6
 800df1a:	4639      	mov	r1, r7
 800df1c:	f7f2 f9dc 	bl	80002d8 <__aeabi_dsub>
 800df20:	9e01      	ldr	r6, [sp, #4]
 800df22:	9f04      	ldr	r7, [sp, #16]
 800df24:	3630      	adds	r6, #48	; 0x30
 800df26:	f805 6b01 	strb.w	r6, [r5], #1
 800df2a:	9e00      	ldr	r6, [sp, #0]
 800df2c:	1bae      	subs	r6, r5, r6
 800df2e:	42b7      	cmp	r7, r6
 800df30:	4602      	mov	r2, r0
 800df32:	460b      	mov	r3, r1
 800df34:	d134      	bne.n	800dfa0 <_dtoa_r+0x708>
 800df36:	f7f2 f9d1 	bl	80002dc <__adddf3>
 800df3a:	4642      	mov	r2, r8
 800df3c:	464b      	mov	r3, r9
 800df3e:	4606      	mov	r6, r0
 800df40:	460f      	mov	r7, r1
 800df42:	f7f2 fe11 	bl	8000b68 <__aeabi_dcmpgt>
 800df46:	b9c8      	cbnz	r0, 800df7c <_dtoa_r+0x6e4>
 800df48:	4642      	mov	r2, r8
 800df4a:	464b      	mov	r3, r9
 800df4c:	4630      	mov	r0, r6
 800df4e:	4639      	mov	r1, r7
 800df50:	f7f2 fde2 	bl	8000b18 <__aeabi_dcmpeq>
 800df54:	b110      	cbz	r0, 800df5c <_dtoa_r+0x6c4>
 800df56:	9b01      	ldr	r3, [sp, #4]
 800df58:	07db      	lsls	r3, r3, #31
 800df5a:	d40f      	bmi.n	800df7c <_dtoa_r+0x6e4>
 800df5c:	4651      	mov	r1, sl
 800df5e:	4620      	mov	r0, r4
 800df60:	f000 fb18 	bl	800e594 <_Bfree>
 800df64:	2300      	movs	r3, #0
 800df66:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800df68:	702b      	strb	r3, [r5, #0]
 800df6a:	f10b 0301 	add.w	r3, fp, #1
 800df6e:	6013      	str	r3, [r2, #0]
 800df70:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800df72:	2b00      	cmp	r3, #0
 800df74:	f43f ace2 	beq.w	800d93c <_dtoa_r+0xa4>
 800df78:	601d      	str	r5, [r3, #0]
 800df7a:	e4df      	b.n	800d93c <_dtoa_r+0xa4>
 800df7c:	465f      	mov	r7, fp
 800df7e:	462b      	mov	r3, r5
 800df80:	461d      	mov	r5, r3
 800df82:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800df86:	2a39      	cmp	r2, #57	; 0x39
 800df88:	d106      	bne.n	800df98 <_dtoa_r+0x700>
 800df8a:	9a00      	ldr	r2, [sp, #0]
 800df8c:	429a      	cmp	r2, r3
 800df8e:	d1f7      	bne.n	800df80 <_dtoa_r+0x6e8>
 800df90:	9900      	ldr	r1, [sp, #0]
 800df92:	2230      	movs	r2, #48	; 0x30
 800df94:	3701      	adds	r7, #1
 800df96:	700a      	strb	r2, [r1, #0]
 800df98:	781a      	ldrb	r2, [r3, #0]
 800df9a:	3201      	adds	r2, #1
 800df9c:	701a      	strb	r2, [r3, #0]
 800df9e:	e790      	b.n	800dec2 <_dtoa_r+0x62a>
 800dfa0:	4ba3      	ldr	r3, [pc, #652]	; (800e230 <_dtoa_r+0x998>)
 800dfa2:	2200      	movs	r2, #0
 800dfa4:	f7f2 fb50 	bl	8000648 <__aeabi_dmul>
 800dfa8:	2200      	movs	r2, #0
 800dfaa:	2300      	movs	r3, #0
 800dfac:	4606      	mov	r6, r0
 800dfae:	460f      	mov	r7, r1
 800dfb0:	f7f2 fdb2 	bl	8000b18 <__aeabi_dcmpeq>
 800dfb4:	2800      	cmp	r0, #0
 800dfb6:	d09e      	beq.n	800def6 <_dtoa_r+0x65e>
 800dfb8:	e7d0      	b.n	800df5c <_dtoa_r+0x6c4>
 800dfba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dfbc:	2a00      	cmp	r2, #0
 800dfbe:	f000 80ca 	beq.w	800e156 <_dtoa_r+0x8be>
 800dfc2:	9a07      	ldr	r2, [sp, #28]
 800dfc4:	2a01      	cmp	r2, #1
 800dfc6:	f300 80ad 	bgt.w	800e124 <_dtoa_r+0x88c>
 800dfca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dfcc:	2a00      	cmp	r2, #0
 800dfce:	f000 80a5 	beq.w	800e11c <_dtoa_r+0x884>
 800dfd2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800dfd6:	9e08      	ldr	r6, [sp, #32]
 800dfd8:	9d05      	ldr	r5, [sp, #20]
 800dfda:	9a05      	ldr	r2, [sp, #20]
 800dfdc:	441a      	add	r2, r3
 800dfde:	9205      	str	r2, [sp, #20]
 800dfe0:	9a06      	ldr	r2, [sp, #24]
 800dfe2:	2101      	movs	r1, #1
 800dfe4:	441a      	add	r2, r3
 800dfe6:	4620      	mov	r0, r4
 800dfe8:	9206      	str	r2, [sp, #24]
 800dfea:	f000 fb89 	bl	800e700 <__i2b>
 800dfee:	4607      	mov	r7, r0
 800dff0:	b165      	cbz	r5, 800e00c <_dtoa_r+0x774>
 800dff2:	9b06      	ldr	r3, [sp, #24]
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	dd09      	ble.n	800e00c <_dtoa_r+0x774>
 800dff8:	42ab      	cmp	r3, r5
 800dffa:	9a05      	ldr	r2, [sp, #20]
 800dffc:	bfa8      	it	ge
 800dffe:	462b      	movge	r3, r5
 800e000:	1ad2      	subs	r2, r2, r3
 800e002:	9205      	str	r2, [sp, #20]
 800e004:	9a06      	ldr	r2, [sp, #24]
 800e006:	1aed      	subs	r5, r5, r3
 800e008:	1ad3      	subs	r3, r2, r3
 800e00a:	9306      	str	r3, [sp, #24]
 800e00c:	9b08      	ldr	r3, [sp, #32]
 800e00e:	b1f3      	cbz	r3, 800e04e <_dtoa_r+0x7b6>
 800e010:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e012:	2b00      	cmp	r3, #0
 800e014:	f000 80a3 	beq.w	800e15e <_dtoa_r+0x8c6>
 800e018:	2e00      	cmp	r6, #0
 800e01a:	dd10      	ble.n	800e03e <_dtoa_r+0x7a6>
 800e01c:	4639      	mov	r1, r7
 800e01e:	4632      	mov	r2, r6
 800e020:	4620      	mov	r0, r4
 800e022:	f000 fc2d 	bl	800e880 <__pow5mult>
 800e026:	4652      	mov	r2, sl
 800e028:	4601      	mov	r1, r0
 800e02a:	4607      	mov	r7, r0
 800e02c:	4620      	mov	r0, r4
 800e02e:	f000 fb7d 	bl	800e72c <__multiply>
 800e032:	4651      	mov	r1, sl
 800e034:	4680      	mov	r8, r0
 800e036:	4620      	mov	r0, r4
 800e038:	f000 faac 	bl	800e594 <_Bfree>
 800e03c:	46c2      	mov	sl, r8
 800e03e:	9b08      	ldr	r3, [sp, #32]
 800e040:	1b9a      	subs	r2, r3, r6
 800e042:	d004      	beq.n	800e04e <_dtoa_r+0x7b6>
 800e044:	4651      	mov	r1, sl
 800e046:	4620      	mov	r0, r4
 800e048:	f000 fc1a 	bl	800e880 <__pow5mult>
 800e04c:	4682      	mov	sl, r0
 800e04e:	2101      	movs	r1, #1
 800e050:	4620      	mov	r0, r4
 800e052:	f000 fb55 	bl	800e700 <__i2b>
 800e056:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e058:	2b00      	cmp	r3, #0
 800e05a:	4606      	mov	r6, r0
 800e05c:	f340 8081 	ble.w	800e162 <_dtoa_r+0x8ca>
 800e060:	461a      	mov	r2, r3
 800e062:	4601      	mov	r1, r0
 800e064:	4620      	mov	r0, r4
 800e066:	f000 fc0b 	bl	800e880 <__pow5mult>
 800e06a:	9b07      	ldr	r3, [sp, #28]
 800e06c:	2b01      	cmp	r3, #1
 800e06e:	4606      	mov	r6, r0
 800e070:	dd7a      	ble.n	800e168 <_dtoa_r+0x8d0>
 800e072:	f04f 0800 	mov.w	r8, #0
 800e076:	6933      	ldr	r3, [r6, #16]
 800e078:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e07c:	6918      	ldr	r0, [r3, #16]
 800e07e:	f000 faf1 	bl	800e664 <__hi0bits>
 800e082:	f1c0 0020 	rsb	r0, r0, #32
 800e086:	9b06      	ldr	r3, [sp, #24]
 800e088:	4418      	add	r0, r3
 800e08a:	f010 001f 	ands.w	r0, r0, #31
 800e08e:	f000 8094 	beq.w	800e1ba <_dtoa_r+0x922>
 800e092:	f1c0 0320 	rsb	r3, r0, #32
 800e096:	2b04      	cmp	r3, #4
 800e098:	f340 8085 	ble.w	800e1a6 <_dtoa_r+0x90e>
 800e09c:	9b05      	ldr	r3, [sp, #20]
 800e09e:	f1c0 001c 	rsb	r0, r0, #28
 800e0a2:	4403      	add	r3, r0
 800e0a4:	9305      	str	r3, [sp, #20]
 800e0a6:	9b06      	ldr	r3, [sp, #24]
 800e0a8:	4403      	add	r3, r0
 800e0aa:	4405      	add	r5, r0
 800e0ac:	9306      	str	r3, [sp, #24]
 800e0ae:	9b05      	ldr	r3, [sp, #20]
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	dd05      	ble.n	800e0c0 <_dtoa_r+0x828>
 800e0b4:	4651      	mov	r1, sl
 800e0b6:	461a      	mov	r2, r3
 800e0b8:	4620      	mov	r0, r4
 800e0ba:	f000 fc3b 	bl	800e934 <__lshift>
 800e0be:	4682      	mov	sl, r0
 800e0c0:	9b06      	ldr	r3, [sp, #24]
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	dd05      	ble.n	800e0d2 <_dtoa_r+0x83a>
 800e0c6:	4631      	mov	r1, r6
 800e0c8:	461a      	mov	r2, r3
 800e0ca:	4620      	mov	r0, r4
 800e0cc:	f000 fc32 	bl	800e934 <__lshift>
 800e0d0:	4606      	mov	r6, r0
 800e0d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d072      	beq.n	800e1be <_dtoa_r+0x926>
 800e0d8:	4631      	mov	r1, r6
 800e0da:	4650      	mov	r0, sl
 800e0dc:	f000 fc96 	bl	800ea0c <__mcmp>
 800e0e0:	2800      	cmp	r0, #0
 800e0e2:	da6c      	bge.n	800e1be <_dtoa_r+0x926>
 800e0e4:	2300      	movs	r3, #0
 800e0e6:	4651      	mov	r1, sl
 800e0e8:	220a      	movs	r2, #10
 800e0ea:	4620      	mov	r0, r4
 800e0ec:	f000 fa74 	bl	800e5d8 <__multadd>
 800e0f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e0f2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e0f6:	4682      	mov	sl, r0
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	f000 81b0 	beq.w	800e45e <_dtoa_r+0xbc6>
 800e0fe:	2300      	movs	r3, #0
 800e100:	4639      	mov	r1, r7
 800e102:	220a      	movs	r2, #10
 800e104:	4620      	mov	r0, r4
 800e106:	f000 fa67 	bl	800e5d8 <__multadd>
 800e10a:	9b01      	ldr	r3, [sp, #4]
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	4607      	mov	r7, r0
 800e110:	f300 8096 	bgt.w	800e240 <_dtoa_r+0x9a8>
 800e114:	9b07      	ldr	r3, [sp, #28]
 800e116:	2b02      	cmp	r3, #2
 800e118:	dc59      	bgt.n	800e1ce <_dtoa_r+0x936>
 800e11a:	e091      	b.n	800e240 <_dtoa_r+0x9a8>
 800e11c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e11e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e122:	e758      	b.n	800dfd6 <_dtoa_r+0x73e>
 800e124:	9b04      	ldr	r3, [sp, #16]
 800e126:	1e5e      	subs	r6, r3, #1
 800e128:	9b08      	ldr	r3, [sp, #32]
 800e12a:	42b3      	cmp	r3, r6
 800e12c:	bfbf      	itttt	lt
 800e12e:	9b08      	ldrlt	r3, [sp, #32]
 800e130:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800e132:	9608      	strlt	r6, [sp, #32]
 800e134:	1af3      	sublt	r3, r6, r3
 800e136:	bfb4      	ite	lt
 800e138:	18d2      	addlt	r2, r2, r3
 800e13a:	1b9e      	subge	r6, r3, r6
 800e13c:	9b04      	ldr	r3, [sp, #16]
 800e13e:	bfbc      	itt	lt
 800e140:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800e142:	2600      	movlt	r6, #0
 800e144:	2b00      	cmp	r3, #0
 800e146:	bfb7      	itett	lt
 800e148:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800e14c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800e150:	1a9d      	sublt	r5, r3, r2
 800e152:	2300      	movlt	r3, #0
 800e154:	e741      	b.n	800dfda <_dtoa_r+0x742>
 800e156:	9e08      	ldr	r6, [sp, #32]
 800e158:	9d05      	ldr	r5, [sp, #20]
 800e15a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800e15c:	e748      	b.n	800dff0 <_dtoa_r+0x758>
 800e15e:	9a08      	ldr	r2, [sp, #32]
 800e160:	e770      	b.n	800e044 <_dtoa_r+0x7ac>
 800e162:	9b07      	ldr	r3, [sp, #28]
 800e164:	2b01      	cmp	r3, #1
 800e166:	dc19      	bgt.n	800e19c <_dtoa_r+0x904>
 800e168:	9b02      	ldr	r3, [sp, #8]
 800e16a:	b9bb      	cbnz	r3, 800e19c <_dtoa_r+0x904>
 800e16c:	9b03      	ldr	r3, [sp, #12]
 800e16e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e172:	b99b      	cbnz	r3, 800e19c <_dtoa_r+0x904>
 800e174:	9b03      	ldr	r3, [sp, #12]
 800e176:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e17a:	0d1b      	lsrs	r3, r3, #20
 800e17c:	051b      	lsls	r3, r3, #20
 800e17e:	b183      	cbz	r3, 800e1a2 <_dtoa_r+0x90a>
 800e180:	9b05      	ldr	r3, [sp, #20]
 800e182:	3301      	adds	r3, #1
 800e184:	9305      	str	r3, [sp, #20]
 800e186:	9b06      	ldr	r3, [sp, #24]
 800e188:	3301      	adds	r3, #1
 800e18a:	9306      	str	r3, [sp, #24]
 800e18c:	f04f 0801 	mov.w	r8, #1
 800e190:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e192:	2b00      	cmp	r3, #0
 800e194:	f47f af6f 	bne.w	800e076 <_dtoa_r+0x7de>
 800e198:	2001      	movs	r0, #1
 800e19a:	e774      	b.n	800e086 <_dtoa_r+0x7ee>
 800e19c:	f04f 0800 	mov.w	r8, #0
 800e1a0:	e7f6      	b.n	800e190 <_dtoa_r+0x8f8>
 800e1a2:	4698      	mov	r8, r3
 800e1a4:	e7f4      	b.n	800e190 <_dtoa_r+0x8f8>
 800e1a6:	d082      	beq.n	800e0ae <_dtoa_r+0x816>
 800e1a8:	9a05      	ldr	r2, [sp, #20]
 800e1aa:	331c      	adds	r3, #28
 800e1ac:	441a      	add	r2, r3
 800e1ae:	9205      	str	r2, [sp, #20]
 800e1b0:	9a06      	ldr	r2, [sp, #24]
 800e1b2:	441a      	add	r2, r3
 800e1b4:	441d      	add	r5, r3
 800e1b6:	9206      	str	r2, [sp, #24]
 800e1b8:	e779      	b.n	800e0ae <_dtoa_r+0x816>
 800e1ba:	4603      	mov	r3, r0
 800e1bc:	e7f4      	b.n	800e1a8 <_dtoa_r+0x910>
 800e1be:	9b04      	ldr	r3, [sp, #16]
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	dc37      	bgt.n	800e234 <_dtoa_r+0x99c>
 800e1c4:	9b07      	ldr	r3, [sp, #28]
 800e1c6:	2b02      	cmp	r3, #2
 800e1c8:	dd34      	ble.n	800e234 <_dtoa_r+0x99c>
 800e1ca:	9b04      	ldr	r3, [sp, #16]
 800e1cc:	9301      	str	r3, [sp, #4]
 800e1ce:	9b01      	ldr	r3, [sp, #4]
 800e1d0:	b963      	cbnz	r3, 800e1ec <_dtoa_r+0x954>
 800e1d2:	4631      	mov	r1, r6
 800e1d4:	2205      	movs	r2, #5
 800e1d6:	4620      	mov	r0, r4
 800e1d8:	f000 f9fe 	bl	800e5d8 <__multadd>
 800e1dc:	4601      	mov	r1, r0
 800e1de:	4606      	mov	r6, r0
 800e1e0:	4650      	mov	r0, sl
 800e1e2:	f000 fc13 	bl	800ea0c <__mcmp>
 800e1e6:	2800      	cmp	r0, #0
 800e1e8:	f73f adbb 	bgt.w	800dd62 <_dtoa_r+0x4ca>
 800e1ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e1ee:	9d00      	ldr	r5, [sp, #0]
 800e1f0:	ea6f 0b03 	mvn.w	fp, r3
 800e1f4:	f04f 0800 	mov.w	r8, #0
 800e1f8:	4631      	mov	r1, r6
 800e1fa:	4620      	mov	r0, r4
 800e1fc:	f000 f9ca 	bl	800e594 <_Bfree>
 800e200:	2f00      	cmp	r7, #0
 800e202:	f43f aeab 	beq.w	800df5c <_dtoa_r+0x6c4>
 800e206:	f1b8 0f00 	cmp.w	r8, #0
 800e20a:	d005      	beq.n	800e218 <_dtoa_r+0x980>
 800e20c:	45b8      	cmp	r8, r7
 800e20e:	d003      	beq.n	800e218 <_dtoa_r+0x980>
 800e210:	4641      	mov	r1, r8
 800e212:	4620      	mov	r0, r4
 800e214:	f000 f9be 	bl	800e594 <_Bfree>
 800e218:	4639      	mov	r1, r7
 800e21a:	4620      	mov	r0, r4
 800e21c:	f000 f9ba 	bl	800e594 <_Bfree>
 800e220:	e69c      	b.n	800df5c <_dtoa_r+0x6c4>
 800e222:	2600      	movs	r6, #0
 800e224:	4637      	mov	r7, r6
 800e226:	e7e1      	b.n	800e1ec <_dtoa_r+0x954>
 800e228:	46bb      	mov	fp, r7
 800e22a:	4637      	mov	r7, r6
 800e22c:	e599      	b.n	800dd62 <_dtoa_r+0x4ca>
 800e22e:	bf00      	nop
 800e230:	40240000 	.word	0x40240000
 800e234:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e236:	2b00      	cmp	r3, #0
 800e238:	f000 80c8 	beq.w	800e3cc <_dtoa_r+0xb34>
 800e23c:	9b04      	ldr	r3, [sp, #16]
 800e23e:	9301      	str	r3, [sp, #4]
 800e240:	2d00      	cmp	r5, #0
 800e242:	dd05      	ble.n	800e250 <_dtoa_r+0x9b8>
 800e244:	4639      	mov	r1, r7
 800e246:	462a      	mov	r2, r5
 800e248:	4620      	mov	r0, r4
 800e24a:	f000 fb73 	bl	800e934 <__lshift>
 800e24e:	4607      	mov	r7, r0
 800e250:	f1b8 0f00 	cmp.w	r8, #0
 800e254:	d05b      	beq.n	800e30e <_dtoa_r+0xa76>
 800e256:	6879      	ldr	r1, [r7, #4]
 800e258:	4620      	mov	r0, r4
 800e25a:	f000 f95b 	bl	800e514 <_Balloc>
 800e25e:	4605      	mov	r5, r0
 800e260:	b928      	cbnz	r0, 800e26e <_dtoa_r+0x9d6>
 800e262:	4b83      	ldr	r3, [pc, #524]	; (800e470 <_dtoa_r+0xbd8>)
 800e264:	4602      	mov	r2, r0
 800e266:	f240 21ef 	movw	r1, #751	; 0x2ef
 800e26a:	f7ff bb2e 	b.w	800d8ca <_dtoa_r+0x32>
 800e26e:	693a      	ldr	r2, [r7, #16]
 800e270:	3202      	adds	r2, #2
 800e272:	0092      	lsls	r2, r2, #2
 800e274:	f107 010c 	add.w	r1, r7, #12
 800e278:	300c      	adds	r0, #12
 800e27a:	f001 f8af 	bl	800f3dc <memcpy>
 800e27e:	2201      	movs	r2, #1
 800e280:	4629      	mov	r1, r5
 800e282:	4620      	mov	r0, r4
 800e284:	f000 fb56 	bl	800e934 <__lshift>
 800e288:	9b00      	ldr	r3, [sp, #0]
 800e28a:	3301      	adds	r3, #1
 800e28c:	9304      	str	r3, [sp, #16]
 800e28e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e292:	4413      	add	r3, r2
 800e294:	9308      	str	r3, [sp, #32]
 800e296:	9b02      	ldr	r3, [sp, #8]
 800e298:	f003 0301 	and.w	r3, r3, #1
 800e29c:	46b8      	mov	r8, r7
 800e29e:	9306      	str	r3, [sp, #24]
 800e2a0:	4607      	mov	r7, r0
 800e2a2:	9b04      	ldr	r3, [sp, #16]
 800e2a4:	4631      	mov	r1, r6
 800e2a6:	3b01      	subs	r3, #1
 800e2a8:	4650      	mov	r0, sl
 800e2aa:	9301      	str	r3, [sp, #4]
 800e2ac:	f7ff fa69 	bl	800d782 <quorem>
 800e2b0:	4641      	mov	r1, r8
 800e2b2:	9002      	str	r0, [sp, #8]
 800e2b4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800e2b8:	4650      	mov	r0, sl
 800e2ba:	f000 fba7 	bl	800ea0c <__mcmp>
 800e2be:	463a      	mov	r2, r7
 800e2c0:	9005      	str	r0, [sp, #20]
 800e2c2:	4631      	mov	r1, r6
 800e2c4:	4620      	mov	r0, r4
 800e2c6:	f000 fbbd 	bl	800ea44 <__mdiff>
 800e2ca:	68c2      	ldr	r2, [r0, #12]
 800e2cc:	4605      	mov	r5, r0
 800e2ce:	bb02      	cbnz	r2, 800e312 <_dtoa_r+0xa7a>
 800e2d0:	4601      	mov	r1, r0
 800e2d2:	4650      	mov	r0, sl
 800e2d4:	f000 fb9a 	bl	800ea0c <__mcmp>
 800e2d8:	4602      	mov	r2, r0
 800e2da:	4629      	mov	r1, r5
 800e2dc:	4620      	mov	r0, r4
 800e2de:	9209      	str	r2, [sp, #36]	; 0x24
 800e2e0:	f000 f958 	bl	800e594 <_Bfree>
 800e2e4:	9b07      	ldr	r3, [sp, #28]
 800e2e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e2e8:	9d04      	ldr	r5, [sp, #16]
 800e2ea:	ea43 0102 	orr.w	r1, r3, r2
 800e2ee:	9b06      	ldr	r3, [sp, #24]
 800e2f0:	4319      	orrs	r1, r3
 800e2f2:	d110      	bne.n	800e316 <_dtoa_r+0xa7e>
 800e2f4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e2f8:	d029      	beq.n	800e34e <_dtoa_r+0xab6>
 800e2fa:	9b05      	ldr	r3, [sp, #20]
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	dd02      	ble.n	800e306 <_dtoa_r+0xa6e>
 800e300:	9b02      	ldr	r3, [sp, #8]
 800e302:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800e306:	9b01      	ldr	r3, [sp, #4]
 800e308:	f883 9000 	strb.w	r9, [r3]
 800e30c:	e774      	b.n	800e1f8 <_dtoa_r+0x960>
 800e30e:	4638      	mov	r0, r7
 800e310:	e7ba      	b.n	800e288 <_dtoa_r+0x9f0>
 800e312:	2201      	movs	r2, #1
 800e314:	e7e1      	b.n	800e2da <_dtoa_r+0xa42>
 800e316:	9b05      	ldr	r3, [sp, #20]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	db04      	blt.n	800e326 <_dtoa_r+0xa8e>
 800e31c:	9907      	ldr	r1, [sp, #28]
 800e31e:	430b      	orrs	r3, r1
 800e320:	9906      	ldr	r1, [sp, #24]
 800e322:	430b      	orrs	r3, r1
 800e324:	d120      	bne.n	800e368 <_dtoa_r+0xad0>
 800e326:	2a00      	cmp	r2, #0
 800e328:	dded      	ble.n	800e306 <_dtoa_r+0xa6e>
 800e32a:	4651      	mov	r1, sl
 800e32c:	2201      	movs	r2, #1
 800e32e:	4620      	mov	r0, r4
 800e330:	f000 fb00 	bl	800e934 <__lshift>
 800e334:	4631      	mov	r1, r6
 800e336:	4682      	mov	sl, r0
 800e338:	f000 fb68 	bl	800ea0c <__mcmp>
 800e33c:	2800      	cmp	r0, #0
 800e33e:	dc03      	bgt.n	800e348 <_dtoa_r+0xab0>
 800e340:	d1e1      	bne.n	800e306 <_dtoa_r+0xa6e>
 800e342:	f019 0f01 	tst.w	r9, #1
 800e346:	d0de      	beq.n	800e306 <_dtoa_r+0xa6e>
 800e348:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e34c:	d1d8      	bne.n	800e300 <_dtoa_r+0xa68>
 800e34e:	9a01      	ldr	r2, [sp, #4]
 800e350:	2339      	movs	r3, #57	; 0x39
 800e352:	7013      	strb	r3, [r2, #0]
 800e354:	462b      	mov	r3, r5
 800e356:	461d      	mov	r5, r3
 800e358:	3b01      	subs	r3, #1
 800e35a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e35e:	2a39      	cmp	r2, #57	; 0x39
 800e360:	d06c      	beq.n	800e43c <_dtoa_r+0xba4>
 800e362:	3201      	adds	r2, #1
 800e364:	701a      	strb	r2, [r3, #0]
 800e366:	e747      	b.n	800e1f8 <_dtoa_r+0x960>
 800e368:	2a00      	cmp	r2, #0
 800e36a:	dd07      	ble.n	800e37c <_dtoa_r+0xae4>
 800e36c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e370:	d0ed      	beq.n	800e34e <_dtoa_r+0xab6>
 800e372:	9a01      	ldr	r2, [sp, #4]
 800e374:	f109 0301 	add.w	r3, r9, #1
 800e378:	7013      	strb	r3, [r2, #0]
 800e37a:	e73d      	b.n	800e1f8 <_dtoa_r+0x960>
 800e37c:	9b04      	ldr	r3, [sp, #16]
 800e37e:	9a08      	ldr	r2, [sp, #32]
 800e380:	f803 9c01 	strb.w	r9, [r3, #-1]
 800e384:	4293      	cmp	r3, r2
 800e386:	d043      	beq.n	800e410 <_dtoa_r+0xb78>
 800e388:	4651      	mov	r1, sl
 800e38a:	2300      	movs	r3, #0
 800e38c:	220a      	movs	r2, #10
 800e38e:	4620      	mov	r0, r4
 800e390:	f000 f922 	bl	800e5d8 <__multadd>
 800e394:	45b8      	cmp	r8, r7
 800e396:	4682      	mov	sl, r0
 800e398:	f04f 0300 	mov.w	r3, #0
 800e39c:	f04f 020a 	mov.w	r2, #10
 800e3a0:	4641      	mov	r1, r8
 800e3a2:	4620      	mov	r0, r4
 800e3a4:	d107      	bne.n	800e3b6 <_dtoa_r+0xb1e>
 800e3a6:	f000 f917 	bl	800e5d8 <__multadd>
 800e3aa:	4680      	mov	r8, r0
 800e3ac:	4607      	mov	r7, r0
 800e3ae:	9b04      	ldr	r3, [sp, #16]
 800e3b0:	3301      	adds	r3, #1
 800e3b2:	9304      	str	r3, [sp, #16]
 800e3b4:	e775      	b.n	800e2a2 <_dtoa_r+0xa0a>
 800e3b6:	f000 f90f 	bl	800e5d8 <__multadd>
 800e3ba:	4639      	mov	r1, r7
 800e3bc:	4680      	mov	r8, r0
 800e3be:	2300      	movs	r3, #0
 800e3c0:	220a      	movs	r2, #10
 800e3c2:	4620      	mov	r0, r4
 800e3c4:	f000 f908 	bl	800e5d8 <__multadd>
 800e3c8:	4607      	mov	r7, r0
 800e3ca:	e7f0      	b.n	800e3ae <_dtoa_r+0xb16>
 800e3cc:	9b04      	ldr	r3, [sp, #16]
 800e3ce:	9301      	str	r3, [sp, #4]
 800e3d0:	9d00      	ldr	r5, [sp, #0]
 800e3d2:	4631      	mov	r1, r6
 800e3d4:	4650      	mov	r0, sl
 800e3d6:	f7ff f9d4 	bl	800d782 <quorem>
 800e3da:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800e3de:	9b00      	ldr	r3, [sp, #0]
 800e3e0:	f805 9b01 	strb.w	r9, [r5], #1
 800e3e4:	1aea      	subs	r2, r5, r3
 800e3e6:	9b01      	ldr	r3, [sp, #4]
 800e3e8:	4293      	cmp	r3, r2
 800e3ea:	dd07      	ble.n	800e3fc <_dtoa_r+0xb64>
 800e3ec:	4651      	mov	r1, sl
 800e3ee:	2300      	movs	r3, #0
 800e3f0:	220a      	movs	r2, #10
 800e3f2:	4620      	mov	r0, r4
 800e3f4:	f000 f8f0 	bl	800e5d8 <__multadd>
 800e3f8:	4682      	mov	sl, r0
 800e3fa:	e7ea      	b.n	800e3d2 <_dtoa_r+0xb3a>
 800e3fc:	9b01      	ldr	r3, [sp, #4]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	bfc8      	it	gt
 800e402:	461d      	movgt	r5, r3
 800e404:	9b00      	ldr	r3, [sp, #0]
 800e406:	bfd8      	it	le
 800e408:	2501      	movle	r5, #1
 800e40a:	441d      	add	r5, r3
 800e40c:	f04f 0800 	mov.w	r8, #0
 800e410:	4651      	mov	r1, sl
 800e412:	2201      	movs	r2, #1
 800e414:	4620      	mov	r0, r4
 800e416:	f000 fa8d 	bl	800e934 <__lshift>
 800e41a:	4631      	mov	r1, r6
 800e41c:	4682      	mov	sl, r0
 800e41e:	f000 faf5 	bl	800ea0c <__mcmp>
 800e422:	2800      	cmp	r0, #0
 800e424:	dc96      	bgt.n	800e354 <_dtoa_r+0xabc>
 800e426:	d102      	bne.n	800e42e <_dtoa_r+0xb96>
 800e428:	f019 0f01 	tst.w	r9, #1
 800e42c:	d192      	bne.n	800e354 <_dtoa_r+0xabc>
 800e42e:	462b      	mov	r3, r5
 800e430:	461d      	mov	r5, r3
 800e432:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e436:	2a30      	cmp	r2, #48	; 0x30
 800e438:	d0fa      	beq.n	800e430 <_dtoa_r+0xb98>
 800e43a:	e6dd      	b.n	800e1f8 <_dtoa_r+0x960>
 800e43c:	9a00      	ldr	r2, [sp, #0]
 800e43e:	429a      	cmp	r2, r3
 800e440:	d189      	bne.n	800e356 <_dtoa_r+0xabe>
 800e442:	f10b 0b01 	add.w	fp, fp, #1
 800e446:	2331      	movs	r3, #49	; 0x31
 800e448:	e796      	b.n	800e378 <_dtoa_r+0xae0>
 800e44a:	4b0a      	ldr	r3, [pc, #40]	; (800e474 <_dtoa_r+0xbdc>)
 800e44c:	f7ff ba99 	b.w	800d982 <_dtoa_r+0xea>
 800e450:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e452:	2b00      	cmp	r3, #0
 800e454:	f47f aa6d 	bne.w	800d932 <_dtoa_r+0x9a>
 800e458:	4b07      	ldr	r3, [pc, #28]	; (800e478 <_dtoa_r+0xbe0>)
 800e45a:	f7ff ba92 	b.w	800d982 <_dtoa_r+0xea>
 800e45e:	9b01      	ldr	r3, [sp, #4]
 800e460:	2b00      	cmp	r3, #0
 800e462:	dcb5      	bgt.n	800e3d0 <_dtoa_r+0xb38>
 800e464:	9b07      	ldr	r3, [sp, #28]
 800e466:	2b02      	cmp	r3, #2
 800e468:	f73f aeb1 	bgt.w	800e1ce <_dtoa_r+0x936>
 800e46c:	e7b0      	b.n	800e3d0 <_dtoa_r+0xb38>
 800e46e:	bf00      	nop
 800e470:	08013784 	.word	0x08013784
 800e474:	080136e4 	.word	0x080136e4
 800e478:	08013708 	.word	0x08013708

0800e47c <_free_r>:
 800e47c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e47e:	2900      	cmp	r1, #0
 800e480:	d044      	beq.n	800e50c <_free_r+0x90>
 800e482:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e486:	9001      	str	r0, [sp, #4]
 800e488:	2b00      	cmp	r3, #0
 800e48a:	f1a1 0404 	sub.w	r4, r1, #4
 800e48e:	bfb8      	it	lt
 800e490:	18e4      	addlt	r4, r4, r3
 800e492:	f7fe fa4d 	bl	800c930 <__malloc_lock>
 800e496:	4a1e      	ldr	r2, [pc, #120]	; (800e510 <_free_r+0x94>)
 800e498:	9801      	ldr	r0, [sp, #4]
 800e49a:	6813      	ldr	r3, [r2, #0]
 800e49c:	b933      	cbnz	r3, 800e4ac <_free_r+0x30>
 800e49e:	6063      	str	r3, [r4, #4]
 800e4a0:	6014      	str	r4, [r2, #0]
 800e4a2:	b003      	add	sp, #12
 800e4a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e4a8:	f7fe ba48 	b.w	800c93c <__malloc_unlock>
 800e4ac:	42a3      	cmp	r3, r4
 800e4ae:	d908      	bls.n	800e4c2 <_free_r+0x46>
 800e4b0:	6825      	ldr	r5, [r4, #0]
 800e4b2:	1961      	adds	r1, r4, r5
 800e4b4:	428b      	cmp	r3, r1
 800e4b6:	bf01      	itttt	eq
 800e4b8:	6819      	ldreq	r1, [r3, #0]
 800e4ba:	685b      	ldreq	r3, [r3, #4]
 800e4bc:	1949      	addeq	r1, r1, r5
 800e4be:	6021      	streq	r1, [r4, #0]
 800e4c0:	e7ed      	b.n	800e49e <_free_r+0x22>
 800e4c2:	461a      	mov	r2, r3
 800e4c4:	685b      	ldr	r3, [r3, #4]
 800e4c6:	b10b      	cbz	r3, 800e4cc <_free_r+0x50>
 800e4c8:	42a3      	cmp	r3, r4
 800e4ca:	d9fa      	bls.n	800e4c2 <_free_r+0x46>
 800e4cc:	6811      	ldr	r1, [r2, #0]
 800e4ce:	1855      	adds	r5, r2, r1
 800e4d0:	42a5      	cmp	r5, r4
 800e4d2:	d10b      	bne.n	800e4ec <_free_r+0x70>
 800e4d4:	6824      	ldr	r4, [r4, #0]
 800e4d6:	4421      	add	r1, r4
 800e4d8:	1854      	adds	r4, r2, r1
 800e4da:	42a3      	cmp	r3, r4
 800e4dc:	6011      	str	r1, [r2, #0]
 800e4de:	d1e0      	bne.n	800e4a2 <_free_r+0x26>
 800e4e0:	681c      	ldr	r4, [r3, #0]
 800e4e2:	685b      	ldr	r3, [r3, #4]
 800e4e4:	6053      	str	r3, [r2, #4]
 800e4e6:	440c      	add	r4, r1
 800e4e8:	6014      	str	r4, [r2, #0]
 800e4ea:	e7da      	b.n	800e4a2 <_free_r+0x26>
 800e4ec:	d902      	bls.n	800e4f4 <_free_r+0x78>
 800e4ee:	230c      	movs	r3, #12
 800e4f0:	6003      	str	r3, [r0, #0]
 800e4f2:	e7d6      	b.n	800e4a2 <_free_r+0x26>
 800e4f4:	6825      	ldr	r5, [r4, #0]
 800e4f6:	1961      	adds	r1, r4, r5
 800e4f8:	428b      	cmp	r3, r1
 800e4fa:	bf04      	itt	eq
 800e4fc:	6819      	ldreq	r1, [r3, #0]
 800e4fe:	685b      	ldreq	r3, [r3, #4]
 800e500:	6063      	str	r3, [r4, #4]
 800e502:	bf04      	itt	eq
 800e504:	1949      	addeq	r1, r1, r5
 800e506:	6021      	streq	r1, [r4, #0]
 800e508:	6054      	str	r4, [r2, #4]
 800e50a:	e7ca      	b.n	800e4a2 <_free_r+0x26>
 800e50c:	b003      	add	sp, #12
 800e50e:	bd30      	pop	{r4, r5, pc}
 800e510:	20001a68 	.word	0x20001a68

0800e514 <_Balloc>:
 800e514:	b570      	push	{r4, r5, r6, lr}
 800e516:	69c6      	ldr	r6, [r0, #28]
 800e518:	4604      	mov	r4, r0
 800e51a:	460d      	mov	r5, r1
 800e51c:	b976      	cbnz	r6, 800e53c <_Balloc+0x28>
 800e51e:	2010      	movs	r0, #16
 800e520:	f7fe f95e 	bl	800c7e0 <malloc>
 800e524:	4602      	mov	r2, r0
 800e526:	61e0      	str	r0, [r4, #28]
 800e528:	b920      	cbnz	r0, 800e534 <_Balloc+0x20>
 800e52a:	4b18      	ldr	r3, [pc, #96]	; (800e58c <_Balloc+0x78>)
 800e52c:	4818      	ldr	r0, [pc, #96]	; (800e590 <_Balloc+0x7c>)
 800e52e:	216b      	movs	r1, #107	; 0x6b
 800e530:	f000 ff62 	bl	800f3f8 <__assert_func>
 800e534:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e538:	6006      	str	r6, [r0, #0]
 800e53a:	60c6      	str	r6, [r0, #12]
 800e53c:	69e6      	ldr	r6, [r4, #28]
 800e53e:	68f3      	ldr	r3, [r6, #12]
 800e540:	b183      	cbz	r3, 800e564 <_Balloc+0x50>
 800e542:	69e3      	ldr	r3, [r4, #28]
 800e544:	68db      	ldr	r3, [r3, #12]
 800e546:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e54a:	b9b8      	cbnz	r0, 800e57c <_Balloc+0x68>
 800e54c:	2101      	movs	r1, #1
 800e54e:	fa01 f605 	lsl.w	r6, r1, r5
 800e552:	1d72      	adds	r2, r6, #5
 800e554:	0092      	lsls	r2, r2, #2
 800e556:	4620      	mov	r0, r4
 800e558:	f000 ff6c 	bl	800f434 <_calloc_r>
 800e55c:	b160      	cbz	r0, 800e578 <_Balloc+0x64>
 800e55e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e562:	e00e      	b.n	800e582 <_Balloc+0x6e>
 800e564:	2221      	movs	r2, #33	; 0x21
 800e566:	2104      	movs	r1, #4
 800e568:	4620      	mov	r0, r4
 800e56a:	f000 ff63 	bl	800f434 <_calloc_r>
 800e56e:	69e3      	ldr	r3, [r4, #28]
 800e570:	60f0      	str	r0, [r6, #12]
 800e572:	68db      	ldr	r3, [r3, #12]
 800e574:	2b00      	cmp	r3, #0
 800e576:	d1e4      	bne.n	800e542 <_Balloc+0x2e>
 800e578:	2000      	movs	r0, #0
 800e57a:	bd70      	pop	{r4, r5, r6, pc}
 800e57c:	6802      	ldr	r2, [r0, #0]
 800e57e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e582:	2300      	movs	r3, #0
 800e584:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e588:	e7f7      	b.n	800e57a <_Balloc+0x66>
 800e58a:	bf00      	nop
 800e58c:	08013715 	.word	0x08013715
 800e590:	08013795 	.word	0x08013795

0800e594 <_Bfree>:
 800e594:	b570      	push	{r4, r5, r6, lr}
 800e596:	69c6      	ldr	r6, [r0, #28]
 800e598:	4605      	mov	r5, r0
 800e59a:	460c      	mov	r4, r1
 800e59c:	b976      	cbnz	r6, 800e5bc <_Bfree+0x28>
 800e59e:	2010      	movs	r0, #16
 800e5a0:	f7fe f91e 	bl	800c7e0 <malloc>
 800e5a4:	4602      	mov	r2, r0
 800e5a6:	61e8      	str	r0, [r5, #28]
 800e5a8:	b920      	cbnz	r0, 800e5b4 <_Bfree+0x20>
 800e5aa:	4b09      	ldr	r3, [pc, #36]	; (800e5d0 <_Bfree+0x3c>)
 800e5ac:	4809      	ldr	r0, [pc, #36]	; (800e5d4 <_Bfree+0x40>)
 800e5ae:	218f      	movs	r1, #143	; 0x8f
 800e5b0:	f000 ff22 	bl	800f3f8 <__assert_func>
 800e5b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e5b8:	6006      	str	r6, [r0, #0]
 800e5ba:	60c6      	str	r6, [r0, #12]
 800e5bc:	b13c      	cbz	r4, 800e5ce <_Bfree+0x3a>
 800e5be:	69eb      	ldr	r3, [r5, #28]
 800e5c0:	6862      	ldr	r2, [r4, #4]
 800e5c2:	68db      	ldr	r3, [r3, #12]
 800e5c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e5c8:	6021      	str	r1, [r4, #0]
 800e5ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e5ce:	bd70      	pop	{r4, r5, r6, pc}
 800e5d0:	08013715 	.word	0x08013715
 800e5d4:	08013795 	.word	0x08013795

0800e5d8 <__multadd>:
 800e5d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5dc:	690d      	ldr	r5, [r1, #16]
 800e5de:	4607      	mov	r7, r0
 800e5e0:	460c      	mov	r4, r1
 800e5e2:	461e      	mov	r6, r3
 800e5e4:	f101 0c14 	add.w	ip, r1, #20
 800e5e8:	2000      	movs	r0, #0
 800e5ea:	f8dc 3000 	ldr.w	r3, [ip]
 800e5ee:	b299      	uxth	r1, r3
 800e5f0:	fb02 6101 	mla	r1, r2, r1, r6
 800e5f4:	0c1e      	lsrs	r6, r3, #16
 800e5f6:	0c0b      	lsrs	r3, r1, #16
 800e5f8:	fb02 3306 	mla	r3, r2, r6, r3
 800e5fc:	b289      	uxth	r1, r1
 800e5fe:	3001      	adds	r0, #1
 800e600:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e604:	4285      	cmp	r5, r0
 800e606:	f84c 1b04 	str.w	r1, [ip], #4
 800e60a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e60e:	dcec      	bgt.n	800e5ea <__multadd+0x12>
 800e610:	b30e      	cbz	r6, 800e656 <__multadd+0x7e>
 800e612:	68a3      	ldr	r3, [r4, #8]
 800e614:	42ab      	cmp	r3, r5
 800e616:	dc19      	bgt.n	800e64c <__multadd+0x74>
 800e618:	6861      	ldr	r1, [r4, #4]
 800e61a:	4638      	mov	r0, r7
 800e61c:	3101      	adds	r1, #1
 800e61e:	f7ff ff79 	bl	800e514 <_Balloc>
 800e622:	4680      	mov	r8, r0
 800e624:	b928      	cbnz	r0, 800e632 <__multadd+0x5a>
 800e626:	4602      	mov	r2, r0
 800e628:	4b0c      	ldr	r3, [pc, #48]	; (800e65c <__multadd+0x84>)
 800e62a:	480d      	ldr	r0, [pc, #52]	; (800e660 <__multadd+0x88>)
 800e62c:	21ba      	movs	r1, #186	; 0xba
 800e62e:	f000 fee3 	bl	800f3f8 <__assert_func>
 800e632:	6922      	ldr	r2, [r4, #16]
 800e634:	3202      	adds	r2, #2
 800e636:	f104 010c 	add.w	r1, r4, #12
 800e63a:	0092      	lsls	r2, r2, #2
 800e63c:	300c      	adds	r0, #12
 800e63e:	f000 fecd 	bl	800f3dc <memcpy>
 800e642:	4621      	mov	r1, r4
 800e644:	4638      	mov	r0, r7
 800e646:	f7ff ffa5 	bl	800e594 <_Bfree>
 800e64a:	4644      	mov	r4, r8
 800e64c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e650:	3501      	adds	r5, #1
 800e652:	615e      	str	r6, [r3, #20]
 800e654:	6125      	str	r5, [r4, #16]
 800e656:	4620      	mov	r0, r4
 800e658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e65c:	08013784 	.word	0x08013784
 800e660:	08013795 	.word	0x08013795

0800e664 <__hi0bits>:
 800e664:	0c03      	lsrs	r3, r0, #16
 800e666:	041b      	lsls	r3, r3, #16
 800e668:	b9d3      	cbnz	r3, 800e6a0 <__hi0bits+0x3c>
 800e66a:	0400      	lsls	r0, r0, #16
 800e66c:	2310      	movs	r3, #16
 800e66e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e672:	bf04      	itt	eq
 800e674:	0200      	lsleq	r0, r0, #8
 800e676:	3308      	addeq	r3, #8
 800e678:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e67c:	bf04      	itt	eq
 800e67e:	0100      	lsleq	r0, r0, #4
 800e680:	3304      	addeq	r3, #4
 800e682:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e686:	bf04      	itt	eq
 800e688:	0080      	lsleq	r0, r0, #2
 800e68a:	3302      	addeq	r3, #2
 800e68c:	2800      	cmp	r0, #0
 800e68e:	db05      	blt.n	800e69c <__hi0bits+0x38>
 800e690:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e694:	f103 0301 	add.w	r3, r3, #1
 800e698:	bf08      	it	eq
 800e69a:	2320      	moveq	r3, #32
 800e69c:	4618      	mov	r0, r3
 800e69e:	4770      	bx	lr
 800e6a0:	2300      	movs	r3, #0
 800e6a2:	e7e4      	b.n	800e66e <__hi0bits+0xa>

0800e6a4 <__lo0bits>:
 800e6a4:	6803      	ldr	r3, [r0, #0]
 800e6a6:	f013 0207 	ands.w	r2, r3, #7
 800e6aa:	d00c      	beq.n	800e6c6 <__lo0bits+0x22>
 800e6ac:	07d9      	lsls	r1, r3, #31
 800e6ae:	d422      	bmi.n	800e6f6 <__lo0bits+0x52>
 800e6b0:	079a      	lsls	r2, r3, #30
 800e6b2:	bf49      	itett	mi
 800e6b4:	085b      	lsrmi	r3, r3, #1
 800e6b6:	089b      	lsrpl	r3, r3, #2
 800e6b8:	6003      	strmi	r3, [r0, #0]
 800e6ba:	2201      	movmi	r2, #1
 800e6bc:	bf5c      	itt	pl
 800e6be:	6003      	strpl	r3, [r0, #0]
 800e6c0:	2202      	movpl	r2, #2
 800e6c2:	4610      	mov	r0, r2
 800e6c4:	4770      	bx	lr
 800e6c6:	b299      	uxth	r1, r3
 800e6c8:	b909      	cbnz	r1, 800e6ce <__lo0bits+0x2a>
 800e6ca:	0c1b      	lsrs	r3, r3, #16
 800e6cc:	2210      	movs	r2, #16
 800e6ce:	b2d9      	uxtb	r1, r3
 800e6d0:	b909      	cbnz	r1, 800e6d6 <__lo0bits+0x32>
 800e6d2:	3208      	adds	r2, #8
 800e6d4:	0a1b      	lsrs	r3, r3, #8
 800e6d6:	0719      	lsls	r1, r3, #28
 800e6d8:	bf04      	itt	eq
 800e6da:	091b      	lsreq	r3, r3, #4
 800e6dc:	3204      	addeq	r2, #4
 800e6de:	0799      	lsls	r1, r3, #30
 800e6e0:	bf04      	itt	eq
 800e6e2:	089b      	lsreq	r3, r3, #2
 800e6e4:	3202      	addeq	r2, #2
 800e6e6:	07d9      	lsls	r1, r3, #31
 800e6e8:	d403      	bmi.n	800e6f2 <__lo0bits+0x4e>
 800e6ea:	085b      	lsrs	r3, r3, #1
 800e6ec:	f102 0201 	add.w	r2, r2, #1
 800e6f0:	d003      	beq.n	800e6fa <__lo0bits+0x56>
 800e6f2:	6003      	str	r3, [r0, #0]
 800e6f4:	e7e5      	b.n	800e6c2 <__lo0bits+0x1e>
 800e6f6:	2200      	movs	r2, #0
 800e6f8:	e7e3      	b.n	800e6c2 <__lo0bits+0x1e>
 800e6fa:	2220      	movs	r2, #32
 800e6fc:	e7e1      	b.n	800e6c2 <__lo0bits+0x1e>
	...

0800e700 <__i2b>:
 800e700:	b510      	push	{r4, lr}
 800e702:	460c      	mov	r4, r1
 800e704:	2101      	movs	r1, #1
 800e706:	f7ff ff05 	bl	800e514 <_Balloc>
 800e70a:	4602      	mov	r2, r0
 800e70c:	b928      	cbnz	r0, 800e71a <__i2b+0x1a>
 800e70e:	4b05      	ldr	r3, [pc, #20]	; (800e724 <__i2b+0x24>)
 800e710:	4805      	ldr	r0, [pc, #20]	; (800e728 <__i2b+0x28>)
 800e712:	f240 1145 	movw	r1, #325	; 0x145
 800e716:	f000 fe6f 	bl	800f3f8 <__assert_func>
 800e71a:	2301      	movs	r3, #1
 800e71c:	6144      	str	r4, [r0, #20]
 800e71e:	6103      	str	r3, [r0, #16]
 800e720:	bd10      	pop	{r4, pc}
 800e722:	bf00      	nop
 800e724:	08013784 	.word	0x08013784
 800e728:	08013795 	.word	0x08013795

0800e72c <__multiply>:
 800e72c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e730:	4691      	mov	r9, r2
 800e732:	690a      	ldr	r2, [r1, #16]
 800e734:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e738:	429a      	cmp	r2, r3
 800e73a:	bfb8      	it	lt
 800e73c:	460b      	movlt	r3, r1
 800e73e:	460c      	mov	r4, r1
 800e740:	bfbc      	itt	lt
 800e742:	464c      	movlt	r4, r9
 800e744:	4699      	movlt	r9, r3
 800e746:	6927      	ldr	r7, [r4, #16]
 800e748:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e74c:	68a3      	ldr	r3, [r4, #8]
 800e74e:	6861      	ldr	r1, [r4, #4]
 800e750:	eb07 060a 	add.w	r6, r7, sl
 800e754:	42b3      	cmp	r3, r6
 800e756:	b085      	sub	sp, #20
 800e758:	bfb8      	it	lt
 800e75a:	3101      	addlt	r1, #1
 800e75c:	f7ff feda 	bl	800e514 <_Balloc>
 800e760:	b930      	cbnz	r0, 800e770 <__multiply+0x44>
 800e762:	4602      	mov	r2, r0
 800e764:	4b44      	ldr	r3, [pc, #272]	; (800e878 <__multiply+0x14c>)
 800e766:	4845      	ldr	r0, [pc, #276]	; (800e87c <__multiply+0x150>)
 800e768:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800e76c:	f000 fe44 	bl	800f3f8 <__assert_func>
 800e770:	f100 0514 	add.w	r5, r0, #20
 800e774:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e778:	462b      	mov	r3, r5
 800e77a:	2200      	movs	r2, #0
 800e77c:	4543      	cmp	r3, r8
 800e77e:	d321      	bcc.n	800e7c4 <__multiply+0x98>
 800e780:	f104 0314 	add.w	r3, r4, #20
 800e784:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e788:	f109 0314 	add.w	r3, r9, #20
 800e78c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e790:	9202      	str	r2, [sp, #8]
 800e792:	1b3a      	subs	r2, r7, r4
 800e794:	3a15      	subs	r2, #21
 800e796:	f022 0203 	bic.w	r2, r2, #3
 800e79a:	3204      	adds	r2, #4
 800e79c:	f104 0115 	add.w	r1, r4, #21
 800e7a0:	428f      	cmp	r7, r1
 800e7a2:	bf38      	it	cc
 800e7a4:	2204      	movcc	r2, #4
 800e7a6:	9201      	str	r2, [sp, #4]
 800e7a8:	9a02      	ldr	r2, [sp, #8]
 800e7aa:	9303      	str	r3, [sp, #12]
 800e7ac:	429a      	cmp	r2, r3
 800e7ae:	d80c      	bhi.n	800e7ca <__multiply+0x9e>
 800e7b0:	2e00      	cmp	r6, #0
 800e7b2:	dd03      	ble.n	800e7bc <__multiply+0x90>
 800e7b4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d05b      	beq.n	800e874 <__multiply+0x148>
 800e7bc:	6106      	str	r6, [r0, #16]
 800e7be:	b005      	add	sp, #20
 800e7c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7c4:	f843 2b04 	str.w	r2, [r3], #4
 800e7c8:	e7d8      	b.n	800e77c <__multiply+0x50>
 800e7ca:	f8b3 a000 	ldrh.w	sl, [r3]
 800e7ce:	f1ba 0f00 	cmp.w	sl, #0
 800e7d2:	d024      	beq.n	800e81e <__multiply+0xf2>
 800e7d4:	f104 0e14 	add.w	lr, r4, #20
 800e7d8:	46a9      	mov	r9, r5
 800e7da:	f04f 0c00 	mov.w	ip, #0
 800e7de:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e7e2:	f8d9 1000 	ldr.w	r1, [r9]
 800e7e6:	fa1f fb82 	uxth.w	fp, r2
 800e7ea:	b289      	uxth	r1, r1
 800e7ec:	fb0a 110b 	mla	r1, sl, fp, r1
 800e7f0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e7f4:	f8d9 2000 	ldr.w	r2, [r9]
 800e7f8:	4461      	add	r1, ip
 800e7fa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e7fe:	fb0a c20b 	mla	r2, sl, fp, ip
 800e802:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e806:	b289      	uxth	r1, r1
 800e808:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e80c:	4577      	cmp	r7, lr
 800e80e:	f849 1b04 	str.w	r1, [r9], #4
 800e812:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e816:	d8e2      	bhi.n	800e7de <__multiply+0xb2>
 800e818:	9a01      	ldr	r2, [sp, #4]
 800e81a:	f845 c002 	str.w	ip, [r5, r2]
 800e81e:	9a03      	ldr	r2, [sp, #12]
 800e820:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e824:	3304      	adds	r3, #4
 800e826:	f1b9 0f00 	cmp.w	r9, #0
 800e82a:	d021      	beq.n	800e870 <__multiply+0x144>
 800e82c:	6829      	ldr	r1, [r5, #0]
 800e82e:	f104 0c14 	add.w	ip, r4, #20
 800e832:	46ae      	mov	lr, r5
 800e834:	f04f 0a00 	mov.w	sl, #0
 800e838:	f8bc b000 	ldrh.w	fp, [ip]
 800e83c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e840:	fb09 220b 	mla	r2, r9, fp, r2
 800e844:	4452      	add	r2, sl
 800e846:	b289      	uxth	r1, r1
 800e848:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e84c:	f84e 1b04 	str.w	r1, [lr], #4
 800e850:	f85c 1b04 	ldr.w	r1, [ip], #4
 800e854:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e858:	f8be 1000 	ldrh.w	r1, [lr]
 800e85c:	fb09 110a 	mla	r1, r9, sl, r1
 800e860:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800e864:	4567      	cmp	r7, ip
 800e866:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e86a:	d8e5      	bhi.n	800e838 <__multiply+0x10c>
 800e86c:	9a01      	ldr	r2, [sp, #4]
 800e86e:	50a9      	str	r1, [r5, r2]
 800e870:	3504      	adds	r5, #4
 800e872:	e799      	b.n	800e7a8 <__multiply+0x7c>
 800e874:	3e01      	subs	r6, #1
 800e876:	e79b      	b.n	800e7b0 <__multiply+0x84>
 800e878:	08013784 	.word	0x08013784
 800e87c:	08013795 	.word	0x08013795

0800e880 <__pow5mult>:
 800e880:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e884:	4615      	mov	r5, r2
 800e886:	f012 0203 	ands.w	r2, r2, #3
 800e88a:	4606      	mov	r6, r0
 800e88c:	460f      	mov	r7, r1
 800e88e:	d007      	beq.n	800e8a0 <__pow5mult+0x20>
 800e890:	4c25      	ldr	r4, [pc, #148]	; (800e928 <__pow5mult+0xa8>)
 800e892:	3a01      	subs	r2, #1
 800e894:	2300      	movs	r3, #0
 800e896:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e89a:	f7ff fe9d 	bl	800e5d8 <__multadd>
 800e89e:	4607      	mov	r7, r0
 800e8a0:	10ad      	asrs	r5, r5, #2
 800e8a2:	d03d      	beq.n	800e920 <__pow5mult+0xa0>
 800e8a4:	69f4      	ldr	r4, [r6, #28]
 800e8a6:	b97c      	cbnz	r4, 800e8c8 <__pow5mult+0x48>
 800e8a8:	2010      	movs	r0, #16
 800e8aa:	f7fd ff99 	bl	800c7e0 <malloc>
 800e8ae:	4602      	mov	r2, r0
 800e8b0:	61f0      	str	r0, [r6, #28]
 800e8b2:	b928      	cbnz	r0, 800e8c0 <__pow5mult+0x40>
 800e8b4:	4b1d      	ldr	r3, [pc, #116]	; (800e92c <__pow5mult+0xac>)
 800e8b6:	481e      	ldr	r0, [pc, #120]	; (800e930 <__pow5mult+0xb0>)
 800e8b8:	f240 11b3 	movw	r1, #435	; 0x1b3
 800e8bc:	f000 fd9c 	bl	800f3f8 <__assert_func>
 800e8c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e8c4:	6004      	str	r4, [r0, #0]
 800e8c6:	60c4      	str	r4, [r0, #12]
 800e8c8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800e8cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e8d0:	b94c      	cbnz	r4, 800e8e6 <__pow5mult+0x66>
 800e8d2:	f240 2171 	movw	r1, #625	; 0x271
 800e8d6:	4630      	mov	r0, r6
 800e8d8:	f7ff ff12 	bl	800e700 <__i2b>
 800e8dc:	2300      	movs	r3, #0
 800e8de:	f8c8 0008 	str.w	r0, [r8, #8]
 800e8e2:	4604      	mov	r4, r0
 800e8e4:	6003      	str	r3, [r0, #0]
 800e8e6:	f04f 0900 	mov.w	r9, #0
 800e8ea:	07eb      	lsls	r3, r5, #31
 800e8ec:	d50a      	bpl.n	800e904 <__pow5mult+0x84>
 800e8ee:	4639      	mov	r1, r7
 800e8f0:	4622      	mov	r2, r4
 800e8f2:	4630      	mov	r0, r6
 800e8f4:	f7ff ff1a 	bl	800e72c <__multiply>
 800e8f8:	4639      	mov	r1, r7
 800e8fa:	4680      	mov	r8, r0
 800e8fc:	4630      	mov	r0, r6
 800e8fe:	f7ff fe49 	bl	800e594 <_Bfree>
 800e902:	4647      	mov	r7, r8
 800e904:	106d      	asrs	r5, r5, #1
 800e906:	d00b      	beq.n	800e920 <__pow5mult+0xa0>
 800e908:	6820      	ldr	r0, [r4, #0]
 800e90a:	b938      	cbnz	r0, 800e91c <__pow5mult+0x9c>
 800e90c:	4622      	mov	r2, r4
 800e90e:	4621      	mov	r1, r4
 800e910:	4630      	mov	r0, r6
 800e912:	f7ff ff0b 	bl	800e72c <__multiply>
 800e916:	6020      	str	r0, [r4, #0]
 800e918:	f8c0 9000 	str.w	r9, [r0]
 800e91c:	4604      	mov	r4, r0
 800e91e:	e7e4      	b.n	800e8ea <__pow5mult+0x6a>
 800e920:	4638      	mov	r0, r7
 800e922:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e926:	bf00      	nop
 800e928:	080138e0 	.word	0x080138e0
 800e92c:	08013715 	.word	0x08013715
 800e930:	08013795 	.word	0x08013795

0800e934 <__lshift>:
 800e934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e938:	460c      	mov	r4, r1
 800e93a:	6849      	ldr	r1, [r1, #4]
 800e93c:	6923      	ldr	r3, [r4, #16]
 800e93e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e942:	68a3      	ldr	r3, [r4, #8]
 800e944:	4607      	mov	r7, r0
 800e946:	4691      	mov	r9, r2
 800e948:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e94c:	f108 0601 	add.w	r6, r8, #1
 800e950:	42b3      	cmp	r3, r6
 800e952:	db0b      	blt.n	800e96c <__lshift+0x38>
 800e954:	4638      	mov	r0, r7
 800e956:	f7ff fddd 	bl	800e514 <_Balloc>
 800e95a:	4605      	mov	r5, r0
 800e95c:	b948      	cbnz	r0, 800e972 <__lshift+0x3e>
 800e95e:	4602      	mov	r2, r0
 800e960:	4b28      	ldr	r3, [pc, #160]	; (800ea04 <__lshift+0xd0>)
 800e962:	4829      	ldr	r0, [pc, #164]	; (800ea08 <__lshift+0xd4>)
 800e964:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800e968:	f000 fd46 	bl	800f3f8 <__assert_func>
 800e96c:	3101      	adds	r1, #1
 800e96e:	005b      	lsls	r3, r3, #1
 800e970:	e7ee      	b.n	800e950 <__lshift+0x1c>
 800e972:	2300      	movs	r3, #0
 800e974:	f100 0114 	add.w	r1, r0, #20
 800e978:	f100 0210 	add.w	r2, r0, #16
 800e97c:	4618      	mov	r0, r3
 800e97e:	4553      	cmp	r3, sl
 800e980:	db33      	blt.n	800e9ea <__lshift+0xb6>
 800e982:	6920      	ldr	r0, [r4, #16]
 800e984:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e988:	f104 0314 	add.w	r3, r4, #20
 800e98c:	f019 091f 	ands.w	r9, r9, #31
 800e990:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e994:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e998:	d02b      	beq.n	800e9f2 <__lshift+0xbe>
 800e99a:	f1c9 0e20 	rsb	lr, r9, #32
 800e99e:	468a      	mov	sl, r1
 800e9a0:	2200      	movs	r2, #0
 800e9a2:	6818      	ldr	r0, [r3, #0]
 800e9a4:	fa00 f009 	lsl.w	r0, r0, r9
 800e9a8:	4310      	orrs	r0, r2
 800e9aa:	f84a 0b04 	str.w	r0, [sl], #4
 800e9ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800e9b2:	459c      	cmp	ip, r3
 800e9b4:	fa22 f20e 	lsr.w	r2, r2, lr
 800e9b8:	d8f3      	bhi.n	800e9a2 <__lshift+0x6e>
 800e9ba:	ebac 0304 	sub.w	r3, ip, r4
 800e9be:	3b15      	subs	r3, #21
 800e9c0:	f023 0303 	bic.w	r3, r3, #3
 800e9c4:	3304      	adds	r3, #4
 800e9c6:	f104 0015 	add.w	r0, r4, #21
 800e9ca:	4584      	cmp	ip, r0
 800e9cc:	bf38      	it	cc
 800e9ce:	2304      	movcc	r3, #4
 800e9d0:	50ca      	str	r2, [r1, r3]
 800e9d2:	b10a      	cbz	r2, 800e9d8 <__lshift+0xa4>
 800e9d4:	f108 0602 	add.w	r6, r8, #2
 800e9d8:	3e01      	subs	r6, #1
 800e9da:	4638      	mov	r0, r7
 800e9dc:	612e      	str	r6, [r5, #16]
 800e9de:	4621      	mov	r1, r4
 800e9e0:	f7ff fdd8 	bl	800e594 <_Bfree>
 800e9e4:	4628      	mov	r0, r5
 800e9e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9ea:	f842 0f04 	str.w	r0, [r2, #4]!
 800e9ee:	3301      	adds	r3, #1
 800e9f0:	e7c5      	b.n	800e97e <__lshift+0x4a>
 800e9f2:	3904      	subs	r1, #4
 800e9f4:	f853 2b04 	ldr.w	r2, [r3], #4
 800e9f8:	f841 2f04 	str.w	r2, [r1, #4]!
 800e9fc:	459c      	cmp	ip, r3
 800e9fe:	d8f9      	bhi.n	800e9f4 <__lshift+0xc0>
 800ea00:	e7ea      	b.n	800e9d8 <__lshift+0xa4>
 800ea02:	bf00      	nop
 800ea04:	08013784 	.word	0x08013784
 800ea08:	08013795 	.word	0x08013795

0800ea0c <__mcmp>:
 800ea0c:	b530      	push	{r4, r5, lr}
 800ea0e:	6902      	ldr	r2, [r0, #16]
 800ea10:	690c      	ldr	r4, [r1, #16]
 800ea12:	1b12      	subs	r2, r2, r4
 800ea14:	d10e      	bne.n	800ea34 <__mcmp+0x28>
 800ea16:	f100 0314 	add.w	r3, r0, #20
 800ea1a:	3114      	adds	r1, #20
 800ea1c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ea20:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ea24:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ea28:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ea2c:	42a5      	cmp	r5, r4
 800ea2e:	d003      	beq.n	800ea38 <__mcmp+0x2c>
 800ea30:	d305      	bcc.n	800ea3e <__mcmp+0x32>
 800ea32:	2201      	movs	r2, #1
 800ea34:	4610      	mov	r0, r2
 800ea36:	bd30      	pop	{r4, r5, pc}
 800ea38:	4283      	cmp	r3, r0
 800ea3a:	d3f3      	bcc.n	800ea24 <__mcmp+0x18>
 800ea3c:	e7fa      	b.n	800ea34 <__mcmp+0x28>
 800ea3e:	f04f 32ff 	mov.w	r2, #4294967295
 800ea42:	e7f7      	b.n	800ea34 <__mcmp+0x28>

0800ea44 <__mdiff>:
 800ea44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea48:	460c      	mov	r4, r1
 800ea4a:	4606      	mov	r6, r0
 800ea4c:	4611      	mov	r1, r2
 800ea4e:	4620      	mov	r0, r4
 800ea50:	4690      	mov	r8, r2
 800ea52:	f7ff ffdb 	bl	800ea0c <__mcmp>
 800ea56:	1e05      	subs	r5, r0, #0
 800ea58:	d110      	bne.n	800ea7c <__mdiff+0x38>
 800ea5a:	4629      	mov	r1, r5
 800ea5c:	4630      	mov	r0, r6
 800ea5e:	f7ff fd59 	bl	800e514 <_Balloc>
 800ea62:	b930      	cbnz	r0, 800ea72 <__mdiff+0x2e>
 800ea64:	4b3a      	ldr	r3, [pc, #232]	; (800eb50 <__mdiff+0x10c>)
 800ea66:	4602      	mov	r2, r0
 800ea68:	f240 2137 	movw	r1, #567	; 0x237
 800ea6c:	4839      	ldr	r0, [pc, #228]	; (800eb54 <__mdiff+0x110>)
 800ea6e:	f000 fcc3 	bl	800f3f8 <__assert_func>
 800ea72:	2301      	movs	r3, #1
 800ea74:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ea78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea7c:	bfa4      	itt	ge
 800ea7e:	4643      	movge	r3, r8
 800ea80:	46a0      	movge	r8, r4
 800ea82:	4630      	mov	r0, r6
 800ea84:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ea88:	bfa6      	itte	ge
 800ea8a:	461c      	movge	r4, r3
 800ea8c:	2500      	movge	r5, #0
 800ea8e:	2501      	movlt	r5, #1
 800ea90:	f7ff fd40 	bl	800e514 <_Balloc>
 800ea94:	b920      	cbnz	r0, 800eaa0 <__mdiff+0x5c>
 800ea96:	4b2e      	ldr	r3, [pc, #184]	; (800eb50 <__mdiff+0x10c>)
 800ea98:	4602      	mov	r2, r0
 800ea9a:	f240 2145 	movw	r1, #581	; 0x245
 800ea9e:	e7e5      	b.n	800ea6c <__mdiff+0x28>
 800eaa0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800eaa4:	6926      	ldr	r6, [r4, #16]
 800eaa6:	60c5      	str	r5, [r0, #12]
 800eaa8:	f104 0914 	add.w	r9, r4, #20
 800eaac:	f108 0514 	add.w	r5, r8, #20
 800eab0:	f100 0e14 	add.w	lr, r0, #20
 800eab4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800eab8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800eabc:	f108 0210 	add.w	r2, r8, #16
 800eac0:	46f2      	mov	sl, lr
 800eac2:	2100      	movs	r1, #0
 800eac4:	f859 3b04 	ldr.w	r3, [r9], #4
 800eac8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800eacc:	fa11 f88b 	uxtah	r8, r1, fp
 800ead0:	b299      	uxth	r1, r3
 800ead2:	0c1b      	lsrs	r3, r3, #16
 800ead4:	eba8 0801 	sub.w	r8, r8, r1
 800ead8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800eadc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800eae0:	fa1f f888 	uxth.w	r8, r8
 800eae4:	1419      	asrs	r1, r3, #16
 800eae6:	454e      	cmp	r6, r9
 800eae8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800eaec:	f84a 3b04 	str.w	r3, [sl], #4
 800eaf0:	d8e8      	bhi.n	800eac4 <__mdiff+0x80>
 800eaf2:	1b33      	subs	r3, r6, r4
 800eaf4:	3b15      	subs	r3, #21
 800eaf6:	f023 0303 	bic.w	r3, r3, #3
 800eafa:	3304      	adds	r3, #4
 800eafc:	3415      	adds	r4, #21
 800eafe:	42a6      	cmp	r6, r4
 800eb00:	bf38      	it	cc
 800eb02:	2304      	movcc	r3, #4
 800eb04:	441d      	add	r5, r3
 800eb06:	4473      	add	r3, lr
 800eb08:	469e      	mov	lr, r3
 800eb0a:	462e      	mov	r6, r5
 800eb0c:	4566      	cmp	r6, ip
 800eb0e:	d30e      	bcc.n	800eb2e <__mdiff+0xea>
 800eb10:	f10c 0203 	add.w	r2, ip, #3
 800eb14:	1b52      	subs	r2, r2, r5
 800eb16:	f022 0203 	bic.w	r2, r2, #3
 800eb1a:	3d03      	subs	r5, #3
 800eb1c:	45ac      	cmp	ip, r5
 800eb1e:	bf38      	it	cc
 800eb20:	2200      	movcc	r2, #0
 800eb22:	4413      	add	r3, r2
 800eb24:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800eb28:	b17a      	cbz	r2, 800eb4a <__mdiff+0x106>
 800eb2a:	6107      	str	r7, [r0, #16]
 800eb2c:	e7a4      	b.n	800ea78 <__mdiff+0x34>
 800eb2e:	f856 8b04 	ldr.w	r8, [r6], #4
 800eb32:	fa11 f288 	uxtah	r2, r1, r8
 800eb36:	1414      	asrs	r4, r2, #16
 800eb38:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800eb3c:	b292      	uxth	r2, r2
 800eb3e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800eb42:	f84e 2b04 	str.w	r2, [lr], #4
 800eb46:	1421      	asrs	r1, r4, #16
 800eb48:	e7e0      	b.n	800eb0c <__mdiff+0xc8>
 800eb4a:	3f01      	subs	r7, #1
 800eb4c:	e7ea      	b.n	800eb24 <__mdiff+0xe0>
 800eb4e:	bf00      	nop
 800eb50:	08013784 	.word	0x08013784
 800eb54:	08013795 	.word	0x08013795

0800eb58 <__d2b>:
 800eb58:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800eb5c:	460f      	mov	r7, r1
 800eb5e:	2101      	movs	r1, #1
 800eb60:	ec59 8b10 	vmov	r8, r9, d0
 800eb64:	4616      	mov	r6, r2
 800eb66:	f7ff fcd5 	bl	800e514 <_Balloc>
 800eb6a:	4604      	mov	r4, r0
 800eb6c:	b930      	cbnz	r0, 800eb7c <__d2b+0x24>
 800eb6e:	4602      	mov	r2, r0
 800eb70:	4b24      	ldr	r3, [pc, #144]	; (800ec04 <__d2b+0xac>)
 800eb72:	4825      	ldr	r0, [pc, #148]	; (800ec08 <__d2b+0xb0>)
 800eb74:	f240 310f 	movw	r1, #783	; 0x30f
 800eb78:	f000 fc3e 	bl	800f3f8 <__assert_func>
 800eb7c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800eb80:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800eb84:	bb2d      	cbnz	r5, 800ebd2 <__d2b+0x7a>
 800eb86:	9301      	str	r3, [sp, #4]
 800eb88:	f1b8 0300 	subs.w	r3, r8, #0
 800eb8c:	d026      	beq.n	800ebdc <__d2b+0x84>
 800eb8e:	4668      	mov	r0, sp
 800eb90:	9300      	str	r3, [sp, #0]
 800eb92:	f7ff fd87 	bl	800e6a4 <__lo0bits>
 800eb96:	e9dd 1200 	ldrd	r1, r2, [sp]
 800eb9a:	b1e8      	cbz	r0, 800ebd8 <__d2b+0x80>
 800eb9c:	f1c0 0320 	rsb	r3, r0, #32
 800eba0:	fa02 f303 	lsl.w	r3, r2, r3
 800eba4:	430b      	orrs	r3, r1
 800eba6:	40c2      	lsrs	r2, r0
 800eba8:	6163      	str	r3, [r4, #20]
 800ebaa:	9201      	str	r2, [sp, #4]
 800ebac:	9b01      	ldr	r3, [sp, #4]
 800ebae:	61a3      	str	r3, [r4, #24]
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	bf14      	ite	ne
 800ebb4:	2202      	movne	r2, #2
 800ebb6:	2201      	moveq	r2, #1
 800ebb8:	6122      	str	r2, [r4, #16]
 800ebba:	b1bd      	cbz	r5, 800ebec <__d2b+0x94>
 800ebbc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ebc0:	4405      	add	r5, r0
 800ebc2:	603d      	str	r5, [r7, #0]
 800ebc4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ebc8:	6030      	str	r0, [r6, #0]
 800ebca:	4620      	mov	r0, r4
 800ebcc:	b003      	add	sp, #12
 800ebce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ebd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ebd6:	e7d6      	b.n	800eb86 <__d2b+0x2e>
 800ebd8:	6161      	str	r1, [r4, #20]
 800ebda:	e7e7      	b.n	800ebac <__d2b+0x54>
 800ebdc:	a801      	add	r0, sp, #4
 800ebde:	f7ff fd61 	bl	800e6a4 <__lo0bits>
 800ebe2:	9b01      	ldr	r3, [sp, #4]
 800ebe4:	6163      	str	r3, [r4, #20]
 800ebe6:	3020      	adds	r0, #32
 800ebe8:	2201      	movs	r2, #1
 800ebea:	e7e5      	b.n	800ebb8 <__d2b+0x60>
 800ebec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ebf0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ebf4:	6038      	str	r0, [r7, #0]
 800ebf6:	6918      	ldr	r0, [r3, #16]
 800ebf8:	f7ff fd34 	bl	800e664 <__hi0bits>
 800ebfc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ec00:	e7e2      	b.n	800ebc8 <__d2b+0x70>
 800ec02:	bf00      	nop
 800ec04:	08013784 	.word	0x08013784
 800ec08:	08013795 	.word	0x08013795

0800ec0c <__ssputs_r>:
 800ec0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec10:	688e      	ldr	r6, [r1, #8]
 800ec12:	461f      	mov	r7, r3
 800ec14:	42be      	cmp	r6, r7
 800ec16:	680b      	ldr	r3, [r1, #0]
 800ec18:	4682      	mov	sl, r0
 800ec1a:	460c      	mov	r4, r1
 800ec1c:	4690      	mov	r8, r2
 800ec1e:	d82c      	bhi.n	800ec7a <__ssputs_r+0x6e>
 800ec20:	898a      	ldrh	r2, [r1, #12]
 800ec22:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ec26:	d026      	beq.n	800ec76 <__ssputs_r+0x6a>
 800ec28:	6965      	ldr	r5, [r4, #20]
 800ec2a:	6909      	ldr	r1, [r1, #16]
 800ec2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ec30:	eba3 0901 	sub.w	r9, r3, r1
 800ec34:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ec38:	1c7b      	adds	r3, r7, #1
 800ec3a:	444b      	add	r3, r9
 800ec3c:	106d      	asrs	r5, r5, #1
 800ec3e:	429d      	cmp	r5, r3
 800ec40:	bf38      	it	cc
 800ec42:	461d      	movcc	r5, r3
 800ec44:	0553      	lsls	r3, r2, #21
 800ec46:	d527      	bpl.n	800ec98 <__ssputs_r+0x8c>
 800ec48:	4629      	mov	r1, r5
 800ec4a:	f7fd fdf1 	bl	800c830 <_malloc_r>
 800ec4e:	4606      	mov	r6, r0
 800ec50:	b360      	cbz	r0, 800ecac <__ssputs_r+0xa0>
 800ec52:	6921      	ldr	r1, [r4, #16]
 800ec54:	464a      	mov	r2, r9
 800ec56:	f000 fbc1 	bl	800f3dc <memcpy>
 800ec5a:	89a3      	ldrh	r3, [r4, #12]
 800ec5c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ec60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ec64:	81a3      	strh	r3, [r4, #12]
 800ec66:	6126      	str	r6, [r4, #16]
 800ec68:	6165      	str	r5, [r4, #20]
 800ec6a:	444e      	add	r6, r9
 800ec6c:	eba5 0509 	sub.w	r5, r5, r9
 800ec70:	6026      	str	r6, [r4, #0]
 800ec72:	60a5      	str	r5, [r4, #8]
 800ec74:	463e      	mov	r6, r7
 800ec76:	42be      	cmp	r6, r7
 800ec78:	d900      	bls.n	800ec7c <__ssputs_r+0x70>
 800ec7a:	463e      	mov	r6, r7
 800ec7c:	6820      	ldr	r0, [r4, #0]
 800ec7e:	4632      	mov	r2, r6
 800ec80:	4641      	mov	r1, r8
 800ec82:	f000 fb6f 	bl	800f364 <memmove>
 800ec86:	68a3      	ldr	r3, [r4, #8]
 800ec88:	1b9b      	subs	r3, r3, r6
 800ec8a:	60a3      	str	r3, [r4, #8]
 800ec8c:	6823      	ldr	r3, [r4, #0]
 800ec8e:	4433      	add	r3, r6
 800ec90:	6023      	str	r3, [r4, #0]
 800ec92:	2000      	movs	r0, #0
 800ec94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec98:	462a      	mov	r2, r5
 800ec9a:	f000 fbf3 	bl	800f484 <_realloc_r>
 800ec9e:	4606      	mov	r6, r0
 800eca0:	2800      	cmp	r0, #0
 800eca2:	d1e0      	bne.n	800ec66 <__ssputs_r+0x5a>
 800eca4:	6921      	ldr	r1, [r4, #16]
 800eca6:	4650      	mov	r0, sl
 800eca8:	f7ff fbe8 	bl	800e47c <_free_r>
 800ecac:	230c      	movs	r3, #12
 800ecae:	f8ca 3000 	str.w	r3, [sl]
 800ecb2:	89a3      	ldrh	r3, [r4, #12]
 800ecb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ecb8:	81a3      	strh	r3, [r4, #12]
 800ecba:	f04f 30ff 	mov.w	r0, #4294967295
 800ecbe:	e7e9      	b.n	800ec94 <__ssputs_r+0x88>

0800ecc0 <_svfiprintf_r>:
 800ecc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecc4:	4698      	mov	r8, r3
 800ecc6:	898b      	ldrh	r3, [r1, #12]
 800ecc8:	061b      	lsls	r3, r3, #24
 800ecca:	b09d      	sub	sp, #116	; 0x74
 800eccc:	4607      	mov	r7, r0
 800ecce:	460d      	mov	r5, r1
 800ecd0:	4614      	mov	r4, r2
 800ecd2:	d50e      	bpl.n	800ecf2 <_svfiprintf_r+0x32>
 800ecd4:	690b      	ldr	r3, [r1, #16]
 800ecd6:	b963      	cbnz	r3, 800ecf2 <_svfiprintf_r+0x32>
 800ecd8:	2140      	movs	r1, #64	; 0x40
 800ecda:	f7fd fda9 	bl	800c830 <_malloc_r>
 800ecde:	6028      	str	r0, [r5, #0]
 800ece0:	6128      	str	r0, [r5, #16]
 800ece2:	b920      	cbnz	r0, 800ecee <_svfiprintf_r+0x2e>
 800ece4:	230c      	movs	r3, #12
 800ece6:	603b      	str	r3, [r7, #0]
 800ece8:	f04f 30ff 	mov.w	r0, #4294967295
 800ecec:	e0d0      	b.n	800ee90 <_svfiprintf_r+0x1d0>
 800ecee:	2340      	movs	r3, #64	; 0x40
 800ecf0:	616b      	str	r3, [r5, #20]
 800ecf2:	2300      	movs	r3, #0
 800ecf4:	9309      	str	r3, [sp, #36]	; 0x24
 800ecf6:	2320      	movs	r3, #32
 800ecf8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ecfc:	f8cd 800c 	str.w	r8, [sp, #12]
 800ed00:	2330      	movs	r3, #48	; 0x30
 800ed02:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800eea8 <_svfiprintf_r+0x1e8>
 800ed06:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ed0a:	f04f 0901 	mov.w	r9, #1
 800ed0e:	4623      	mov	r3, r4
 800ed10:	469a      	mov	sl, r3
 800ed12:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ed16:	b10a      	cbz	r2, 800ed1c <_svfiprintf_r+0x5c>
 800ed18:	2a25      	cmp	r2, #37	; 0x25
 800ed1a:	d1f9      	bne.n	800ed10 <_svfiprintf_r+0x50>
 800ed1c:	ebba 0b04 	subs.w	fp, sl, r4
 800ed20:	d00b      	beq.n	800ed3a <_svfiprintf_r+0x7a>
 800ed22:	465b      	mov	r3, fp
 800ed24:	4622      	mov	r2, r4
 800ed26:	4629      	mov	r1, r5
 800ed28:	4638      	mov	r0, r7
 800ed2a:	f7ff ff6f 	bl	800ec0c <__ssputs_r>
 800ed2e:	3001      	adds	r0, #1
 800ed30:	f000 80a9 	beq.w	800ee86 <_svfiprintf_r+0x1c6>
 800ed34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ed36:	445a      	add	r2, fp
 800ed38:	9209      	str	r2, [sp, #36]	; 0x24
 800ed3a:	f89a 3000 	ldrb.w	r3, [sl]
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	f000 80a1 	beq.w	800ee86 <_svfiprintf_r+0x1c6>
 800ed44:	2300      	movs	r3, #0
 800ed46:	f04f 32ff 	mov.w	r2, #4294967295
 800ed4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ed4e:	f10a 0a01 	add.w	sl, sl, #1
 800ed52:	9304      	str	r3, [sp, #16]
 800ed54:	9307      	str	r3, [sp, #28]
 800ed56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ed5a:	931a      	str	r3, [sp, #104]	; 0x68
 800ed5c:	4654      	mov	r4, sl
 800ed5e:	2205      	movs	r2, #5
 800ed60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed64:	4850      	ldr	r0, [pc, #320]	; (800eea8 <_svfiprintf_r+0x1e8>)
 800ed66:	f7f1 fa5b 	bl	8000220 <memchr>
 800ed6a:	9a04      	ldr	r2, [sp, #16]
 800ed6c:	b9d8      	cbnz	r0, 800eda6 <_svfiprintf_r+0xe6>
 800ed6e:	06d0      	lsls	r0, r2, #27
 800ed70:	bf44      	itt	mi
 800ed72:	2320      	movmi	r3, #32
 800ed74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ed78:	0711      	lsls	r1, r2, #28
 800ed7a:	bf44      	itt	mi
 800ed7c:	232b      	movmi	r3, #43	; 0x2b
 800ed7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ed82:	f89a 3000 	ldrb.w	r3, [sl]
 800ed86:	2b2a      	cmp	r3, #42	; 0x2a
 800ed88:	d015      	beq.n	800edb6 <_svfiprintf_r+0xf6>
 800ed8a:	9a07      	ldr	r2, [sp, #28]
 800ed8c:	4654      	mov	r4, sl
 800ed8e:	2000      	movs	r0, #0
 800ed90:	f04f 0c0a 	mov.w	ip, #10
 800ed94:	4621      	mov	r1, r4
 800ed96:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ed9a:	3b30      	subs	r3, #48	; 0x30
 800ed9c:	2b09      	cmp	r3, #9
 800ed9e:	d94d      	bls.n	800ee3c <_svfiprintf_r+0x17c>
 800eda0:	b1b0      	cbz	r0, 800edd0 <_svfiprintf_r+0x110>
 800eda2:	9207      	str	r2, [sp, #28]
 800eda4:	e014      	b.n	800edd0 <_svfiprintf_r+0x110>
 800eda6:	eba0 0308 	sub.w	r3, r0, r8
 800edaa:	fa09 f303 	lsl.w	r3, r9, r3
 800edae:	4313      	orrs	r3, r2
 800edb0:	9304      	str	r3, [sp, #16]
 800edb2:	46a2      	mov	sl, r4
 800edb4:	e7d2      	b.n	800ed5c <_svfiprintf_r+0x9c>
 800edb6:	9b03      	ldr	r3, [sp, #12]
 800edb8:	1d19      	adds	r1, r3, #4
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	9103      	str	r1, [sp, #12]
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	bfbb      	ittet	lt
 800edc2:	425b      	neglt	r3, r3
 800edc4:	f042 0202 	orrlt.w	r2, r2, #2
 800edc8:	9307      	strge	r3, [sp, #28]
 800edca:	9307      	strlt	r3, [sp, #28]
 800edcc:	bfb8      	it	lt
 800edce:	9204      	strlt	r2, [sp, #16]
 800edd0:	7823      	ldrb	r3, [r4, #0]
 800edd2:	2b2e      	cmp	r3, #46	; 0x2e
 800edd4:	d10c      	bne.n	800edf0 <_svfiprintf_r+0x130>
 800edd6:	7863      	ldrb	r3, [r4, #1]
 800edd8:	2b2a      	cmp	r3, #42	; 0x2a
 800edda:	d134      	bne.n	800ee46 <_svfiprintf_r+0x186>
 800eddc:	9b03      	ldr	r3, [sp, #12]
 800edde:	1d1a      	adds	r2, r3, #4
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	9203      	str	r2, [sp, #12]
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	bfb8      	it	lt
 800ede8:	f04f 33ff 	movlt.w	r3, #4294967295
 800edec:	3402      	adds	r4, #2
 800edee:	9305      	str	r3, [sp, #20]
 800edf0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800eeb8 <_svfiprintf_r+0x1f8>
 800edf4:	7821      	ldrb	r1, [r4, #0]
 800edf6:	2203      	movs	r2, #3
 800edf8:	4650      	mov	r0, sl
 800edfa:	f7f1 fa11 	bl	8000220 <memchr>
 800edfe:	b138      	cbz	r0, 800ee10 <_svfiprintf_r+0x150>
 800ee00:	9b04      	ldr	r3, [sp, #16]
 800ee02:	eba0 000a 	sub.w	r0, r0, sl
 800ee06:	2240      	movs	r2, #64	; 0x40
 800ee08:	4082      	lsls	r2, r0
 800ee0a:	4313      	orrs	r3, r2
 800ee0c:	3401      	adds	r4, #1
 800ee0e:	9304      	str	r3, [sp, #16]
 800ee10:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee14:	4825      	ldr	r0, [pc, #148]	; (800eeac <_svfiprintf_r+0x1ec>)
 800ee16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ee1a:	2206      	movs	r2, #6
 800ee1c:	f7f1 fa00 	bl	8000220 <memchr>
 800ee20:	2800      	cmp	r0, #0
 800ee22:	d038      	beq.n	800ee96 <_svfiprintf_r+0x1d6>
 800ee24:	4b22      	ldr	r3, [pc, #136]	; (800eeb0 <_svfiprintf_r+0x1f0>)
 800ee26:	bb1b      	cbnz	r3, 800ee70 <_svfiprintf_r+0x1b0>
 800ee28:	9b03      	ldr	r3, [sp, #12]
 800ee2a:	3307      	adds	r3, #7
 800ee2c:	f023 0307 	bic.w	r3, r3, #7
 800ee30:	3308      	adds	r3, #8
 800ee32:	9303      	str	r3, [sp, #12]
 800ee34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee36:	4433      	add	r3, r6
 800ee38:	9309      	str	r3, [sp, #36]	; 0x24
 800ee3a:	e768      	b.n	800ed0e <_svfiprintf_r+0x4e>
 800ee3c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ee40:	460c      	mov	r4, r1
 800ee42:	2001      	movs	r0, #1
 800ee44:	e7a6      	b.n	800ed94 <_svfiprintf_r+0xd4>
 800ee46:	2300      	movs	r3, #0
 800ee48:	3401      	adds	r4, #1
 800ee4a:	9305      	str	r3, [sp, #20]
 800ee4c:	4619      	mov	r1, r3
 800ee4e:	f04f 0c0a 	mov.w	ip, #10
 800ee52:	4620      	mov	r0, r4
 800ee54:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ee58:	3a30      	subs	r2, #48	; 0x30
 800ee5a:	2a09      	cmp	r2, #9
 800ee5c:	d903      	bls.n	800ee66 <_svfiprintf_r+0x1a6>
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d0c6      	beq.n	800edf0 <_svfiprintf_r+0x130>
 800ee62:	9105      	str	r1, [sp, #20]
 800ee64:	e7c4      	b.n	800edf0 <_svfiprintf_r+0x130>
 800ee66:	fb0c 2101 	mla	r1, ip, r1, r2
 800ee6a:	4604      	mov	r4, r0
 800ee6c:	2301      	movs	r3, #1
 800ee6e:	e7f0      	b.n	800ee52 <_svfiprintf_r+0x192>
 800ee70:	ab03      	add	r3, sp, #12
 800ee72:	9300      	str	r3, [sp, #0]
 800ee74:	462a      	mov	r2, r5
 800ee76:	4b0f      	ldr	r3, [pc, #60]	; (800eeb4 <_svfiprintf_r+0x1f4>)
 800ee78:	a904      	add	r1, sp, #16
 800ee7a:	4638      	mov	r0, r7
 800ee7c:	f7fd fe04 	bl	800ca88 <_printf_float>
 800ee80:	1c42      	adds	r2, r0, #1
 800ee82:	4606      	mov	r6, r0
 800ee84:	d1d6      	bne.n	800ee34 <_svfiprintf_r+0x174>
 800ee86:	89ab      	ldrh	r3, [r5, #12]
 800ee88:	065b      	lsls	r3, r3, #25
 800ee8a:	f53f af2d 	bmi.w	800ece8 <_svfiprintf_r+0x28>
 800ee8e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ee90:	b01d      	add	sp, #116	; 0x74
 800ee92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee96:	ab03      	add	r3, sp, #12
 800ee98:	9300      	str	r3, [sp, #0]
 800ee9a:	462a      	mov	r2, r5
 800ee9c:	4b05      	ldr	r3, [pc, #20]	; (800eeb4 <_svfiprintf_r+0x1f4>)
 800ee9e:	a904      	add	r1, sp, #16
 800eea0:	4638      	mov	r0, r7
 800eea2:	f7fe f895 	bl	800cfd0 <_printf_i>
 800eea6:	e7eb      	b.n	800ee80 <_svfiprintf_r+0x1c0>
 800eea8:	080138ec 	.word	0x080138ec
 800eeac:	080138f6 	.word	0x080138f6
 800eeb0:	0800ca89 	.word	0x0800ca89
 800eeb4:	0800ec0d 	.word	0x0800ec0d
 800eeb8:	080138f2 	.word	0x080138f2

0800eebc <__sfputc_r>:
 800eebc:	6893      	ldr	r3, [r2, #8]
 800eebe:	3b01      	subs	r3, #1
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	b410      	push	{r4}
 800eec4:	6093      	str	r3, [r2, #8]
 800eec6:	da08      	bge.n	800eeda <__sfputc_r+0x1e>
 800eec8:	6994      	ldr	r4, [r2, #24]
 800eeca:	42a3      	cmp	r3, r4
 800eecc:	db01      	blt.n	800eed2 <__sfputc_r+0x16>
 800eece:	290a      	cmp	r1, #10
 800eed0:	d103      	bne.n	800eeda <__sfputc_r+0x1e>
 800eed2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eed6:	f7fe bb30 	b.w	800d53a <__swbuf_r>
 800eeda:	6813      	ldr	r3, [r2, #0]
 800eedc:	1c58      	adds	r0, r3, #1
 800eede:	6010      	str	r0, [r2, #0]
 800eee0:	7019      	strb	r1, [r3, #0]
 800eee2:	4608      	mov	r0, r1
 800eee4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eee8:	4770      	bx	lr

0800eeea <__sfputs_r>:
 800eeea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eeec:	4606      	mov	r6, r0
 800eeee:	460f      	mov	r7, r1
 800eef0:	4614      	mov	r4, r2
 800eef2:	18d5      	adds	r5, r2, r3
 800eef4:	42ac      	cmp	r4, r5
 800eef6:	d101      	bne.n	800eefc <__sfputs_r+0x12>
 800eef8:	2000      	movs	r0, #0
 800eefa:	e007      	b.n	800ef0c <__sfputs_r+0x22>
 800eefc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef00:	463a      	mov	r2, r7
 800ef02:	4630      	mov	r0, r6
 800ef04:	f7ff ffda 	bl	800eebc <__sfputc_r>
 800ef08:	1c43      	adds	r3, r0, #1
 800ef0a:	d1f3      	bne.n	800eef4 <__sfputs_r+0xa>
 800ef0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ef10 <_vfiprintf_r>:
 800ef10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef14:	460d      	mov	r5, r1
 800ef16:	b09d      	sub	sp, #116	; 0x74
 800ef18:	4614      	mov	r4, r2
 800ef1a:	4698      	mov	r8, r3
 800ef1c:	4606      	mov	r6, r0
 800ef1e:	b118      	cbz	r0, 800ef28 <_vfiprintf_r+0x18>
 800ef20:	6a03      	ldr	r3, [r0, #32]
 800ef22:	b90b      	cbnz	r3, 800ef28 <_vfiprintf_r+0x18>
 800ef24:	f7fe fa02 	bl	800d32c <__sinit>
 800ef28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ef2a:	07d9      	lsls	r1, r3, #31
 800ef2c:	d405      	bmi.n	800ef3a <_vfiprintf_r+0x2a>
 800ef2e:	89ab      	ldrh	r3, [r5, #12]
 800ef30:	059a      	lsls	r2, r3, #22
 800ef32:	d402      	bmi.n	800ef3a <_vfiprintf_r+0x2a>
 800ef34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ef36:	f7fe fc22 	bl	800d77e <__retarget_lock_acquire_recursive>
 800ef3a:	89ab      	ldrh	r3, [r5, #12]
 800ef3c:	071b      	lsls	r3, r3, #28
 800ef3e:	d501      	bpl.n	800ef44 <_vfiprintf_r+0x34>
 800ef40:	692b      	ldr	r3, [r5, #16]
 800ef42:	b99b      	cbnz	r3, 800ef6c <_vfiprintf_r+0x5c>
 800ef44:	4629      	mov	r1, r5
 800ef46:	4630      	mov	r0, r6
 800ef48:	f7fe fb34 	bl	800d5b4 <__swsetup_r>
 800ef4c:	b170      	cbz	r0, 800ef6c <_vfiprintf_r+0x5c>
 800ef4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ef50:	07dc      	lsls	r4, r3, #31
 800ef52:	d504      	bpl.n	800ef5e <_vfiprintf_r+0x4e>
 800ef54:	f04f 30ff 	mov.w	r0, #4294967295
 800ef58:	b01d      	add	sp, #116	; 0x74
 800ef5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef5e:	89ab      	ldrh	r3, [r5, #12]
 800ef60:	0598      	lsls	r0, r3, #22
 800ef62:	d4f7      	bmi.n	800ef54 <_vfiprintf_r+0x44>
 800ef64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ef66:	f7fe fc0b 	bl	800d780 <__retarget_lock_release_recursive>
 800ef6a:	e7f3      	b.n	800ef54 <_vfiprintf_r+0x44>
 800ef6c:	2300      	movs	r3, #0
 800ef6e:	9309      	str	r3, [sp, #36]	; 0x24
 800ef70:	2320      	movs	r3, #32
 800ef72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ef76:	f8cd 800c 	str.w	r8, [sp, #12]
 800ef7a:	2330      	movs	r3, #48	; 0x30
 800ef7c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800f130 <_vfiprintf_r+0x220>
 800ef80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ef84:	f04f 0901 	mov.w	r9, #1
 800ef88:	4623      	mov	r3, r4
 800ef8a:	469a      	mov	sl, r3
 800ef8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ef90:	b10a      	cbz	r2, 800ef96 <_vfiprintf_r+0x86>
 800ef92:	2a25      	cmp	r2, #37	; 0x25
 800ef94:	d1f9      	bne.n	800ef8a <_vfiprintf_r+0x7a>
 800ef96:	ebba 0b04 	subs.w	fp, sl, r4
 800ef9a:	d00b      	beq.n	800efb4 <_vfiprintf_r+0xa4>
 800ef9c:	465b      	mov	r3, fp
 800ef9e:	4622      	mov	r2, r4
 800efa0:	4629      	mov	r1, r5
 800efa2:	4630      	mov	r0, r6
 800efa4:	f7ff ffa1 	bl	800eeea <__sfputs_r>
 800efa8:	3001      	adds	r0, #1
 800efaa:	f000 80a9 	beq.w	800f100 <_vfiprintf_r+0x1f0>
 800efae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800efb0:	445a      	add	r2, fp
 800efb2:	9209      	str	r2, [sp, #36]	; 0x24
 800efb4:	f89a 3000 	ldrb.w	r3, [sl]
 800efb8:	2b00      	cmp	r3, #0
 800efba:	f000 80a1 	beq.w	800f100 <_vfiprintf_r+0x1f0>
 800efbe:	2300      	movs	r3, #0
 800efc0:	f04f 32ff 	mov.w	r2, #4294967295
 800efc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800efc8:	f10a 0a01 	add.w	sl, sl, #1
 800efcc:	9304      	str	r3, [sp, #16]
 800efce:	9307      	str	r3, [sp, #28]
 800efd0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800efd4:	931a      	str	r3, [sp, #104]	; 0x68
 800efd6:	4654      	mov	r4, sl
 800efd8:	2205      	movs	r2, #5
 800efda:	f814 1b01 	ldrb.w	r1, [r4], #1
 800efde:	4854      	ldr	r0, [pc, #336]	; (800f130 <_vfiprintf_r+0x220>)
 800efe0:	f7f1 f91e 	bl	8000220 <memchr>
 800efe4:	9a04      	ldr	r2, [sp, #16]
 800efe6:	b9d8      	cbnz	r0, 800f020 <_vfiprintf_r+0x110>
 800efe8:	06d1      	lsls	r1, r2, #27
 800efea:	bf44      	itt	mi
 800efec:	2320      	movmi	r3, #32
 800efee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eff2:	0713      	lsls	r3, r2, #28
 800eff4:	bf44      	itt	mi
 800eff6:	232b      	movmi	r3, #43	; 0x2b
 800eff8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800effc:	f89a 3000 	ldrb.w	r3, [sl]
 800f000:	2b2a      	cmp	r3, #42	; 0x2a
 800f002:	d015      	beq.n	800f030 <_vfiprintf_r+0x120>
 800f004:	9a07      	ldr	r2, [sp, #28]
 800f006:	4654      	mov	r4, sl
 800f008:	2000      	movs	r0, #0
 800f00a:	f04f 0c0a 	mov.w	ip, #10
 800f00e:	4621      	mov	r1, r4
 800f010:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f014:	3b30      	subs	r3, #48	; 0x30
 800f016:	2b09      	cmp	r3, #9
 800f018:	d94d      	bls.n	800f0b6 <_vfiprintf_r+0x1a6>
 800f01a:	b1b0      	cbz	r0, 800f04a <_vfiprintf_r+0x13a>
 800f01c:	9207      	str	r2, [sp, #28]
 800f01e:	e014      	b.n	800f04a <_vfiprintf_r+0x13a>
 800f020:	eba0 0308 	sub.w	r3, r0, r8
 800f024:	fa09 f303 	lsl.w	r3, r9, r3
 800f028:	4313      	orrs	r3, r2
 800f02a:	9304      	str	r3, [sp, #16]
 800f02c:	46a2      	mov	sl, r4
 800f02e:	e7d2      	b.n	800efd6 <_vfiprintf_r+0xc6>
 800f030:	9b03      	ldr	r3, [sp, #12]
 800f032:	1d19      	adds	r1, r3, #4
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	9103      	str	r1, [sp, #12]
 800f038:	2b00      	cmp	r3, #0
 800f03a:	bfbb      	ittet	lt
 800f03c:	425b      	neglt	r3, r3
 800f03e:	f042 0202 	orrlt.w	r2, r2, #2
 800f042:	9307      	strge	r3, [sp, #28]
 800f044:	9307      	strlt	r3, [sp, #28]
 800f046:	bfb8      	it	lt
 800f048:	9204      	strlt	r2, [sp, #16]
 800f04a:	7823      	ldrb	r3, [r4, #0]
 800f04c:	2b2e      	cmp	r3, #46	; 0x2e
 800f04e:	d10c      	bne.n	800f06a <_vfiprintf_r+0x15a>
 800f050:	7863      	ldrb	r3, [r4, #1]
 800f052:	2b2a      	cmp	r3, #42	; 0x2a
 800f054:	d134      	bne.n	800f0c0 <_vfiprintf_r+0x1b0>
 800f056:	9b03      	ldr	r3, [sp, #12]
 800f058:	1d1a      	adds	r2, r3, #4
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	9203      	str	r2, [sp, #12]
 800f05e:	2b00      	cmp	r3, #0
 800f060:	bfb8      	it	lt
 800f062:	f04f 33ff 	movlt.w	r3, #4294967295
 800f066:	3402      	adds	r4, #2
 800f068:	9305      	str	r3, [sp, #20]
 800f06a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800f140 <_vfiprintf_r+0x230>
 800f06e:	7821      	ldrb	r1, [r4, #0]
 800f070:	2203      	movs	r2, #3
 800f072:	4650      	mov	r0, sl
 800f074:	f7f1 f8d4 	bl	8000220 <memchr>
 800f078:	b138      	cbz	r0, 800f08a <_vfiprintf_r+0x17a>
 800f07a:	9b04      	ldr	r3, [sp, #16]
 800f07c:	eba0 000a 	sub.w	r0, r0, sl
 800f080:	2240      	movs	r2, #64	; 0x40
 800f082:	4082      	lsls	r2, r0
 800f084:	4313      	orrs	r3, r2
 800f086:	3401      	adds	r4, #1
 800f088:	9304      	str	r3, [sp, #16]
 800f08a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f08e:	4829      	ldr	r0, [pc, #164]	; (800f134 <_vfiprintf_r+0x224>)
 800f090:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f094:	2206      	movs	r2, #6
 800f096:	f7f1 f8c3 	bl	8000220 <memchr>
 800f09a:	2800      	cmp	r0, #0
 800f09c:	d03f      	beq.n	800f11e <_vfiprintf_r+0x20e>
 800f09e:	4b26      	ldr	r3, [pc, #152]	; (800f138 <_vfiprintf_r+0x228>)
 800f0a0:	bb1b      	cbnz	r3, 800f0ea <_vfiprintf_r+0x1da>
 800f0a2:	9b03      	ldr	r3, [sp, #12]
 800f0a4:	3307      	adds	r3, #7
 800f0a6:	f023 0307 	bic.w	r3, r3, #7
 800f0aa:	3308      	adds	r3, #8
 800f0ac:	9303      	str	r3, [sp, #12]
 800f0ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f0b0:	443b      	add	r3, r7
 800f0b2:	9309      	str	r3, [sp, #36]	; 0x24
 800f0b4:	e768      	b.n	800ef88 <_vfiprintf_r+0x78>
 800f0b6:	fb0c 3202 	mla	r2, ip, r2, r3
 800f0ba:	460c      	mov	r4, r1
 800f0bc:	2001      	movs	r0, #1
 800f0be:	e7a6      	b.n	800f00e <_vfiprintf_r+0xfe>
 800f0c0:	2300      	movs	r3, #0
 800f0c2:	3401      	adds	r4, #1
 800f0c4:	9305      	str	r3, [sp, #20]
 800f0c6:	4619      	mov	r1, r3
 800f0c8:	f04f 0c0a 	mov.w	ip, #10
 800f0cc:	4620      	mov	r0, r4
 800f0ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f0d2:	3a30      	subs	r2, #48	; 0x30
 800f0d4:	2a09      	cmp	r2, #9
 800f0d6:	d903      	bls.n	800f0e0 <_vfiprintf_r+0x1d0>
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d0c6      	beq.n	800f06a <_vfiprintf_r+0x15a>
 800f0dc:	9105      	str	r1, [sp, #20]
 800f0de:	e7c4      	b.n	800f06a <_vfiprintf_r+0x15a>
 800f0e0:	fb0c 2101 	mla	r1, ip, r1, r2
 800f0e4:	4604      	mov	r4, r0
 800f0e6:	2301      	movs	r3, #1
 800f0e8:	e7f0      	b.n	800f0cc <_vfiprintf_r+0x1bc>
 800f0ea:	ab03      	add	r3, sp, #12
 800f0ec:	9300      	str	r3, [sp, #0]
 800f0ee:	462a      	mov	r2, r5
 800f0f0:	4b12      	ldr	r3, [pc, #72]	; (800f13c <_vfiprintf_r+0x22c>)
 800f0f2:	a904      	add	r1, sp, #16
 800f0f4:	4630      	mov	r0, r6
 800f0f6:	f7fd fcc7 	bl	800ca88 <_printf_float>
 800f0fa:	4607      	mov	r7, r0
 800f0fc:	1c78      	adds	r0, r7, #1
 800f0fe:	d1d6      	bne.n	800f0ae <_vfiprintf_r+0x19e>
 800f100:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f102:	07d9      	lsls	r1, r3, #31
 800f104:	d405      	bmi.n	800f112 <_vfiprintf_r+0x202>
 800f106:	89ab      	ldrh	r3, [r5, #12]
 800f108:	059a      	lsls	r2, r3, #22
 800f10a:	d402      	bmi.n	800f112 <_vfiprintf_r+0x202>
 800f10c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f10e:	f7fe fb37 	bl	800d780 <__retarget_lock_release_recursive>
 800f112:	89ab      	ldrh	r3, [r5, #12]
 800f114:	065b      	lsls	r3, r3, #25
 800f116:	f53f af1d 	bmi.w	800ef54 <_vfiprintf_r+0x44>
 800f11a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f11c:	e71c      	b.n	800ef58 <_vfiprintf_r+0x48>
 800f11e:	ab03      	add	r3, sp, #12
 800f120:	9300      	str	r3, [sp, #0]
 800f122:	462a      	mov	r2, r5
 800f124:	4b05      	ldr	r3, [pc, #20]	; (800f13c <_vfiprintf_r+0x22c>)
 800f126:	a904      	add	r1, sp, #16
 800f128:	4630      	mov	r0, r6
 800f12a:	f7fd ff51 	bl	800cfd0 <_printf_i>
 800f12e:	e7e4      	b.n	800f0fa <_vfiprintf_r+0x1ea>
 800f130:	080138ec 	.word	0x080138ec
 800f134:	080138f6 	.word	0x080138f6
 800f138:	0800ca89 	.word	0x0800ca89
 800f13c:	0800eeeb 	.word	0x0800eeeb
 800f140:	080138f2 	.word	0x080138f2

0800f144 <__sflush_r>:
 800f144:	898a      	ldrh	r2, [r1, #12]
 800f146:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f14a:	4605      	mov	r5, r0
 800f14c:	0710      	lsls	r0, r2, #28
 800f14e:	460c      	mov	r4, r1
 800f150:	d458      	bmi.n	800f204 <__sflush_r+0xc0>
 800f152:	684b      	ldr	r3, [r1, #4]
 800f154:	2b00      	cmp	r3, #0
 800f156:	dc05      	bgt.n	800f164 <__sflush_r+0x20>
 800f158:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	dc02      	bgt.n	800f164 <__sflush_r+0x20>
 800f15e:	2000      	movs	r0, #0
 800f160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f164:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f166:	2e00      	cmp	r6, #0
 800f168:	d0f9      	beq.n	800f15e <__sflush_r+0x1a>
 800f16a:	2300      	movs	r3, #0
 800f16c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f170:	682f      	ldr	r7, [r5, #0]
 800f172:	6a21      	ldr	r1, [r4, #32]
 800f174:	602b      	str	r3, [r5, #0]
 800f176:	d032      	beq.n	800f1de <__sflush_r+0x9a>
 800f178:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f17a:	89a3      	ldrh	r3, [r4, #12]
 800f17c:	075a      	lsls	r2, r3, #29
 800f17e:	d505      	bpl.n	800f18c <__sflush_r+0x48>
 800f180:	6863      	ldr	r3, [r4, #4]
 800f182:	1ac0      	subs	r0, r0, r3
 800f184:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f186:	b10b      	cbz	r3, 800f18c <__sflush_r+0x48>
 800f188:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f18a:	1ac0      	subs	r0, r0, r3
 800f18c:	2300      	movs	r3, #0
 800f18e:	4602      	mov	r2, r0
 800f190:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f192:	6a21      	ldr	r1, [r4, #32]
 800f194:	4628      	mov	r0, r5
 800f196:	47b0      	blx	r6
 800f198:	1c43      	adds	r3, r0, #1
 800f19a:	89a3      	ldrh	r3, [r4, #12]
 800f19c:	d106      	bne.n	800f1ac <__sflush_r+0x68>
 800f19e:	6829      	ldr	r1, [r5, #0]
 800f1a0:	291d      	cmp	r1, #29
 800f1a2:	d82b      	bhi.n	800f1fc <__sflush_r+0xb8>
 800f1a4:	4a29      	ldr	r2, [pc, #164]	; (800f24c <__sflush_r+0x108>)
 800f1a6:	410a      	asrs	r2, r1
 800f1a8:	07d6      	lsls	r6, r2, #31
 800f1aa:	d427      	bmi.n	800f1fc <__sflush_r+0xb8>
 800f1ac:	2200      	movs	r2, #0
 800f1ae:	6062      	str	r2, [r4, #4]
 800f1b0:	04d9      	lsls	r1, r3, #19
 800f1b2:	6922      	ldr	r2, [r4, #16]
 800f1b4:	6022      	str	r2, [r4, #0]
 800f1b6:	d504      	bpl.n	800f1c2 <__sflush_r+0x7e>
 800f1b8:	1c42      	adds	r2, r0, #1
 800f1ba:	d101      	bne.n	800f1c0 <__sflush_r+0x7c>
 800f1bc:	682b      	ldr	r3, [r5, #0]
 800f1be:	b903      	cbnz	r3, 800f1c2 <__sflush_r+0x7e>
 800f1c0:	6560      	str	r0, [r4, #84]	; 0x54
 800f1c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f1c4:	602f      	str	r7, [r5, #0]
 800f1c6:	2900      	cmp	r1, #0
 800f1c8:	d0c9      	beq.n	800f15e <__sflush_r+0x1a>
 800f1ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f1ce:	4299      	cmp	r1, r3
 800f1d0:	d002      	beq.n	800f1d8 <__sflush_r+0x94>
 800f1d2:	4628      	mov	r0, r5
 800f1d4:	f7ff f952 	bl	800e47c <_free_r>
 800f1d8:	2000      	movs	r0, #0
 800f1da:	6360      	str	r0, [r4, #52]	; 0x34
 800f1dc:	e7c0      	b.n	800f160 <__sflush_r+0x1c>
 800f1de:	2301      	movs	r3, #1
 800f1e0:	4628      	mov	r0, r5
 800f1e2:	47b0      	blx	r6
 800f1e4:	1c41      	adds	r1, r0, #1
 800f1e6:	d1c8      	bne.n	800f17a <__sflush_r+0x36>
 800f1e8:	682b      	ldr	r3, [r5, #0]
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d0c5      	beq.n	800f17a <__sflush_r+0x36>
 800f1ee:	2b1d      	cmp	r3, #29
 800f1f0:	d001      	beq.n	800f1f6 <__sflush_r+0xb2>
 800f1f2:	2b16      	cmp	r3, #22
 800f1f4:	d101      	bne.n	800f1fa <__sflush_r+0xb6>
 800f1f6:	602f      	str	r7, [r5, #0]
 800f1f8:	e7b1      	b.n	800f15e <__sflush_r+0x1a>
 800f1fa:	89a3      	ldrh	r3, [r4, #12]
 800f1fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f200:	81a3      	strh	r3, [r4, #12]
 800f202:	e7ad      	b.n	800f160 <__sflush_r+0x1c>
 800f204:	690f      	ldr	r7, [r1, #16]
 800f206:	2f00      	cmp	r7, #0
 800f208:	d0a9      	beq.n	800f15e <__sflush_r+0x1a>
 800f20a:	0793      	lsls	r3, r2, #30
 800f20c:	680e      	ldr	r6, [r1, #0]
 800f20e:	bf08      	it	eq
 800f210:	694b      	ldreq	r3, [r1, #20]
 800f212:	600f      	str	r7, [r1, #0]
 800f214:	bf18      	it	ne
 800f216:	2300      	movne	r3, #0
 800f218:	eba6 0807 	sub.w	r8, r6, r7
 800f21c:	608b      	str	r3, [r1, #8]
 800f21e:	f1b8 0f00 	cmp.w	r8, #0
 800f222:	dd9c      	ble.n	800f15e <__sflush_r+0x1a>
 800f224:	6a21      	ldr	r1, [r4, #32]
 800f226:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f228:	4643      	mov	r3, r8
 800f22a:	463a      	mov	r2, r7
 800f22c:	4628      	mov	r0, r5
 800f22e:	47b0      	blx	r6
 800f230:	2800      	cmp	r0, #0
 800f232:	dc06      	bgt.n	800f242 <__sflush_r+0xfe>
 800f234:	89a3      	ldrh	r3, [r4, #12]
 800f236:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f23a:	81a3      	strh	r3, [r4, #12]
 800f23c:	f04f 30ff 	mov.w	r0, #4294967295
 800f240:	e78e      	b.n	800f160 <__sflush_r+0x1c>
 800f242:	4407      	add	r7, r0
 800f244:	eba8 0800 	sub.w	r8, r8, r0
 800f248:	e7e9      	b.n	800f21e <__sflush_r+0xda>
 800f24a:	bf00      	nop
 800f24c:	dfbffffe 	.word	0xdfbffffe

0800f250 <_fflush_r>:
 800f250:	b538      	push	{r3, r4, r5, lr}
 800f252:	690b      	ldr	r3, [r1, #16]
 800f254:	4605      	mov	r5, r0
 800f256:	460c      	mov	r4, r1
 800f258:	b913      	cbnz	r3, 800f260 <_fflush_r+0x10>
 800f25a:	2500      	movs	r5, #0
 800f25c:	4628      	mov	r0, r5
 800f25e:	bd38      	pop	{r3, r4, r5, pc}
 800f260:	b118      	cbz	r0, 800f26a <_fflush_r+0x1a>
 800f262:	6a03      	ldr	r3, [r0, #32]
 800f264:	b90b      	cbnz	r3, 800f26a <_fflush_r+0x1a>
 800f266:	f7fe f861 	bl	800d32c <__sinit>
 800f26a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d0f3      	beq.n	800f25a <_fflush_r+0xa>
 800f272:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f274:	07d0      	lsls	r0, r2, #31
 800f276:	d404      	bmi.n	800f282 <_fflush_r+0x32>
 800f278:	0599      	lsls	r1, r3, #22
 800f27a:	d402      	bmi.n	800f282 <_fflush_r+0x32>
 800f27c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f27e:	f7fe fa7e 	bl	800d77e <__retarget_lock_acquire_recursive>
 800f282:	4628      	mov	r0, r5
 800f284:	4621      	mov	r1, r4
 800f286:	f7ff ff5d 	bl	800f144 <__sflush_r>
 800f28a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f28c:	07da      	lsls	r2, r3, #31
 800f28e:	4605      	mov	r5, r0
 800f290:	d4e4      	bmi.n	800f25c <_fflush_r+0xc>
 800f292:	89a3      	ldrh	r3, [r4, #12]
 800f294:	059b      	lsls	r3, r3, #22
 800f296:	d4e1      	bmi.n	800f25c <_fflush_r+0xc>
 800f298:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f29a:	f7fe fa71 	bl	800d780 <__retarget_lock_release_recursive>
 800f29e:	e7dd      	b.n	800f25c <_fflush_r+0xc>

0800f2a0 <__swhatbuf_r>:
 800f2a0:	b570      	push	{r4, r5, r6, lr}
 800f2a2:	460c      	mov	r4, r1
 800f2a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f2a8:	2900      	cmp	r1, #0
 800f2aa:	b096      	sub	sp, #88	; 0x58
 800f2ac:	4615      	mov	r5, r2
 800f2ae:	461e      	mov	r6, r3
 800f2b0:	da0d      	bge.n	800f2ce <__swhatbuf_r+0x2e>
 800f2b2:	89a3      	ldrh	r3, [r4, #12]
 800f2b4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f2b8:	f04f 0100 	mov.w	r1, #0
 800f2bc:	bf0c      	ite	eq
 800f2be:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800f2c2:	2340      	movne	r3, #64	; 0x40
 800f2c4:	2000      	movs	r0, #0
 800f2c6:	6031      	str	r1, [r6, #0]
 800f2c8:	602b      	str	r3, [r5, #0]
 800f2ca:	b016      	add	sp, #88	; 0x58
 800f2cc:	bd70      	pop	{r4, r5, r6, pc}
 800f2ce:	466a      	mov	r2, sp
 800f2d0:	f000 f862 	bl	800f398 <_fstat_r>
 800f2d4:	2800      	cmp	r0, #0
 800f2d6:	dbec      	blt.n	800f2b2 <__swhatbuf_r+0x12>
 800f2d8:	9901      	ldr	r1, [sp, #4]
 800f2da:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800f2de:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800f2e2:	4259      	negs	r1, r3
 800f2e4:	4159      	adcs	r1, r3
 800f2e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f2ea:	e7eb      	b.n	800f2c4 <__swhatbuf_r+0x24>

0800f2ec <__smakebuf_r>:
 800f2ec:	898b      	ldrh	r3, [r1, #12]
 800f2ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f2f0:	079d      	lsls	r5, r3, #30
 800f2f2:	4606      	mov	r6, r0
 800f2f4:	460c      	mov	r4, r1
 800f2f6:	d507      	bpl.n	800f308 <__smakebuf_r+0x1c>
 800f2f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f2fc:	6023      	str	r3, [r4, #0]
 800f2fe:	6123      	str	r3, [r4, #16]
 800f300:	2301      	movs	r3, #1
 800f302:	6163      	str	r3, [r4, #20]
 800f304:	b002      	add	sp, #8
 800f306:	bd70      	pop	{r4, r5, r6, pc}
 800f308:	ab01      	add	r3, sp, #4
 800f30a:	466a      	mov	r2, sp
 800f30c:	f7ff ffc8 	bl	800f2a0 <__swhatbuf_r>
 800f310:	9900      	ldr	r1, [sp, #0]
 800f312:	4605      	mov	r5, r0
 800f314:	4630      	mov	r0, r6
 800f316:	f7fd fa8b 	bl	800c830 <_malloc_r>
 800f31a:	b948      	cbnz	r0, 800f330 <__smakebuf_r+0x44>
 800f31c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f320:	059a      	lsls	r2, r3, #22
 800f322:	d4ef      	bmi.n	800f304 <__smakebuf_r+0x18>
 800f324:	f023 0303 	bic.w	r3, r3, #3
 800f328:	f043 0302 	orr.w	r3, r3, #2
 800f32c:	81a3      	strh	r3, [r4, #12]
 800f32e:	e7e3      	b.n	800f2f8 <__smakebuf_r+0xc>
 800f330:	89a3      	ldrh	r3, [r4, #12]
 800f332:	6020      	str	r0, [r4, #0]
 800f334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f338:	81a3      	strh	r3, [r4, #12]
 800f33a:	9b00      	ldr	r3, [sp, #0]
 800f33c:	6163      	str	r3, [r4, #20]
 800f33e:	9b01      	ldr	r3, [sp, #4]
 800f340:	6120      	str	r0, [r4, #16]
 800f342:	b15b      	cbz	r3, 800f35c <__smakebuf_r+0x70>
 800f344:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f348:	4630      	mov	r0, r6
 800f34a:	f000 f837 	bl	800f3bc <_isatty_r>
 800f34e:	b128      	cbz	r0, 800f35c <__smakebuf_r+0x70>
 800f350:	89a3      	ldrh	r3, [r4, #12]
 800f352:	f023 0303 	bic.w	r3, r3, #3
 800f356:	f043 0301 	orr.w	r3, r3, #1
 800f35a:	81a3      	strh	r3, [r4, #12]
 800f35c:	89a3      	ldrh	r3, [r4, #12]
 800f35e:	431d      	orrs	r5, r3
 800f360:	81a5      	strh	r5, [r4, #12]
 800f362:	e7cf      	b.n	800f304 <__smakebuf_r+0x18>

0800f364 <memmove>:
 800f364:	4288      	cmp	r0, r1
 800f366:	b510      	push	{r4, lr}
 800f368:	eb01 0402 	add.w	r4, r1, r2
 800f36c:	d902      	bls.n	800f374 <memmove+0x10>
 800f36e:	4284      	cmp	r4, r0
 800f370:	4623      	mov	r3, r4
 800f372:	d807      	bhi.n	800f384 <memmove+0x20>
 800f374:	1e43      	subs	r3, r0, #1
 800f376:	42a1      	cmp	r1, r4
 800f378:	d008      	beq.n	800f38c <memmove+0x28>
 800f37a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f37e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f382:	e7f8      	b.n	800f376 <memmove+0x12>
 800f384:	4402      	add	r2, r0
 800f386:	4601      	mov	r1, r0
 800f388:	428a      	cmp	r2, r1
 800f38a:	d100      	bne.n	800f38e <memmove+0x2a>
 800f38c:	bd10      	pop	{r4, pc}
 800f38e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f392:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f396:	e7f7      	b.n	800f388 <memmove+0x24>

0800f398 <_fstat_r>:
 800f398:	b538      	push	{r3, r4, r5, lr}
 800f39a:	4d07      	ldr	r5, [pc, #28]	; (800f3b8 <_fstat_r+0x20>)
 800f39c:	2300      	movs	r3, #0
 800f39e:	4604      	mov	r4, r0
 800f3a0:	4608      	mov	r0, r1
 800f3a2:	4611      	mov	r1, r2
 800f3a4:	602b      	str	r3, [r5, #0]
 800f3a6:	f7f4 fba8 	bl	8003afa <_fstat>
 800f3aa:	1c43      	adds	r3, r0, #1
 800f3ac:	d102      	bne.n	800f3b4 <_fstat_r+0x1c>
 800f3ae:	682b      	ldr	r3, [r5, #0]
 800f3b0:	b103      	cbz	r3, 800f3b4 <_fstat_r+0x1c>
 800f3b2:	6023      	str	r3, [r4, #0]
 800f3b4:	bd38      	pop	{r3, r4, r5, pc}
 800f3b6:	bf00      	nop
 800f3b8:	20001bac 	.word	0x20001bac

0800f3bc <_isatty_r>:
 800f3bc:	b538      	push	{r3, r4, r5, lr}
 800f3be:	4d06      	ldr	r5, [pc, #24]	; (800f3d8 <_isatty_r+0x1c>)
 800f3c0:	2300      	movs	r3, #0
 800f3c2:	4604      	mov	r4, r0
 800f3c4:	4608      	mov	r0, r1
 800f3c6:	602b      	str	r3, [r5, #0]
 800f3c8:	f7f4 fba7 	bl	8003b1a <_isatty>
 800f3cc:	1c43      	adds	r3, r0, #1
 800f3ce:	d102      	bne.n	800f3d6 <_isatty_r+0x1a>
 800f3d0:	682b      	ldr	r3, [r5, #0]
 800f3d2:	b103      	cbz	r3, 800f3d6 <_isatty_r+0x1a>
 800f3d4:	6023      	str	r3, [r4, #0]
 800f3d6:	bd38      	pop	{r3, r4, r5, pc}
 800f3d8:	20001bac 	.word	0x20001bac

0800f3dc <memcpy>:
 800f3dc:	440a      	add	r2, r1
 800f3de:	4291      	cmp	r1, r2
 800f3e0:	f100 33ff 	add.w	r3, r0, #4294967295
 800f3e4:	d100      	bne.n	800f3e8 <memcpy+0xc>
 800f3e6:	4770      	bx	lr
 800f3e8:	b510      	push	{r4, lr}
 800f3ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f3ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f3f2:	4291      	cmp	r1, r2
 800f3f4:	d1f9      	bne.n	800f3ea <memcpy+0xe>
 800f3f6:	bd10      	pop	{r4, pc}

0800f3f8 <__assert_func>:
 800f3f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f3fa:	4614      	mov	r4, r2
 800f3fc:	461a      	mov	r2, r3
 800f3fe:	4b09      	ldr	r3, [pc, #36]	; (800f424 <__assert_func+0x2c>)
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	4605      	mov	r5, r0
 800f404:	68d8      	ldr	r0, [r3, #12]
 800f406:	b14c      	cbz	r4, 800f41c <__assert_func+0x24>
 800f408:	4b07      	ldr	r3, [pc, #28]	; (800f428 <__assert_func+0x30>)
 800f40a:	9100      	str	r1, [sp, #0]
 800f40c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f410:	4906      	ldr	r1, [pc, #24]	; (800f42c <__assert_func+0x34>)
 800f412:	462b      	mov	r3, r5
 800f414:	f000 f872 	bl	800f4fc <fiprintf>
 800f418:	f000 f882 	bl	800f520 <abort>
 800f41c:	4b04      	ldr	r3, [pc, #16]	; (800f430 <__assert_func+0x38>)
 800f41e:	461c      	mov	r4, r3
 800f420:	e7f3      	b.n	800f40a <__assert_func+0x12>
 800f422:	bf00      	nop
 800f424:	200000fc 	.word	0x200000fc
 800f428:	08013907 	.word	0x08013907
 800f42c:	08013914 	.word	0x08013914
 800f430:	08013942 	.word	0x08013942

0800f434 <_calloc_r>:
 800f434:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f436:	fba1 2402 	umull	r2, r4, r1, r2
 800f43a:	b94c      	cbnz	r4, 800f450 <_calloc_r+0x1c>
 800f43c:	4611      	mov	r1, r2
 800f43e:	9201      	str	r2, [sp, #4]
 800f440:	f7fd f9f6 	bl	800c830 <_malloc_r>
 800f444:	9a01      	ldr	r2, [sp, #4]
 800f446:	4605      	mov	r5, r0
 800f448:	b930      	cbnz	r0, 800f458 <_calloc_r+0x24>
 800f44a:	4628      	mov	r0, r5
 800f44c:	b003      	add	sp, #12
 800f44e:	bd30      	pop	{r4, r5, pc}
 800f450:	220c      	movs	r2, #12
 800f452:	6002      	str	r2, [r0, #0]
 800f454:	2500      	movs	r5, #0
 800f456:	e7f8      	b.n	800f44a <_calloc_r+0x16>
 800f458:	4621      	mov	r1, r4
 800f45a:	f7fe f903 	bl	800d664 <memset>
 800f45e:	e7f4      	b.n	800f44a <_calloc_r+0x16>

0800f460 <__ascii_mbtowc>:
 800f460:	b082      	sub	sp, #8
 800f462:	b901      	cbnz	r1, 800f466 <__ascii_mbtowc+0x6>
 800f464:	a901      	add	r1, sp, #4
 800f466:	b142      	cbz	r2, 800f47a <__ascii_mbtowc+0x1a>
 800f468:	b14b      	cbz	r3, 800f47e <__ascii_mbtowc+0x1e>
 800f46a:	7813      	ldrb	r3, [r2, #0]
 800f46c:	600b      	str	r3, [r1, #0]
 800f46e:	7812      	ldrb	r2, [r2, #0]
 800f470:	1e10      	subs	r0, r2, #0
 800f472:	bf18      	it	ne
 800f474:	2001      	movne	r0, #1
 800f476:	b002      	add	sp, #8
 800f478:	4770      	bx	lr
 800f47a:	4610      	mov	r0, r2
 800f47c:	e7fb      	b.n	800f476 <__ascii_mbtowc+0x16>
 800f47e:	f06f 0001 	mvn.w	r0, #1
 800f482:	e7f8      	b.n	800f476 <__ascii_mbtowc+0x16>

0800f484 <_realloc_r>:
 800f484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f488:	4680      	mov	r8, r0
 800f48a:	4614      	mov	r4, r2
 800f48c:	460e      	mov	r6, r1
 800f48e:	b921      	cbnz	r1, 800f49a <_realloc_r+0x16>
 800f490:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f494:	4611      	mov	r1, r2
 800f496:	f7fd b9cb 	b.w	800c830 <_malloc_r>
 800f49a:	b92a      	cbnz	r2, 800f4a8 <_realloc_r+0x24>
 800f49c:	f7fe ffee 	bl	800e47c <_free_r>
 800f4a0:	4625      	mov	r5, r4
 800f4a2:	4628      	mov	r0, r5
 800f4a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4a8:	f000 f841 	bl	800f52e <_malloc_usable_size_r>
 800f4ac:	4284      	cmp	r4, r0
 800f4ae:	4607      	mov	r7, r0
 800f4b0:	d802      	bhi.n	800f4b8 <_realloc_r+0x34>
 800f4b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f4b6:	d812      	bhi.n	800f4de <_realloc_r+0x5a>
 800f4b8:	4621      	mov	r1, r4
 800f4ba:	4640      	mov	r0, r8
 800f4bc:	f7fd f9b8 	bl	800c830 <_malloc_r>
 800f4c0:	4605      	mov	r5, r0
 800f4c2:	2800      	cmp	r0, #0
 800f4c4:	d0ed      	beq.n	800f4a2 <_realloc_r+0x1e>
 800f4c6:	42bc      	cmp	r4, r7
 800f4c8:	4622      	mov	r2, r4
 800f4ca:	4631      	mov	r1, r6
 800f4cc:	bf28      	it	cs
 800f4ce:	463a      	movcs	r2, r7
 800f4d0:	f7ff ff84 	bl	800f3dc <memcpy>
 800f4d4:	4631      	mov	r1, r6
 800f4d6:	4640      	mov	r0, r8
 800f4d8:	f7fe ffd0 	bl	800e47c <_free_r>
 800f4dc:	e7e1      	b.n	800f4a2 <_realloc_r+0x1e>
 800f4de:	4635      	mov	r5, r6
 800f4e0:	e7df      	b.n	800f4a2 <_realloc_r+0x1e>

0800f4e2 <__ascii_wctomb>:
 800f4e2:	b149      	cbz	r1, 800f4f8 <__ascii_wctomb+0x16>
 800f4e4:	2aff      	cmp	r2, #255	; 0xff
 800f4e6:	bf85      	ittet	hi
 800f4e8:	238a      	movhi	r3, #138	; 0x8a
 800f4ea:	6003      	strhi	r3, [r0, #0]
 800f4ec:	700a      	strbls	r2, [r1, #0]
 800f4ee:	f04f 30ff 	movhi.w	r0, #4294967295
 800f4f2:	bf98      	it	ls
 800f4f4:	2001      	movls	r0, #1
 800f4f6:	4770      	bx	lr
 800f4f8:	4608      	mov	r0, r1
 800f4fa:	4770      	bx	lr

0800f4fc <fiprintf>:
 800f4fc:	b40e      	push	{r1, r2, r3}
 800f4fe:	b503      	push	{r0, r1, lr}
 800f500:	4601      	mov	r1, r0
 800f502:	ab03      	add	r3, sp, #12
 800f504:	4805      	ldr	r0, [pc, #20]	; (800f51c <fiprintf+0x20>)
 800f506:	f853 2b04 	ldr.w	r2, [r3], #4
 800f50a:	6800      	ldr	r0, [r0, #0]
 800f50c:	9301      	str	r3, [sp, #4]
 800f50e:	f7ff fcff 	bl	800ef10 <_vfiprintf_r>
 800f512:	b002      	add	sp, #8
 800f514:	f85d eb04 	ldr.w	lr, [sp], #4
 800f518:	b003      	add	sp, #12
 800f51a:	4770      	bx	lr
 800f51c:	200000fc 	.word	0x200000fc

0800f520 <abort>:
 800f520:	b508      	push	{r3, lr}
 800f522:	2006      	movs	r0, #6
 800f524:	f000 f834 	bl	800f590 <raise>
 800f528:	2001      	movs	r0, #1
 800f52a:	f7f4 fa97 	bl	8003a5c <_exit>

0800f52e <_malloc_usable_size_r>:
 800f52e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f532:	1f18      	subs	r0, r3, #4
 800f534:	2b00      	cmp	r3, #0
 800f536:	bfbc      	itt	lt
 800f538:	580b      	ldrlt	r3, [r1, r0]
 800f53a:	18c0      	addlt	r0, r0, r3
 800f53c:	4770      	bx	lr

0800f53e <_raise_r>:
 800f53e:	291f      	cmp	r1, #31
 800f540:	b538      	push	{r3, r4, r5, lr}
 800f542:	4604      	mov	r4, r0
 800f544:	460d      	mov	r5, r1
 800f546:	d904      	bls.n	800f552 <_raise_r+0x14>
 800f548:	2316      	movs	r3, #22
 800f54a:	6003      	str	r3, [r0, #0]
 800f54c:	f04f 30ff 	mov.w	r0, #4294967295
 800f550:	bd38      	pop	{r3, r4, r5, pc}
 800f552:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800f554:	b112      	cbz	r2, 800f55c <_raise_r+0x1e>
 800f556:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f55a:	b94b      	cbnz	r3, 800f570 <_raise_r+0x32>
 800f55c:	4620      	mov	r0, r4
 800f55e:	f000 f831 	bl	800f5c4 <_getpid_r>
 800f562:	462a      	mov	r2, r5
 800f564:	4601      	mov	r1, r0
 800f566:	4620      	mov	r0, r4
 800f568:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f56c:	f000 b818 	b.w	800f5a0 <_kill_r>
 800f570:	2b01      	cmp	r3, #1
 800f572:	d00a      	beq.n	800f58a <_raise_r+0x4c>
 800f574:	1c59      	adds	r1, r3, #1
 800f576:	d103      	bne.n	800f580 <_raise_r+0x42>
 800f578:	2316      	movs	r3, #22
 800f57a:	6003      	str	r3, [r0, #0]
 800f57c:	2001      	movs	r0, #1
 800f57e:	e7e7      	b.n	800f550 <_raise_r+0x12>
 800f580:	2400      	movs	r4, #0
 800f582:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f586:	4628      	mov	r0, r5
 800f588:	4798      	blx	r3
 800f58a:	2000      	movs	r0, #0
 800f58c:	e7e0      	b.n	800f550 <_raise_r+0x12>
	...

0800f590 <raise>:
 800f590:	4b02      	ldr	r3, [pc, #8]	; (800f59c <raise+0xc>)
 800f592:	4601      	mov	r1, r0
 800f594:	6818      	ldr	r0, [r3, #0]
 800f596:	f7ff bfd2 	b.w	800f53e <_raise_r>
 800f59a:	bf00      	nop
 800f59c:	200000fc 	.word	0x200000fc

0800f5a0 <_kill_r>:
 800f5a0:	b538      	push	{r3, r4, r5, lr}
 800f5a2:	4d07      	ldr	r5, [pc, #28]	; (800f5c0 <_kill_r+0x20>)
 800f5a4:	2300      	movs	r3, #0
 800f5a6:	4604      	mov	r4, r0
 800f5a8:	4608      	mov	r0, r1
 800f5aa:	4611      	mov	r1, r2
 800f5ac:	602b      	str	r3, [r5, #0]
 800f5ae:	f7f4 fa45 	bl	8003a3c <_kill>
 800f5b2:	1c43      	adds	r3, r0, #1
 800f5b4:	d102      	bne.n	800f5bc <_kill_r+0x1c>
 800f5b6:	682b      	ldr	r3, [r5, #0]
 800f5b8:	b103      	cbz	r3, 800f5bc <_kill_r+0x1c>
 800f5ba:	6023      	str	r3, [r4, #0]
 800f5bc:	bd38      	pop	{r3, r4, r5, pc}
 800f5be:	bf00      	nop
 800f5c0:	20001bac 	.word	0x20001bac

0800f5c4 <_getpid_r>:
 800f5c4:	f7f4 ba32 	b.w	8003a2c <_getpid>

0800f5c8 <pow>:
 800f5c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5ca:	ed2d 8b02 	vpush	{d8}
 800f5ce:	eeb0 8a40 	vmov.f32	s16, s0
 800f5d2:	eef0 8a60 	vmov.f32	s17, s1
 800f5d6:	ec55 4b11 	vmov	r4, r5, d1
 800f5da:	f000 f871 	bl	800f6c0 <__ieee754_pow>
 800f5de:	4622      	mov	r2, r4
 800f5e0:	462b      	mov	r3, r5
 800f5e2:	4620      	mov	r0, r4
 800f5e4:	4629      	mov	r1, r5
 800f5e6:	ec57 6b10 	vmov	r6, r7, d0
 800f5ea:	f7f1 fac7 	bl	8000b7c <__aeabi_dcmpun>
 800f5ee:	2800      	cmp	r0, #0
 800f5f0:	d13b      	bne.n	800f66a <pow+0xa2>
 800f5f2:	ec51 0b18 	vmov	r0, r1, d8
 800f5f6:	2200      	movs	r2, #0
 800f5f8:	2300      	movs	r3, #0
 800f5fa:	f7f1 fa8d 	bl	8000b18 <__aeabi_dcmpeq>
 800f5fe:	b1b8      	cbz	r0, 800f630 <pow+0x68>
 800f600:	2200      	movs	r2, #0
 800f602:	2300      	movs	r3, #0
 800f604:	4620      	mov	r0, r4
 800f606:	4629      	mov	r1, r5
 800f608:	f7f1 fa86 	bl	8000b18 <__aeabi_dcmpeq>
 800f60c:	2800      	cmp	r0, #0
 800f60e:	d146      	bne.n	800f69e <pow+0xd6>
 800f610:	ec45 4b10 	vmov	d0, r4, r5
 800f614:	f000 f848 	bl	800f6a8 <finite>
 800f618:	b338      	cbz	r0, 800f66a <pow+0xa2>
 800f61a:	2200      	movs	r2, #0
 800f61c:	2300      	movs	r3, #0
 800f61e:	4620      	mov	r0, r4
 800f620:	4629      	mov	r1, r5
 800f622:	f7f1 fa83 	bl	8000b2c <__aeabi_dcmplt>
 800f626:	b300      	cbz	r0, 800f66a <pow+0xa2>
 800f628:	f7fe f87e 	bl	800d728 <__errno>
 800f62c:	2322      	movs	r3, #34	; 0x22
 800f62e:	e01b      	b.n	800f668 <pow+0xa0>
 800f630:	ec47 6b10 	vmov	d0, r6, r7
 800f634:	f000 f838 	bl	800f6a8 <finite>
 800f638:	b9e0      	cbnz	r0, 800f674 <pow+0xac>
 800f63a:	eeb0 0a48 	vmov.f32	s0, s16
 800f63e:	eef0 0a68 	vmov.f32	s1, s17
 800f642:	f000 f831 	bl	800f6a8 <finite>
 800f646:	b1a8      	cbz	r0, 800f674 <pow+0xac>
 800f648:	ec45 4b10 	vmov	d0, r4, r5
 800f64c:	f000 f82c 	bl	800f6a8 <finite>
 800f650:	b180      	cbz	r0, 800f674 <pow+0xac>
 800f652:	4632      	mov	r2, r6
 800f654:	463b      	mov	r3, r7
 800f656:	4630      	mov	r0, r6
 800f658:	4639      	mov	r1, r7
 800f65a:	f7f1 fa8f 	bl	8000b7c <__aeabi_dcmpun>
 800f65e:	2800      	cmp	r0, #0
 800f660:	d0e2      	beq.n	800f628 <pow+0x60>
 800f662:	f7fe f861 	bl	800d728 <__errno>
 800f666:	2321      	movs	r3, #33	; 0x21
 800f668:	6003      	str	r3, [r0, #0]
 800f66a:	ecbd 8b02 	vpop	{d8}
 800f66e:	ec47 6b10 	vmov	d0, r6, r7
 800f672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f674:	2200      	movs	r2, #0
 800f676:	2300      	movs	r3, #0
 800f678:	4630      	mov	r0, r6
 800f67a:	4639      	mov	r1, r7
 800f67c:	f7f1 fa4c 	bl	8000b18 <__aeabi_dcmpeq>
 800f680:	2800      	cmp	r0, #0
 800f682:	d0f2      	beq.n	800f66a <pow+0xa2>
 800f684:	eeb0 0a48 	vmov.f32	s0, s16
 800f688:	eef0 0a68 	vmov.f32	s1, s17
 800f68c:	f000 f80c 	bl	800f6a8 <finite>
 800f690:	2800      	cmp	r0, #0
 800f692:	d0ea      	beq.n	800f66a <pow+0xa2>
 800f694:	ec45 4b10 	vmov	d0, r4, r5
 800f698:	f000 f806 	bl	800f6a8 <finite>
 800f69c:	e7c3      	b.n	800f626 <pow+0x5e>
 800f69e:	4f01      	ldr	r7, [pc, #4]	; (800f6a4 <pow+0xdc>)
 800f6a0:	2600      	movs	r6, #0
 800f6a2:	e7e2      	b.n	800f66a <pow+0xa2>
 800f6a4:	3ff00000 	.word	0x3ff00000

0800f6a8 <finite>:
 800f6a8:	b082      	sub	sp, #8
 800f6aa:	ed8d 0b00 	vstr	d0, [sp]
 800f6ae:	9801      	ldr	r0, [sp, #4]
 800f6b0:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800f6b4:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800f6b8:	0fc0      	lsrs	r0, r0, #31
 800f6ba:	b002      	add	sp, #8
 800f6bc:	4770      	bx	lr
	...

0800f6c0 <__ieee754_pow>:
 800f6c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6c4:	ed2d 8b06 	vpush	{d8-d10}
 800f6c8:	b089      	sub	sp, #36	; 0x24
 800f6ca:	ed8d 1b00 	vstr	d1, [sp]
 800f6ce:	e9dd 2900 	ldrd	r2, r9, [sp]
 800f6d2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800f6d6:	ea58 0102 	orrs.w	r1, r8, r2
 800f6da:	ec57 6b10 	vmov	r6, r7, d0
 800f6de:	d115      	bne.n	800f70c <__ieee754_pow+0x4c>
 800f6e0:	19b3      	adds	r3, r6, r6
 800f6e2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800f6e6:	4152      	adcs	r2, r2
 800f6e8:	4299      	cmp	r1, r3
 800f6ea:	4b89      	ldr	r3, [pc, #548]	; (800f910 <__ieee754_pow+0x250>)
 800f6ec:	4193      	sbcs	r3, r2
 800f6ee:	f080 84d1 	bcs.w	8010094 <__ieee754_pow+0x9d4>
 800f6f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f6f6:	4630      	mov	r0, r6
 800f6f8:	4639      	mov	r1, r7
 800f6fa:	f7f0 fdef 	bl	80002dc <__adddf3>
 800f6fe:	ec41 0b10 	vmov	d0, r0, r1
 800f702:	b009      	add	sp, #36	; 0x24
 800f704:	ecbd 8b06 	vpop	{d8-d10}
 800f708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f70c:	4b81      	ldr	r3, [pc, #516]	; (800f914 <__ieee754_pow+0x254>)
 800f70e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800f712:	429c      	cmp	r4, r3
 800f714:	ee10 aa10 	vmov	sl, s0
 800f718:	463d      	mov	r5, r7
 800f71a:	dc06      	bgt.n	800f72a <__ieee754_pow+0x6a>
 800f71c:	d101      	bne.n	800f722 <__ieee754_pow+0x62>
 800f71e:	2e00      	cmp	r6, #0
 800f720:	d1e7      	bne.n	800f6f2 <__ieee754_pow+0x32>
 800f722:	4598      	cmp	r8, r3
 800f724:	dc01      	bgt.n	800f72a <__ieee754_pow+0x6a>
 800f726:	d10f      	bne.n	800f748 <__ieee754_pow+0x88>
 800f728:	b172      	cbz	r2, 800f748 <__ieee754_pow+0x88>
 800f72a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800f72e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800f732:	ea55 050a 	orrs.w	r5, r5, sl
 800f736:	d1dc      	bne.n	800f6f2 <__ieee754_pow+0x32>
 800f738:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f73c:	18db      	adds	r3, r3, r3
 800f73e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800f742:	4152      	adcs	r2, r2
 800f744:	429d      	cmp	r5, r3
 800f746:	e7d0      	b.n	800f6ea <__ieee754_pow+0x2a>
 800f748:	2d00      	cmp	r5, #0
 800f74a:	da3b      	bge.n	800f7c4 <__ieee754_pow+0x104>
 800f74c:	4b72      	ldr	r3, [pc, #456]	; (800f918 <__ieee754_pow+0x258>)
 800f74e:	4598      	cmp	r8, r3
 800f750:	dc51      	bgt.n	800f7f6 <__ieee754_pow+0x136>
 800f752:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800f756:	4598      	cmp	r8, r3
 800f758:	f340 84ab 	ble.w	80100b2 <__ieee754_pow+0x9f2>
 800f75c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800f760:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800f764:	2b14      	cmp	r3, #20
 800f766:	dd0f      	ble.n	800f788 <__ieee754_pow+0xc8>
 800f768:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800f76c:	fa22 f103 	lsr.w	r1, r2, r3
 800f770:	fa01 f303 	lsl.w	r3, r1, r3
 800f774:	4293      	cmp	r3, r2
 800f776:	f040 849c 	bne.w	80100b2 <__ieee754_pow+0x9f2>
 800f77a:	f001 0101 	and.w	r1, r1, #1
 800f77e:	f1c1 0302 	rsb	r3, r1, #2
 800f782:	9304      	str	r3, [sp, #16]
 800f784:	b182      	cbz	r2, 800f7a8 <__ieee754_pow+0xe8>
 800f786:	e05f      	b.n	800f848 <__ieee754_pow+0x188>
 800f788:	2a00      	cmp	r2, #0
 800f78a:	d15b      	bne.n	800f844 <__ieee754_pow+0x184>
 800f78c:	f1c3 0314 	rsb	r3, r3, #20
 800f790:	fa48 f103 	asr.w	r1, r8, r3
 800f794:	fa01 f303 	lsl.w	r3, r1, r3
 800f798:	4543      	cmp	r3, r8
 800f79a:	f040 8487 	bne.w	80100ac <__ieee754_pow+0x9ec>
 800f79e:	f001 0101 	and.w	r1, r1, #1
 800f7a2:	f1c1 0302 	rsb	r3, r1, #2
 800f7a6:	9304      	str	r3, [sp, #16]
 800f7a8:	4b5c      	ldr	r3, [pc, #368]	; (800f91c <__ieee754_pow+0x25c>)
 800f7aa:	4598      	cmp	r8, r3
 800f7ac:	d132      	bne.n	800f814 <__ieee754_pow+0x154>
 800f7ae:	f1b9 0f00 	cmp.w	r9, #0
 800f7b2:	f280 8477 	bge.w	80100a4 <__ieee754_pow+0x9e4>
 800f7b6:	4959      	ldr	r1, [pc, #356]	; (800f91c <__ieee754_pow+0x25c>)
 800f7b8:	4632      	mov	r2, r6
 800f7ba:	463b      	mov	r3, r7
 800f7bc:	2000      	movs	r0, #0
 800f7be:	f7f1 f86d 	bl	800089c <__aeabi_ddiv>
 800f7c2:	e79c      	b.n	800f6fe <__ieee754_pow+0x3e>
 800f7c4:	2300      	movs	r3, #0
 800f7c6:	9304      	str	r3, [sp, #16]
 800f7c8:	2a00      	cmp	r2, #0
 800f7ca:	d13d      	bne.n	800f848 <__ieee754_pow+0x188>
 800f7cc:	4b51      	ldr	r3, [pc, #324]	; (800f914 <__ieee754_pow+0x254>)
 800f7ce:	4598      	cmp	r8, r3
 800f7d0:	d1ea      	bne.n	800f7a8 <__ieee754_pow+0xe8>
 800f7d2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800f7d6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800f7da:	ea53 030a 	orrs.w	r3, r3, sl
 800f7de:	f000 8459 	beq.w	8010094 <__ieee754_pow+0x9d4>
 800f7e2:	4b4f      	ldr	r3, [pc, #316]	; (800f920 <__ieee754_pow+0x260>)
 800f7e4:	429c      	cmp	r4, r3
 800f7e6:	dd08      	ble.n	800f7fa <__ieee754_pow+0x13a>
 800f7e8:	f1b9 0f00 	cmp.w	r9, #0
 800f7ec:	f2c0 8456 	blt.w	801009c <__ieee754_pow+0x9dc>
 800f7f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f7f4:	e783      	b.n	800f6fe <__ieee754_pow+0x3e>
 800f7f6:	2302      	movs	r3, #2
 800f7f8:	e7e5      	b.n	800f7c6 <__ieee754_pow+0x106>
 800f7fa:	f1b9 0f00 	cmp.w	r9, #0
 800f7fe:	f04f 0000 	mov.w	r0, #0
 800f802:	f04f 0100 	mov.w	r1, #0
 800f806:	f6bf af7a 	bge.w	800f6fe <__ieee754_pow+0x3e>
 800f80a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800f80e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800f812:	e774      	b.n	800f6fe <__ieee754_pow+0x3e>
 800f814:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800f818:	d106      	bne.n	800f828 <__ieee754_pow+0x168>
 800f81a:	4632      	mov	r2, r6
 800f81c:	463b      	mov	r3, r7
 800f81e:	4630      	mov	r0, r6
 800f820:	4639      	mov	r1, r7
 800f822:	f7f0 ff11 	bl	8000648 <__aeabi_dmul>
 800f826:	e76a      	b.n	800f6fe <__ieee754_pow+0x3e>
 800f828:	4b3e      	ldr	r3, [pc, #248]	; (800f924 <__ieee754_pow+0x264>)
 800f82a:	4599      	cmp	r9, r3
 800f82c:	d10c      	bne.n	800f848 <__ieee754_pow+0x188>
 800f82e:	2d00      	cmp	r5, #0
 800f830:	db0a      	blt.n	800f848 <__ieee754_pow+0x188>
 800f832:	ec47 6b10 	vmov	d0, r6, r7
 800f836:	b009      	add	sp, #36	; 0x24
 800f838:	ecbd 8b06 	vpop	{d8-d10}
 800f83c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f840:	f000 bd20 	b.w	8010284 <__ieee754_sqrt>
 800f844:	2300      	movs	r3, #0
 800f846:	9304      	str	r3, [sp, #16]
 800f848:	ec47 6b10 	vmov	d0, r6, r7
 800f84c:	f000 fc62 	bl	8010114 <fabs>
 800f850:	ec51 0b10 	vmov	r0, r1, d0
 800f854:	f1ba 0f00 	cmp.w	sl, #0
 800f858:	d129      	bne.n	800f8ae <__ieee754_pow+0x1ee>
 800f85a:	b124      	cbz	r4, 800f866 <__ieee754_pow+0x1a6>
 800f85c:	4b2f      	ldr	r3, [pc, #188]	; (800f91c <__ieee754_pow+0x25c>)
 800f85e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800f862:	429a      	cmp	r2, r3
 800f864:	d123      	bne.n	800f8ae <__ieee754_pow+0x1ee>
 800f866:	f1b9 0f00 	cmp.w	r9, #0
 800f86a:	da05      	bge.n	800f878 <__ieee754_pow+0x1b8>
 800f86c:	4602      	mov	r2, r0
 800f86e:	460b      	mov	r3, r1
 800f870:	2000      	movs	r0, #0
 800f872:	492a      	ldr	r1, [pc, #168]	; (800f91c <__ieee754_pow+0x25c>)
 800f874:	f7f1 f812 	bl	800089c <__aeabi_ddiv>
 800f878:	2d00      	cmp	r5, #0
 800f87a:	f6bf af40 	bge.w	800f6fe <__ieee754_pow+0x3e>
 800f87e:	9b04      	ldr	r3, [sp, #16]
 800f880:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800f884:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800f888:	431c      	orrs	r4, r3
 800f88a:	d108      	bne.n	800f89e <__ieee754_pow+0x1de>
 800f88c:	4602      	mov	r2, r0
 800f88e:	460b      	mov	r3, r1
 800f890:	4610      	mov	r0, r2
 800f892:	4619      	mov	r1, r3
 800f894:	f7f0 fd20 	bl	80002d8 <__aeabi_dsub>
 800f898:	4602      	mov	r2, r0
 800f89a:	460b      	mov	r3, r1
 800f89c:	e78f      	b.n	800f7be <__ieee754_pow+0xfe>
 800f89e:	9b04      	ldr	r3, [sp, #16]
 800f8a0:	2b01      	cmp	r3, #1
 800f8a2:	f47f af2c 	bne.w	800f6fe <__ieee754_pow+0x3e>
 800f8a6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f8aa:	4619      	mov	r1, r3
 800f8ac:	e727      	b.n	800f6fe <__ieee754_pow+0x3e>
 800f8ae:	0feb      	lsrs	r3, r5, #31
 800f8b0:	3b01      	subs	r3, #1
 800f8b2:	9306      	str	r3, [sp, #24]
 800f8b4:	9a06      	ldr	r2, [sp, #24]
 800f8b6:	9b04      	ldr	r3, [sp, #16]
 800f8b8:	4313      	orrs	r3, r2
 800f8ba:	d102      	bne.n	800f8c2 <__ieee754_pow+0x202>
 800f8bc:	4632      	mov	r2, r6
 800f8be:	463b      	mov	r3, r7
 800f8c0:	e7e6      	b.n	800f890 <__ieee754_pow+0x1d0>
 800f8c2:	4b19      	ldr	r3, [pc, #100]	; (800f928 <__ieee754_pow+0x268>)
 800f8c4:	4598      	cmp	r8, r3
 800f8c6:	f340 80fb 	ble.w	800fac0 <__ieee754_pow+0x400>
 800f8ca:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800f8ce:	4598      	cmp	r8, r3
 800f8d0:	4b13      	ldr	r3, [pc, #76]	; (800f920 <__ieee754_pow+0x260>)
 800f8d2:	dd0c      	ble.n	800f8ee <__ieee754_pow+0x22e>
 800f8d4:	429c      	cmp	r4, r3
 800f8d6:	dc0f      	bgt.n	800f8f8 <__ieee754_pow+0x238>
 800f8d8:	f1b9 0f00 	cmp.w	r9, #0
 800f8dc:	da0f      	bge.n	800f8fe <__ieee754_pow+0x23e>
 800f8de:	2000      	movs	r0, #0
 800f8e0:	b009      	add	sp, #36	; 0x24
 800f8e2:	ecbd 8b06 	vpop	{d8-d10}
 800f8e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8ea:	f000 bcc2 	b.w	8010272 <__math_oflow>
 800f8ee:	429c      	cmp	r4, r3
 800f8f0:	dbf2      	blt.n	800f8d8 <__ieee754_pow+0x218>
 800f8f2:	4b0a      	ldr	r3, [pc, #40]	; (800f91c <__ieee754_pow+0x25c>)
 800f8f4:	429c      	cmp	r4, r3
 800f8f6:	dd19      	ble.n	800f92c <__ieee754_pow+0x26c>
 800f8f8:	f1b9 0f00 	cmp.w	r9, #0
 800f8fc:	dcef      	bgt.n	800f8de <__ieee754_pow+0x21e>
 800f8fe:	2000      	movs	r0, #0
 800f900:	b009      	add	sp, #36	; 0x24
 800f902:	ecbd 8b06 	vpop	{d8-d10}
 800f906:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f90a:	f000 bca9 	b.w	8010260 <__math_uflow>
 800f90e:	bf00      	nop
 800f910:	fff00000 	.word	0xfff00000
 800f914:	7ff00000 	.word	0x7ff00000
 800f918:	433fffff 	.word	0x433fffff
 800f91c:	3ff00000 	.word	0x3ff00000
 800f920:	3fefffff 	.word	0x3fefffff
 800f924:	3fe00000 	.word	0x3fe00000
 800f928:	41e00000 	.word	0x41e00000
 800f92c:	4b60      	ldr	r3, [pc, #384]	; (800fab0 <__ieee754_pow+0x3f0>)
 800f92e:	2200      	movs	r2, #0
 800f930:	f7f0 fcd2 	bl	80002d8 <__aeabi_dsub>
 800f934:	a354      	add	r3, pc, #336	; (adr r3, 800fa88 <__ieee754_pow+0x3c8>)
 800f936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f93a:	4604      	mov	r4, r0
 800f93c:	460d      	mov	r5, r1
 800f93e:	f7f0 fe83 	bl	8000648 <__aeabi_dmul>
 800f942:	a353      	add	r3, pc, #332	; (adr r3, 800fa90 <__ieee754_pow+0x3d0>)
 800f944:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f948:	4606      	mov	r6, r0
 800f94a:	460f      	mov	r7, r1
 800f94c:	4620      	mov	r0, r4
 800f94e:	4629      	mov	r1, r5
 800f950:	f7f0 fe7a 	bl	8000648 <__aeabi_dmul>
 800f954:	4b57      	ldr	r3, [pc, #348]	; (800fab4 <__ieee754_pow+0x3f4>)
 800f956:	4682      	mov	sl, r0
 800f958:	468b      	mov	fp, r1
 800f95a:	2200      	movs	r2, #0
 800f95c:	4620      	mov	r0, r4
 800f95e:	4629      	mov	r1, r5
 800f960:	f7f0 fe72 	bl	8000648 <__aeabi_dmul>
 800f964:	4602      	mov	r2, r0
 800f966:	460b      	mov	r3, r1
 800f968:	a14b      	add	r1, pc, #300	; (adr r1, 800fa98 <__ieee754_pow+0x3d8>)
 800f96a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f96e:	f7f0 fcb3 	bl	80002d8 <__aeabi_dsub>
 800f972:	4622      	mov	r2, r4
 800f974:	462b      	mov	r3, r5
 800f976:	f7f0 fe67 	bl	8000648 <__aeabi_dmul>
 800f97a:	4602      	mov	r2, r0
 800f97c:	460b      	mov	r3, r1
 800f97e:	2000      	movs	r0, #0
 800f980:	494d      	ldr	r1, [pc, #308]	; (800fab8 <__ieee754_pow+0x3f8>)
 800f982:	f7f0 fca9 	bl	80002d8 <__aeabi_dsub>
 800f986:	4622      	mov	r2, r4
 800f988:	4680      	mov	r8, r0
 800f98a:	4689      	mov	r9, r1
 800f98c:	462b      	mov	r3, r5
 800f98e:	4620      	mov	r0, r4
 800f990:	4629      	mov	r1, r5
 800f992:	f7f0 fe59 	bl	8000648 <__aeabi_dmul>
 800f996:	4602      	mov	r2, r0
 800f998:	460b      	mov	r3, r1
 800f99a:	4640      	mov	r0, r8
 800f99c:	4649      	mov	r1, r9
 800f99e:	f7f0 fe53 	bl	8000648 <__aeabi_dmul>
 800f9a2:	a33f      	add	r3, pc, #252	; (adr r3, 800faa0 <__ieee754_pow+0x3e0>)
 800f9a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9a8:	f7f0 fe4e 	bl	8000648 <__aeabi_dmul>
 800f9ac:	4602      	mov	r2, r0
 800f9ae:	460b      	mov	r3, r1
 800f9b0:	4650      	mov	r0, sl
 800f9b2:	4659      	mov	r1, fp
 800f9b4:	f7f0 fc90 	bl	80002d8 <__aeabi_dsub>
 800f9b8:	4602      	mov	r2, r0
 800f9ba:	460b      	mov	r3, r1
 800f9bc:	4680      	mov	r8, r0
 800f9be:	4689      	mov	r9, r1
 800f9c0:	4630      	mov	r0, r6
 800f9c2:	4639      	mov	r1, r7
 800f9c4:	f7f0 fc8a 	bl	80002dc <__adddf3>
 800f9c8:	2000      	movs	r0, #0
 800f9ca:	4632      	mov	r2, r6
 800f9cc:	463b      	mov	r3, r7
 800f9ce:	4604      	mov	r4, r0
 800f9d0:	460d      	mov	r5, r1
 800f9d2:	f7f0 fc81 	bl	80002d8 <__aeabi_dsub>
 800f9d6:	4602      	mov	r2, r0
 800f9d8:	460b      	mov	r3, r1
 800f9da:	4640      	mov	r0, r8
 800f9dc:	4649      	mov	r1, r9
 800f9de:	f7f0 fc7b 	bl	80002d8 <__aeabi_dsub>
 800f9e2:	9b04      	ldr	r3, [sp, #16]
 800f9e4:	9a06      	ldr	r2, [sp, #24]
 800f9e6:	3b01      	subs	r3, #1
 800f9e8:	4313      	orrs	r3, r2
 800f9ea:	4682      	mov	sl, r0
 800f9ec:	468b      	mov	fp, r1
 800f9ee:	f040 81e7 	bne.w	800fdc0 <__ieee754_pow+0x700>
 800f9f2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800faa8 <__ieee754_pow+0x3e8>
 800f9f6:	eeb0 8a47 	vmov.f32	s16, s14
 800f9fa:	eef0 8a67 	vmov.f32	s17, s15
 800f9fe:	e9dd 6700 	ldrd	r6, r7, [sp]
 800fa02:	2600      	movs	r6, #0
 800fa04:	4632      	mov	r2, r6
 800fa06:	463b      	mov	r3, r7
 800fa08:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fa0c:	f7f0 fc64 	bl	80002d8 <__aeabi_dsub>
 800fa10:	4622      	mov	r2, r4
 800fa12:	462b      	mov	r3, r5
 800fa14:	f7f0 fe18 	bl	8000648 <__aeabi_dmul>
 800fa18:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fa1c:	4680      	mov	r8, r0
 800fa1e:	4689      	mov	r9, r1
 800fa20:	4650      	mov	r0, sl
 800fa22:	4659      	mov	r1, fp
 800fa24:	f7f0 fe10 	bl	8000648 <__aeabi_dmul>
 800fa28:	4602      	mov	r2, r0
 800fa2a:	460b      	mov	r3, r1
 800fa2c:	4640      	mov	r0, r8
 800fa2e:	4649      	mov	r1, r9
 800fa30:	f7f0 fc54 	bl	80002dc <__adddf3>
 800fa34:	4632      	mov	r2, r6
 800fa36:	463b      	mov	r3, r7
 800fa38:	4680      	mov	r8, r0
 800fa3a:	4689      	mov	r9, r1
 800fa3c:	4620      	mov	r0, r4
 800fa3e:	4629      	mov	r1, r5
 800fa40:	f7f0 fe02 	bl	8000648 <__aeabi_dmul>
 800fa44:	460b      	mov	r3, r1
 800fa46:	4604      	mov	r4, r0
 800fa48:	460d      	mov	r5, r1
 800fa4a:	4602      	mov	r2, r0
 800fa4c:	4649      	mov	r1, r9
 800fa4e:	4640      	mov	r0, r8
 800fa50:	f7f0 fc44 	bl	80002dc <__adddf3>
 800fa54:	4b19      	ldr	r3, [pc, #100]	; (800fabc <__ieee754_pow+0x3fc>)
 800fa56:	4299      	cmp	r1, r3
 800fa58:	ec45 4b19 	vmov	d9, r4, r5
 800fa5c:	4606      	mov	r6, r0
 800fa5e:	460f      	mov	r7, r1
 800fa60:	468b      	mov	fp, r1
 800fa62:	f340 82f0 	ble.w	8010046 <__ieee754_pow+0x986>
 800fa66:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800fa6a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800fa6e:	4303      	orrs	r3, r0
 800fa70:	f000 81e4 	beq.w	800fe3c <__ieee754_pow+0x77c>
 800fa74:	ec51 0b18 	vmov	r0, r1, d8
 800fa78:	2200      	movs	r2, #0
 800fa7a:	2300      	movs	r3, #0
 800fa7c:	f7f1 f856 	bl	8000b2c <__aeabi_dcmplt>
 800fa80:	3800      	subs	r0, #0
 800fa82:	bf18      	it	ne
 800fa84:	2001      	movne	r0, #1
 800fa86:	e72b      	b.n	800f8e0 <__ieee754_pow+0x220>
 800fa88:	60000000 	.word	0x60000000
 800fa8c:	3ff71547 	.word	0x3ff71547
 800fa90:	f85ddf44 	.word	0xf85ddf44
 800fa94:	3e54ae0b 	.word	0x3e54ae0b
 800fa98:	55555555 	.word	0x55555555
 800fa9c:	3fd55555 	.word	0x3fd55555
 800faa0:	652b82fe 	.word	0x652b82fe
 800faa4:	3ff71547 	.word	0x3ff71547
 800faa8:	00000000 	.word	0x00000000
 800faac:	bff00000 	.word	0xbff00000
 800fab0:	3ff00000 	.word	0x3ff00000
 800fab4:	3fd00000 	.word	0x3fd00000
 800fab8:	3fe00000 	.word	0x3fe00000
 800fabc:	408fffff 	.word	0x408fffff
 800fac0:	4bd5      	ldr	r3, [pc, #852]	; (800fe18 <__ieee754_pow+0x758>)
 800fac2:	402b      	ands	r3, r5
 800fac4:	2200      	movs	r2, #0
 800fac6:	b92b      	cbnz	r3, 800fad4 <__ieee754_pow+0x414>
 800fac8:	4bd4      	ldr	r3, [pc, #848]	; (800fe1c <__ieee754_pow+0x75c>)
 800faca:	f7f0 fdbd 	bl	8000648 <__aeabi_dmul>
 800face:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800fad2:	460c      	mov	r4, r1
 800fad4:	1523      	asrs	r3, r4, #20
 800fad6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800fada:	4413      	add	r3, r2
 800fadc:	9305      	str	r3, [sp, #20]
 800fade:	4bd0      	ldr	r3, [pc, #832]	; (800fe20 <__ieee754_pow+0x760>)
 800fae0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800fae4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800fae8:	429c      	cmp	r4, r3
 800faea:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800faee:	dd08      	ble.n	800fb02 <__ieee754_pow+0x442>
 800faf0:	4bcc      	ldr	r3, [pc, #816]	; (800fe24 <__ieee754_pow+0x764>)
 800faf2:	429c      	cmp	r4, r3
 800faf4:	f340 8162 	ble.w	800fdbc <__ieee754_pow+0x6fc>
 800faf8:	9b05      	ldr	r3, [sp, #20]
 800fafa:	3301      	adds	r3, #1
 800fafc:	9305      	str	r3, [sp, #20]
 800fafe:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800fb02:	2400      	movs	r4, #0
 800fb04:	00e3      	lsls	r3, r4, #3
 800fb06:	9307      	str	r3, [sp, #28]
 800fb08:	4bc7      	ldr	r3, [pc, #796]	; (800fe28 <__ieee754_pow+0x768>)
 800fb0a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fb0e:	ed93 7b00 	vldr	d7, [r3]
 800fb12:	4629      	mov	r1, r5
 800fb14:	ec53 2b17 	vmov	r2, r3, d7
 800fb18:	eeb0 9a47 	vmov.f32	s18, s14
 800fb1c:	eef0 9a67 	vmov.f32	s19, s15
 800fb20:	4682      	mov	sl, r0
 800fb22:	f7f0 fbd9 	bl	80002d8 <__aeabi_dsub>
 800fb26:	4652      	mov	r2, sl
 800fb28:	4606      	mov	r6, r0
 800fb2a:	460f      	mov	r7, r1
 800fb2c:	462b      	mov	r3, r5
 800fb2e:	ec51 0b19 	vmov	r0, r1, d9
 800fb32:	f7f0 fbd3 	bl	80002dc <__adddf3>
 800fb36:	4602      	mov	r2, r0
 800fb38:	460b      	mov	r3, r1
 800fb3a:	2000      	movs	r0, #0
 800fb3c:	49bb      	ldr	r1, [pc, #748]	; (800fe2c <__ieee754_pow+0x76c>)
 800fb3e:	f7f0 fead 	bl	800089c <__aeabi_ddiv>
 800fb42:	ec41 0b1a 	vmov	d10, r0, r1
 800fb46:	4602      	mov	r2, r0
 800fb48:	460b      	mov	r3, r1
 800fb4a:	4630      	mov	r0, r6
 800fb4c:	4639      	mov	r1, r7
 800fb4e:	f7f0 fd7b 	bl	8000648 <__aeabi_dmul>
 800fb52:	2300      	movs	r3, #0
 800fb54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fb58:	9302      	str	r3, [sp, #8]
 800fb5a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800fb5e:	46ab      	mov	fp, r5
 800fb60:	106d      	asrs	r5, r5, #1
 800fb62:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800fb66:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800fb6a:	ec41 0b18 	vmov	d8, r0, r1
 800fb6e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800fb72:	2200      	movs	r2, #0
 800fb74:	4640      	mov	r0, r8
 800fb76:	4649      	mov	r1, r9
 800fb78:	4614      	mov	r4, r2
 800fb7a:	461d      	mov	r5, r3
 800fb7c:	f7f0 fd64 	bl	8000648 <__aeabi_dmul>
 800fb80:	4602      	mov	r2, r0
 800fb82:	460b      	mov	r3, r1
 800fb84:	4630      	mov	r0, r6
 800fb86:	4639      	mov	r1, r7
 800fb88:	f7f0 fba6 	bl	80002d8 <__aeabi_dsub>
 800fb8c:	ec53 2b19 	vmov	r2, r3, d9
 800fb90:	4606      	mov	r6, r0
 800fb92:	460f      	mov	r7, r1
 800fb94:	4620      	mov	r0, r4
 800fb96:	4629      	mov	r1, r5
 800fb98:	f7f0 fb9e 	bl	80002d8 <__aeabi_dsub>
 800fb9c:	4602      	mov	r2, r0
 800fb9e:	460b      	mov	r3, r1
 800fba0:	4650      	mov	r0, sl
 800fba2:	4659      	mov	r1, fp
 800fba4:	f7f0 fb98 	bl	80002d8 <__aeabi_dsub>
 800fba8:	4642      	mov	r2, r8
 800fbaa:	464b      	mov	r3, r9
 800fbac:	f7f0 fd4c 	bl	8000648 <__aeabi_dmul>
 800fbb0:	4602      	mov	r2, r0
 800fbb2:	460b      	mov	r3, r1
 800fbb4:	4630      	mov	r0, r6
 800fbb6:	4639      	mov	r1, r7
 800fbb8:	f7f0 fb8e 	bl	80002d8 <__aeabi_dsub>
 800fbbc:	ec53 2b1a 	vmov	r2, r3, d10
 800fbc0:	f7f0 fd42 	bl	8000648 <__aeabi_dmul>
 800fbc4:	ec53 2b18 	vmov	r2, r3, d8
 800fbc8:	ec41 0b19 	vmov	d9, r0, r1
 800fbcc:	ec51 0b18 	vmov	r0, r1, d8
 800fbd0:	f7f0 fd3a 	bl	8000648 <__aeabi_dmul>
 800fbd4:	a37c      	add	r3, pc, #496	; (adr r3, 800fdc8 <__ieee754_pow+0x708>)
 800fbd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbda:	4604      	mov	r4, r0
 800fbdc:	460d      	mov	r5, r1
 800fbde:	f7f0 fd33 	bl	8000648 <__aeabi_dmul>
 800fbe2:	a37b      	add	r3, pc, #492	; (adr r3, 800fdd0 <__ieee754_pow+0x710>)
 800fbe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbe8:	f7f0 fb78 	bl	80002dc <__adddf3>
 800fbec:	4622      	mov	r2, r4
 800fbee:	462b      	mov	r3, r5
 800fbf0:	f7f0 fd2a 	bl	8000648 <__aeabi_dmul>
 800fbf4:	a378      	add	r3, pc, #480	; (adr r3, 800fdd8 <__ieee754_pow+0x718>)
 800fbf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbfa:	f7f0 fb6f 	bl	80002dc <__adddf3>
 800fbfe:	4622      	mov	r2, r4
 800fc00:	462b      	mov	r3, r5
 800fc02:	f7f0 fd21 	bl	8000648 <__aeabi_dmul>
 800fc06:	a376      	add	r3, pc, #472	; (adr r3, 800fde0 <__ieee754_pow+0x720>)
 800fc08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc0c:	f7f0 fb66 	bl	80002dc <__adddf3>
 800fc10:	4622      	mov	r2, r4
 800fc12:	462b      	mov	r3, r5
 800fc14:	f7f0 fd18 	bl	8000648 <__aeabi_dmul>
 800fc18:	a373      	add	r3, pc, #460	; (adr r3, 800fde8 <__ieee754_pow+0x728>)
 800fc1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc1e:	f7f0 fb5d 	bl	80002dc <__adddf3>
 800fc22:	4622      	mov	r2, r4
 800fc24:	462b      	mov	r3, r5
 800fc26:	f7f0 fd0f 	bl	8000648 <__aeabi_dmul>
 800fc2a:	a371      	add	r3, pc, #452	; (adr r3, 800fdf0 <__ieee754_pow+0x730>)
 800fc2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc30:	f7f0 fb54 	bl	80002dc <__adddf3>
 800fc34:	4622      	mov	r2, r4
 800fc36:	4606      	mov	r6, r0
 800fc38:	460f      	mov	r7, r1
 800fc3a:	462b      	mov	r3, r5
 800fc3c:	4620      	mov	r0, r4
 800fc3e:	4629      	mov	r1, r5
 800fc40:	f7f0 fd02 	bl	8000648 <__aeabi_dmul>
 800fc44:	4602      	mov	r2, r0
 800fc46:	460b      	mov	r3, r1
 800fc48:	4630      	mov	r0, r6
 800fc4a:	4639      	mov	r1, r7
 800fc4c:	f7f0 fcfc 	bl	8000648 <__aeabi_dmul>
 800fc50:	4642      	mov	r2, r8
 800fc52:	4604      	mov	r4, r0
 800fc54:	460d      	mov	r5, r1
 800fc56:	464b      	mov	r3, r9
 800fc58:	ec51 0b18 	vmov	r0, r1, d8
 800fc5c:	f7f0 fb3e 	bl	80002dc <__adddf3>
 800fc60:	ec53 2b19 	vmov	r2, r3, d9
 800fc64:	f7f0 fcf0 	bl	8000648 <__aeabi_dmul>
 800fc68:	4622      	mov	r2, r4
 800fc6a:	462b      	mov	r3, r5
 800fc6c:	f7f0 fb36 	bl	80002dc <__adddf3>
 800fc70:	4642      	mov	r2, r8
 800fc72:	4682      	mov	sl, r0
 800fc74:	468b      	mov	fp, r1
 800fc76:	464b      	mov	r3, r9
 800fc78:	4640      	mov	r0, r8
 800fc7a:	4649      	mov	r1, r9
 800fc7c:	f7f0 fce4 	bl	8000648 <__aeabi_dmul>
 800fc80:	4b6b      	ldr	r3, [pc, #428]	; (800fe30 <__ieee754_pow+0x770>)
 800fc82:	2200      	movs	r2, #0
 800fc84:	4606      	mov	r6, r0
 800fc86:	460f      	mov	r7, r1
 800fc88:	f7f0 fb28 	bl	80002dc <__adddf3>
 800fc8c:	4652      	mov	r2, sl
 800fc8e:	465b      	mov	r3, fp
 800fc90:	f7f0 fb24 	bl	80002dc <__adddf3>
 800fc94:	2000      	movs	r0, #0
 800fc96:	4604      	mov	r4, r0
 800fc98:	460d      	mov	r5, r1
 800fc9a:	4602      	mov	r2, r0
 800fc9c:	460b      	mov	r3, r1
 800fc9e:	4640      	mov	r0, r8
 800fca0:	4649      	mov	r1, r9
 800fca2:	f7f0 fcd1 	bl	8000648 <__aeabi_dmul>
 800fca6:	4b62      	ldr	r3, [pc, #392]	; (800fe30 <__ieee754_pow+0x770>)
 800fca8:	4680      	mov	r8, r0
 800fcaa:	4689      	mov	r9, r1
 800fcac:	2200      	movs	r2, #0
 800fcae:	4620      	mov	r0, r4
 800fcb0:	4629      	mov	r1, r5
 800fcb2:	f7f0 fb11 	bl	80002d8 <__aeabi_dsub>
 800fcb6:	4632      	mov	r2, r6
 800fcb8:	463b      	mov	r3, r7
 800fcba:	f7f0 fb0d 	bl	80002d8 <__aeabi_dsub>
 800fcbe:	4602      	mov	r2, r0
 800fcc0:	460b      	mov	r3, r1
 800fcc2:	4650      	mov	r0, sl
 800fcc4:	4659      	mov	r1, fp
 800fcc6:	f7f0 fb07 	bl	80002d8 <__aeabi_dsub>
 800fcca:	ec53 2b18 	vmov	r2, r3, d8
 800fcce:	f7f0 fcbb 	bl	8000648 <__aeabi_dmul>
 800fcd2:	4622      	mov	r2, r4
 800fcd4:	4606      	mov	r6, r0
 800fcd6:	460f      	mov	r7, r1
 800fcd8:	462b      	mov	r3, r5
 800fcda:	ec51 0b19 	vmov	r0, r1, d9
 800fcde:	f7f0 fcb3 	bl	8000648 <__aeabi_dmul>
 800fce2:	4602      	mov	r2, r0
 800fce4:	460b      	mov	r3, r1
 800fce6:	4630      	mov	r0, r6
 800fce8:	4639      	mov	r1, r7
 800fcea:	f7f0 faf7 	bl	80002dc <__adddf3>
 800fcee:	4606      	mov	r6, r0
 800fcf0:	460f      	mov	r7, r1
 800fcf2:	4602      	mov	r2, r0
 800fcf4:	460b      	mov	r3, r1
 800fcf6:	4640      	mov	r0, r8
 800fcf8:	4649      	mov	r1, r9
 800fcfa:	f7f0 faef 	bl	80002dc <__adddf3>
 800fcfe:	a33e      	add	r3, pc, #248	; (adr r3, 800fdf8 <__ieee754_pow+0x738>)
 800fd00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd04:	2000      	movs	r0, #0
 800fd06:	4604      	mov	r4, r0
 800fd08:	460d      	mov	r5, r1
 800fd0a:	f7f0 fc9d 	bl	8000648 <__aeabi_dmul>
 800fd0e:	4642      	mov	r2, r8
 800fd10:	ec41 0b18 	vmov	d8, r0, r1
 800fd14:	464b      	mov	r3, r9
 800fd16:	4620      	mov	r0, r4
 800fd18:	4629      	mov	r1, r5
 800fd1a:	f7f0 fadd 	bl	80002d8 <__aeabi_dsub>
 800fd1e:	4602      	mov	r2, r0
 800fd20:	460b      	mov	r3, r1
 800fd22:	4630      	mov	r0, r6
 800fd24:	4639      	mov	r1, r7
 800fd26:	f7f0 fad7 	bl	80002d8 <__aeabi_dsub>
 800fd2a:	a335      	add	r3, pc, #212	; (adr r3, 800fe00 <__ieee754_pow+0x740>)
 800fd2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd30:	f7f0 fc8a 	bl	8000648 <__aeabi_dmul>
 800fd34:	a334      	add	r3, pc, #208	; (adr r3, 800fe08 <__ieee754_pow+0x748>)
 800fd36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd3a:	4606      	mov	r6, r0
 800fd3c:	460f      	mov	r7, r1
 800fd3e:	4620      	mov	r0, r4
 800fd40:	4629      	mov	r1, r5
 800fd42:	f7f0 fc81 	bl	8000648 <__aeabi_dmul>
 800fd46:	4602      	mov	r2, r0
 800fd48:	460b      	mov	r3, r1
 800fd4a:	4630      	mov	r0, r6
 800fd4c:	4639      	mov	r1, r7
 800fd4e:	f7f0 fac5 	bl	80002dc <__adddf3>
 800fd52:	9a07      	ldr	r2, [sp, #28]
 800fd54:	4b37      	ldr	r3, [pc, #220]	; (800fe34 <__ieee754_pow+0x774>)
 800fd56:	4413      	add	r3, r2
 800fd58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd5c:	f7f0 fabe 	bl	80002dc <__adddf3>
 800fd60:	4682      	mov	sl, r0
 800fd62:	9805      	ldr	r0, [sp, #20]
 800fd64:	468b      	mov	fp, r1
 800fd66:	f7f0 fc05 	bl	8000574 <__aeabi_i2d>
 800fd6a:	9a07      	ldr	r2, [sp, #28]
 800fd6c:	4b32      	ldr	r3, [pc, #200]	; (800fe38 <__ieee754_pow+0x778>)
 800fd6e:	4413      	add	r3, r2
 800fd70:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fd74:	4606      	mov	r6, r0
 800fd76:	460f      	mov	r7, r1
 800fd78:	4652      	mov	r2, sl
 800fd7a:	465b      	mov	r3, fp
 800fd7c:	ec51 0b18 	vmov	r0, r1, d8
 800fd80:	f7f0 faac 	bl	80002dc <__adddf3>
 800fd84:	4642      	mov	r2, r8
 800fd86:	464b      	mov	r3, r9
 800fd88:	f7f0 faa8 	bl	80002dc <__adddf3>
 800fd8c:	4632      	mov	r2, r6
 800fd8e:	463b      	mov	r3, r7
 800fd90:	f7f0 faa4 	bl	80002dc <__adddf3>
 800fd94:	2000      	movs	r0, #0
 800fd96:	4632      	mov	r2, r6
 800fd98:	463b      	mov	r3, r7
 800fd9a:	4604      	mov	r4, r0
 800fd9c:	460d      	mov	r5, r1
 800fd9e:	f7f0 fa9b 	bl	80002d8 <__aeabi_dsub>
 800fda2:	4642      	mov	r2, r8
 800fda4:	464b      	mov	r3, r9
 800fda6:	f7f0 fa97 	bl	80002d8 <__aeabi_dsub>
 800fdaa:	ec53 2b18 	vmov	r2, r3, d8
 800fdae:	f7f0 fa93 	bl	80002d8 <__aeabi_dsub>
 800fdb2:	4602      	mov	r2, r0
 800fdb4:	460b      	mov	r3, r1
 800fdb6:	4650      	mov	r0, sl
 800fdb8:	4659      	mov	r1, fp
 800fdba:	e610      	b.n	800f9de <__ieee754_pow+0x31e>
 800fdbc:	2401      	movs	r4, #1
 800fdbe:	e6a1      	b.n	800fb04 <__ieee754_pow+0x444>
 800fdc0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800fe10 <__ieee754_pow+0x750>
 800fdc4:	e617      	b.n	800f9f6 <__ieee754_pow+0x336>
 800fdc6:	bf00      	nop
 800fdc8:	4a454eef 	.word	0x4a454eef
 800fdcc:	3fca7e28 	.word	0x3fca7e28
 800fdd0:	93c9db65 	.word	0x93c9db65
 800fdd4:	3fcd864a 	.word	0x3fcd864a
 800fdd8:	a91d4101 	.word	0xa91d4101
 800fddc:	3fd17460 	.word	0x3fd17460
 800fde0:	518f264d 	.word	0x518f264d
 800fde4:	3fd55555 	.word	0x3fd55555
 800fde8:	db6fabff 	.word	0xdb6fabff
 800fdec:	3fdb6db6 	.word	0x3fdb6db6
 800fdf0:	33333303 	.word	0x33333303
 800fdf4:	3fe33333 	.word	0x3fe33333
 800fdf8:	e0000000 	.word	0xe0000000
 800fdfc:	3feec709 	.word	0x3feec709
 800fe00:	dc3a03fd 	.word	0xdc3a03fd
 800fe04:	3feec709 	.word	0x3feec709
 800fe08:	145b01f5 	.word	0x145b01f5
 800fe0c:	be3e2fe0 	.word	0xbe3e2fe0
 800fe10:	00000000 	.word	0x00000000
 800fe14:	3ff00000 	.word	0x3ff00000
 800fe18:	7ff00000 	.word	0x7ff00000
 800fe1c:	43400000 	.word	0x43400000
 800fe20:	0003988e 	.word	0x0003988e
 800fe24:	000bb679 	.word	0x000bb679
 800fe28:	08013a48 	.word	0x08013a48
 800fe2c:	3ff00000 	.word	0x3ff00000
 800fe30:	40080000 	.word	0x40080000
 800fe34:	08013a68 	.word	0x08013a68
 800fe38:	08013a58 	.word	0x08013a58
 800fe3c:	a3b3      	add	r3, pc, #716	; (adr r3, 801010c <__ieee754_pow+0xa4c>)
 800fe3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe42:	4640      	mov	r0, r8
 800fe44:	4649      	mov	r1, r9
 800fe46:	f7f0 fa49 	bl	80002dc <__adddf3>
 800fe4a:	4622      	mov	r2, r4
 800fe4c:	ec41 0b1a 	vmov	d10, r0, r1
 800fe50:	462b      	mov	r3, r5
 800fe52:	4630      	mov	r0, r6
 800fe54:	4639      	mov	r1, r7
 800fe56:	f7f0 fa3f 	bl	80002d8 <__aeabi_dsub>
 800fe5a:	4602      	mov	r2, r0
 800fe5c:	460b      	mov	r3, r1
 800fe5e:	ec51 0b1a 	vmov	r0, r1, d10
 800fe62:	f7f0 fe81 	bl	8000b68 <__aeabi_dcmpgt>
 800fe66:	2800      	cmp	r0, #0
 800fe68:	f47f ae04 	bne.w	800fa74 <__ieee754_pow+0x3b4>
 800fe6c:	4aa2      	ldr	r2, [pc, #648]	; (80100f8 <__ieee754_pow+0xa38>)
 800fe6e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800fe72:	4293      	cmp	r3, r2
 800fe74:	f340 8107 	ble.w	8010086 <__ieee754_pow+0x9c6>
 800fe78:	151b      	asrs	r3, r3, #20
 800fe7a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800fe7e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800fe82:	fa4a fa03 	asr.w	sl, sl, r3
 800fe86:	44da      	add	sl, fp
 800fe88:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800fe8c:	489b      	ldr	r0, [pc, #620]	; (80100fc <__ieee754_pow+0xa3c>)
 800fe8e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800fe92:	4108      	asrs	r0, r1
 800fe94:	ea00 030a 	and.w	r3, r0, sl
 800fe98:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800fe9c:	f1c1 0114 	rsb	r1, r1, #20
 800fea0:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800fea4:	fa4a fa01 	asr.w	sl, sl, r1
 800fea8:	f1bb 0f00 	cmp.w	fp, #0
 800feac:	f04f 0200 	mov.w	r2, #0
 800feb0:	4620      	mov	r0, r4
 800feb2:	4629      	mov	r1, r5
 800feb4:	bfb8      	it	lt
 800feb6:	f1ca 0a00 	rsblt	sl, sl, #0
 800feba:	f7f0 fa0d 	bl	80002d8 <__aeabi_dsub>
 800febe:	ec41 0b19 	vmov	d9, r0, r1
 800fec2:	4642      	mov	r2, r8
 800fec4:	464b      	mov	r3, r9
 800fec6:	ec51 0b19 	vmov	r0, r1, d9
 800feca:	f7f0 fa07 	bl	80002dc <__adddf3>
 800fece:	a37a      	add	r3, pc, #488	; (adr r3, 80100b8 <__ieee754_pow+0x9f8>)
 800fed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fed4:	2000      	movs	r0, #0
 800fed6:	4604      	mov	r4, r0
 800fed8:	460d      	mov	r5, r1
 800feda:	f7f0 fbb5 	bl	8000648 <__aeabi_dmul>
 800fede:	ec53 2b19 	vmov	r2, r3, d9
 800fee2:	4606      	mov	r6, r0
 800fee4:	460f      	mov	r7, r1
 800fee6:	4620      	mov	r0, r4
 800fee8:	4629      	mov	r1, r5
 800feea:	f7f0 f9f5 	bl	80002d8 <__aeabi_dsub>
 800feee:	4602      	mov	r2, r0
 800fef0:	460b      	mov	r3, r1
 800fef2:	4640      	mov	r0, r8
 800fef4:	4649      	mov	r1, r9
 800fef6:	f7f0 f9ef 	bl	80002d8 <__aeabi_dsub>
 800fefa:	a371      	add	r3, pc, #452	; (adr r3, 80100c0 <__ieee754_pow+0xa00>)
 800fefc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff00:	f7f0 fba2 	bl	8000648 <__aeabi_dmul>
 800ff04:	a370      	add	r3, pc, #448	; (adr r3, 80100c8 <__ieee754_pow+0xa08>)
 800ff06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff0a:	4680      	mov	r8, r0
 800ff0c:	4689      	mov	r9, r1
 800ff0e:	4620      	mov	r0, r4
 800ff10:	4629      	mov	r1, r5
 800ff12:	f7f0 fb99 	bl	8000648 <__aeabi_dmul>
 800ff16:	4602      	mov	r2, r0
 800ff18:	460b      	mov	r3, r1
 800ff1a:	4640      	mov	r0, r8
 800ff1c:	4649      	mov	r1, r9
 800ff1e:	f7f0 f9dd 	bl	80002dc <__adddf3>
 800ff22:	4604      	mov	r4, r0
 800ff24:	460d      	mov	r5, r1
 800ff26:	4602      	mov	r2, r0
 800ff28:	460b      	mov	r3, r1
 800ff2a:	4630      	mov	r0, r6
 800ff2c:	4639      	mov	r1, r7
 800ff2e:	f7f0 f9d5 	bl	80002dc <__adddf3>
 800ff32:	4632      	mov	r2, r6
 800ff34:	463b      	mov	r3, r7
 800ff36:	4680      	mov	r8, r0
 800ff38:	4689      	mov	r9, r1
 800ff3a:	f7f0 f9cd 	bl	80002d8 <__aeabi_dsub>
 800ff3e:	4602      	mov	r2, r0
 800ff40:	460b      	mov	r3, r1
 800ff42:	4620      	mov	r0, r4
 800ff44:	4629      	mov	r1, r5
 800ff46:	f7f0 f9c7 	bl	80002d8 <__aeabi_dsub>
 800ff4a:	4642      	mov	r2, r8
 800ff4c:	4606      	mov	r6, r0
 800ff4e:	460f      	mov	r7, r1
 800ff50:	464b      	mov	r3, r9
 800ff52:	4640      	mov	r0, r8
 800ff54:	4649      	mov	r1, r9
 800ff56:	f7f0 fb77 	bl	8000648 <__aeabi_dmul>
 800ff5a:	a35d      	add	r3, pc, #372	; (adr r3, 80100d0 <__ieee754_pow+0xa10>)
 800ff5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff60:	4604      	mov	r4, r0
 800ff62:	460d      	mov	r5, r1
 800ff64:	f7f0 fb70 	bl	8000648 <__aeabi_dmul>
 800ff68:	a35b      	add	r3, pc, #364	; (adr r3, 80100d8 <__ieee754_pow+0xa18>)
 800ff6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff6e:	f7f0 f9b3 	bl	80002d8 <__aeabi_dsub>
 800ff72:	4622      	mov	r2, r4
 800ff74:	462b      	mov	r3, r5
 800ff76:	f7f0 fb67 	bl	8000648 <__aeabi_dmul>
 800ff7a:	a359      	add	r3, pc, #356	; (adr r3, 80100e0 <__ieee754_pow+0xa20>)
 800ff7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff80:	f7f0 f9ac 	bl	80002dc <__adddf3>
 800ff84:	4622      	mov	r2, r4
 800ff86:	462b      	mov	r3, r5
 800ff88:	f7f0 fb5e 	bl	8000648 <__aeabi_dmul>
 800ff8c:	a356      	add	r3, pc, #344	; (adr r3, 80100e8 <__ieee754_pow+0xa28>)
 800ff8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff92:	f7f0 f9a1 	bl	80002d8 <__aeabi_dsub>
 800ff96:	4622      	mov	r2, r4
 800ff98:	462b      	mov	r3, r5
 800ff9a:	f7f0 fb55 	bl	8000648 <__aeabi_dmul>
 800ff9e:	a354      	add	r3, pc, #336	; (adr r3, 80100f0 <__ieee754_pow+0xa30>)
 800ffa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffa4:	f7f0 f99a 	bl	80002dc <__adddf3>
 800ffa8:	4622      	mov	r2, r4
 800ffaa:	462b      	mov	r3, r5
 800ffac:	f7f0 fb4c 	bl	8000648 <__aeabi_dmul>
 800ffb0:	4602      	mov	r2, r0
 800ffb2:	460b      	mov	r3, r1
 800ffb4:	4640      	mov	r0, r8
 800ffb6:	4649      	mov	r1, r9
 800ffb8:	f7f0 f98e 	bl	80002d8 <__aeabi_dsub>
 800ffbc:	4604      	mov	r4, r0
 800ffbe:	460d      	mov	r5, r1
 800ffc0:	4602      	mov	r2, r0
 800ffc2:	460b      	mov	r3, r1
 800ffc4:	4640      	mov	r0, r8
 800ffc6:	4649      	mov	r1, r9
 800ffc8:	f7f0 fb3e 	bl	8000648 <__aeabi_dmul>
 800ffcc:	2200      	movs	r2, #0
 800ffce:	ec41 0b19 	vmov	d9, r0, r1
 800ffd2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ffd6:	4620      	mov	r0, r4
 800ffd8:	4629      	mov	r1, r5
 800ffda:	f7f0 f97d 	bl	80002d8 <__aeabi_dsub>
 800ffde:	4602      	mov	r2, r0
 800ffe0:	460b      	mov	r3, r1
 800ffe2:	ec51 0b19 	vmov	r0, r1, d9
 800ffe6:	f7f0 fc59 	bl	800089c <__aeabi_ddiv>
 800ffea:	4632      	mov	r2, r6
 800ffec:	4604      	mov	r4, r0
 800ffee:	460d      	mov	r5, r1
 800fff0:	463b      	mov	r3, r7
 800fff2:	4640      	mov	r0, r8
 800fff4:	4649      	mov	r1, r9
 800fff6:	f7f0 fb27 	bl	8000648 <__aeabi_dmul>
 800fffa:	4632      	mov	r2, r6
 800fffc:	463b      	mov	r3, r7
 800fffe:	f7f0 f96d 	bl	80002dc <__adddf3>
 8010002:	4602      	mov	r2, r0
 8010004:	460b      	mov	r3, r1
 8010006:	4620      	mov	r0, r4
 8010008:	4629      	mov	r1, r5
 801000a:	f7f0 f965 	bl	80002d8 <__aeabi_dsub>
 801000e:	4642      	mov	r2, r8
 8010010:	464b      	mov	r3, r9
 8010012:	f7f0 f961 	bl	80002d8 <__aeabi_dsub>
 8010016:	460b      	mov	r3, r1
 8010018:	4602      	mov	r2, r0
 801001a:	4939      	ldr	r1, [pc, #228]	; (8010100 <__ieee754_pow+0xa40>)
 801001c:	2000      	movs	r0, #0
 801001e:	f7f0 f95b 	bl	80002d8 <__aeabi_dsub>
 8010022:	ec41 0b10 	vmov	d0, r0, r1
 8010026:	ee10 3a90 	vmov	r3, s1
 801002a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801002e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010032:	da2b      	bge.n	801008c <__ieee754_pow+0x9cc>
 8010034:	4650      	mov	r0, sl
 8010036:	f000 f877 	bl	8010128 <scalbn>
 801003a:	ec51 0b10 	vmov	r0, r1, d0
 801003e:	ec53 2b18 	vmov	r2, r3, d8
 8010042:	f7ff bbee 	b.w	800f822 <__ieee754_pow+0x162>
 8010046:	4b2f      	ldr	r3, [pc, #188]	; (8010104 <__ieee754_pow+0xa44>)
 8010048:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801004c:	429e      	cmp	r6, r3
 801004e:	f77f af0d 	ble.w	800fe6c <__ieee754_pow+0x7ac>
 8010052:	4b2d      	ldr	r3, [pc, #180]	; (8010108 <__ieee754_pow+0xa48>)
 8010054:	440b      	add	r3, r1
 8010056:	4303      	orrs	r3, r0
 8010058:	d009      	beq.n	801006e <__ieee754_pow+0x9ae>
 801005a:	ec51 0b18 	vmov	r0, r1, d8
 801005e:	2200      	movs	r2, #0
 8010060:	2300      	movs	r3, #0
 8010062:	f7f0 fd63 	bl	8000b2c <__aeabi_dcmplt>
 8010066:	3800      	subs	r0, #0
 8010068:	bf18      	it	ne
 801006a:	2001      	movne	r0, #1
 801006c:	e448      	b.n	800f900 <__ieee754_pow+0x240>
 801006e:	4622      	mov	r2, r4
 8010070:	462b      	mov	r3, r5
 8010072:	f7f0 f931 	bl	80002d8 <__aeabi_dsub>
 8010076:	4642      	mov	r2, r8
 8010078:	464b      	mov	r3, r9
 801007a:	f7f0 fd6b 	bl	8000b54 <__aeabi_dcmpge>
 801007e:	2800      	cmp	r0, #0
 8010080:	f43f aef4 	beq.w	800fe6c <__ieee754_pow+0x7ac>
 8010084:	e7e9      	b.n	801005a <__ieee754_pow+0x99a>
 8010086:	f04f 0a00 	mov.w	sl, #0
 801008a:	e71a      	b.n	800fec2 <__ieee754_pow+0x802>
 801008c:	ec51 0b10 	vmov	r0, r1, d0
 8010090:	4619      	mov	r1, r3
 8010092:	e7d4      	b.n	801003e <__ieee754_pow+0x97e>
 8010094:	491a      	ldr	r1, [pc, #104]	; (8010100 <__ieee754_pow+0xa40>)
 8010096:	2000      	movs	r0, #0
 8010098:	f7ff bb31 	b.w	800f6fe <__ieee754_pow+0x3e>
 801009c:	2000      	movs	r0, #0
 801009e:	2100      	movs	r1, #0
 80100a0:	f7ff bb2d 	b.w	800f6fe <__ieee754_pow+0x3e>
 80100a4:	4630      	mov	r0, r6
 80100a6:	4639      	mov	r1, r7
 80100a8:	f7ff bb29 	b.w	800f6fe <__ieee754_pow+0x3e>
 80100ac:	9204      	str	r2, [sp, #16]
 80100ae:	f7ff bb7b 	b.w	800f7a8 <__ieee754_pow+0xe8>
 80100b2:	2300      	movs	r3, #0
 80100b4:	f7ff bb65 	b.w	800f782 <__ieee754_pow+0xc2>
 80100b8:	00000000 	.word	0x00000000
 80100bc:	3fe62e43 	.word	0x3fe62e43
 80100c0:	fefa39ef 	.word	0xfefa39ef
 80100c4:	3fe62e42 	.word	0x3fe62e42
 80100c8:	0ca86c39 	.word	0x0ca86c39
 80100cc:	be205c61 	.word	0xbe205c61
 80100d0:	72bea4d0 	.word	0x72bea4d0
 80100d4:	3e663769 	.word	0x3e663769
 80100d8:	c5d26bf1 	.word	0xc5d26bf1
 80100dc:	3ebbbd41 	.word	0x3ebbbd41
 80100e0:	af25de2c 	.word	0xaf25de2c
 80100e4:	3f11566a 	.word	0x3f11566a
 80100e8:	16bebd93 	.word	0x16bebd93
 80100ec:	3f66c16c 	.word	0x3f66c16c
 80100f0:	5555553e 	.word	0x5555553e
 80100f4:	3fc55555 	.word	0x3fc55555
 80100f8:	3fe00000 	.word	0x3fe00000
 80100fc:	fff00000 	.word	0xfff00000
 8010100:	3ff00000 	.word	0x3ff00000
 8010104:	4090cbff 	.word	0x4090cbff
 8010108:	3f6f3400 	.word	0x3f6f3400
 801010c:	652b82fe 	.word	0x652b82fe
 8010110:	3c971547 	.word	0x3c971547

08010114 <fabs>:
 8010114:	ec51 0b10 	vmov	r0, r1, d0
 8010118:	ee10 2a10 	vmov	r2, s0
 801011c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010120:	ec43 2b10 	vmov	d0, r2, r3
 8010124:	4770      	bx	lr
	...

08010128 <scalbn>:
 8010128:	b570      	push	{r4, r5, r6, lr}
 801012a:	ec55 4b10 	vmov	r4, r5, d0
 801012e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8010132:	4606      	mov	r6, r0
 8010134:	462b      	mov	r3, r5
 8010136:	b999      	cbnz	r1, 8010160 <scalbn+0x38>
 8010138:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801013c:	4323      	orrs	r3, r4
 801013e:	d03f      	beq.n	80101c0 <scalbn+0x98>
 8010140:	4b35      	ldr	r3, [pc, #212]	; (8010218 <scalbn+0xf0>)
 8010142:	4629      	mov	r1, r5
 8010144:	ee10 0a10 	vmov	r0, s0
 8010148:	2200      	movs	r2, #0
 801014a:	f7f0 fa7d 	bl	8000648 <__aeabi_dmul>
 801014e:	4b33      	ldr	r3, [pc, #204]	; (801021c <scalbn+0xf4>)
 8010150:	429e      	cmp	r6, r3
 8010152:	4604      	mov	r4, r0
 8010154:	460d      	mov	r5, r1
 8010156:	da10      	bge.n	801017a <scalbn+0x52>
 8010158:	a327      	add	r3, pc, #156	; (adr r3, 80101f8 <scalbn+0xd0>)
 801015a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801015e:	e01f      	b.n	80101a0 <scalbn+0x78>
 8010160:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8010164:	4291      	cmp	r1, r2
 8010166:	d10c      	bne.n	8010182 <scalbn+0x5a>
 8010168:	ee10 2a10 	vmov	r2, s0
 801016c:	4620      	mov	r0, r4
 801016e:	4629      	mov	r1, r5
 8010170:	f7f0 f8b4 	bl	80002dc <__adddf3>
 8010174:	4604      	mov	r4, r0
 8010176:	460d      	mov	r5, r1
 8010178:	e022      	b.n	80101c0 <scalbn+0x98>
 801017a:	460b      	mov	r3, r1
 801017c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8010180:	3936      	subs	r1, #54	; 0x36
 8010182:	f24c 3250 	movw	r2, #50000	; 0xc350
 8010186:	4296      	cmp	r6, r2
 8010188:	dd0d      	ble.n	80101a6 <scalbn+0x7e>
 801018a:	2d00      	cmp	r5, #0
 801018c:	a11c      	add	r1, pc, #112	; (adr r1, 8010200 <scalbn+0xd8>)
 801018e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010192:	da02      	bge.n	801019a <scalbn+0x72>
 8010194:	a11c      	add	r1, pc, #112	; (adr r1, 8010208 <scalbn+0xe0>)
 8010196:	e9d1 0100 	ldrd	r0, r1, [r1]
 801019a:	a319      	add	r3, pc, #100	; (adr r3, 8010200 <scalbn+0xd8>)
 801019c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101a0:	f7f0 fa52 	bl	8000648 <__aeabi_dmul>
 80101a4:	e7e6      	b.n	8010174 <scalbn+0x4c>
 80101a6:	1872      	adds	r2, r6, r1
 80101a8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80101ac:	428a      	cmp	r2, r1
 80101ae:	dcec      	bgt.n	801018a <scalbn+0x62>
 80101b0:	2a00      	cmp	r2, #0
 80101b2:	dd08      	ble.n	80101c6 <scalbn+0x9e>
 80101b4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80101b8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80101bc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80101c0:	ec45 4b10 	vmov	d0, r4, r5
 80101c4:	bd70      	pop	{r4, r5, r6, pc}
 80101c6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80101ca:	da08      	bge.n	80101de <scalbn+0xb6>
 80101cc:	2d00      	cmp	r5, #0
 80101ce:	a10a      	add	r1, pc, #40	; (adr r1, 80101f8 <scalbn+0xd0>)
 80101d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80101d4:	dac0      	bge.n	8010158 <scalbn+0x30>
 80101d6:	a10e      	add	r1, pc, #56	; (adr r1, 8010210 <scalbn+0xe8>)
 80101d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80101dc:	e7bc      	b.n	8010158 <scalbn+0x30>
 80101de:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80101e2:	3236      	adds	r2, #54	; 0x36
 80101e4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80101e8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80101ec:	4620      	mov	r0, r4
 80101ee:	4b0c      	ldr	r3, [pc, #48]	; (8010220 <scalbn+0xf8>)
 80101f0:	2200      	movs	r2, #0
 80101f2:	e7d5      	b.n	80101a0 <scalbn+0x78>
 80101f4:	f3af 8000 	nop.w
 80101f8:	c2f8f359 	.word	0xc2f8f359
 80101fc:	01a56e1f 	.word	0x01a56e1f
 8010200:	8800759c 	.word	0x8800759c
 8010204:	7e37e43c 	.word	0x7e37e43c
 8010208:	8800759c 	.word	0x8800759c
 801020c:	fe37e43c 	.word	0xfe37e43c
 8010210:	c2f8f359 	.word	0xc2f8f359
 8010214:	81a56e1f 	.word	0x81a56e1f
 8010218:	43500000 	.word	0x43500000
 801021c:	ffff3cb0 	.word	0xffff3cb0
 8010220:	3c900000 	.word	0x3c900000

08010224 <with_errno>:
 8010224:	b570      	push	{r4, r5, r6, lr}
 8010226:	4604      	mov	r4, r0
 8010228:	460d      	mov	r5, r1
 801022a:	4616      	mov	r6, r2
 801022c:	f7fd fa7c 	bl	800d728 <__errno>
 8010230:	4629      	mov	r1, r5
 8010232:	6006      	str	r6, [r0, #0]
 8010234:	4620      	mov	r0, r4
 8010236:	bd70      	pop	{r4, r5, r6, pc}

08010238 <xflow>:
 8010238:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801023a:	4614      	mov	r4, r2
 801023c:	461d      	mov	r5, r3
 801023e:	b108      	cbz	r0, 8010244 <xflow+0xc>
 8010240:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8010244:	e9cd 2300 	strd	r2, r3, [sp]
 8010248:	e9dd 2300 	ldrd	r2, r3, [sp]
 801024c:	4620      	mov	r0, r4
 801024e:	4629      	mov	r1, r5
 8010250:	f7f0 f9fa 	bl	8000648 <__aeabi_dmul>
 8010254:	2222      	movs	r2, #34	; 0x22
 8010256:	b003      	add	sp, #12
 8010258:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801025c:	f7ff bfe2 	b.w	8010224 <with_errno>

08010260 <__math_uflow>:
 8010260:	b508      	push	{r3, lr}
 8010262:	2200      	movs	r2, #0
 8010264:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8010268:	f7ff ffe6 	bl	8010238 <xflow>
 801026c:	ec41 0b10 	vmov	d0, r0, r1
 8010270:	bd08      	pop	{r3, pc}

08010272 <__math_oflow>:
 8010272:	b508      	push	{r3, lr}
 8010274:	2200      	movs	r2, #0
 8010276:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801027a:	f7ff ffdd 	bl	8010238 <xflow>
 801027e:	ec41 0b10 	vmov	d0, r0, r1
 8010282:	bd08      	pop	{r3, pc}

08010284 <__ieee754_sqrt>:
 8010284:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010288:	ec55 4b10 	vmov	r4, r5, d0
 801028c:	4e67      	ldr	r6, [pc, #412]	; (801042c <__ieee754_sqrt+0x1a8>)
 801028e:	43ae      	bics	r6, r5
 8010290:	ee10 0a10 	vmov	r0, s0
 8010294:	ee10 2a10 	vmov	r2, s0
 8010298:	4629      	mov	r1, r5
 801029a:	462b      	mov	r3, r5
 801029c:	d10d      	bne.n	80102ba <__ieee754_sqrt+0x36>
 801029e:	f7f0 f9d3 	bl	8000648 <__aeabi_dmul>
 80102a2:	4602      	mov	r2, r0
 80102a4:	460b      	mov	r3, r1
 80102a6:	4620      	mov	r0, r4
 80102a8:	4629      	mov	r1, r5
 80102aa:	f7f0 f817 	bl	80002dc <__adddf3>
 80102ae:	4604      	mov	r4, r0
 80102b0:	460d      	mov	r5, r1
 80102b2:	ec45 4b10 	vmov	d0, r4, r5
 80102b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102ba:	2d00      	cmp	r5, #0
 80102bc:	dc0b      	bgt.n	80102d6 <__ieee754_sqrt+0x52>
 80102be:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80102c2:	4326      	orrs	r6, r4
 80102c4:	d0f5      	beq.n	80102b2 <__ieee754_sqrt+0x2e>
 80102c6:	b135      	cbz	r5, 80102d6 <__ieee754_sqrt+0x52>
 80102c8:	f7f0 f806 	bl	80002d8 <__aeabi_dsub>
 80102cc:	4602      	mov	r2, r0
 80102ce:	460b      	mov	r3, r1
 80102d0:	f7f0 fae4 	bl	800089c <__aeabi_ddiv>
 80102d4:	e7eb      	b.n	80102ae <__ieee754_sqrt+0x2a>
 80102d6:	1509      	asrs	r1, r1, #20
 80102d8:	f000 808d 	beq.w	80103f6 <__ieee754_sqrt+0x172>
 80102dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80102e0:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 80102e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80102e8:	07c9      	lsls	r1, r1, #31
 80102ea:	bf5c      	itt	pl
 80102ec:	005b      	lslpl	r3, r3, #1
 80102ee:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 80102f2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80102f6:	bf58      	it	pl
 80102f8:	0052      	lslpl	r2, r2, #1
 80102fa:	2500      	movs	r5, #0
 80102fc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8010300:	1076      	asrs	r6, r6, #1
 8010302:	0052      	lsls	r2, r2, #1
 8010304:	f04f 0e16 	mov.w	lr, #22
 8010308:	46ac      	mov	ip, r5
 801030a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801030e:	eb0c 0001 	add.w	r0, ip, r1
 8010312:	4298      	cmp	r0, r3
 8010314:	bfde      	ittt	le
 8010316:	1a1b      	suble	r3, r3, r0
 8010318:	eb00 0c01 	addle.w	ip, r0, r1
 801031c:	186d      	addle	r5, r5, r1
 801031e:	005b      	lsls	r3, r3, #1
 8010320:	f1be 0e01 	subs.w	lr, lr, #1
 8010324:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8010328:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801032c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8010330:	d1ed      	bne.n	801030e <__ieee754_sqrt+0x8a>
 8010332:	4674      	mov	r4, lr
 8010334:	2720      	movs	r7, #32
 8010336:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801033a:	4563      	cmp	r3, ip
 801033c:	eb01 000e 	add.w	r0, r1, lr
 8010340:	dc02      	bgt.n	8010348 <__ieee754_sqrt+0xc4>
 8010342:	d113      	bne.n	801036c <__ieee754_sqrt+0xe8>
 8010344:	4290      	cmp	r0, r2
 8010346:	d811      	bhi.n	801036c <__ieee754_sqrt+0xe8>
 8010348:	2800      	cmp	r0, #0
 801034a:	eb00 0e01 	add.w	lr, r0, r1
 801034e:	da57      	bge.n	8010400 <__ieee754_sqrt+0x17c>
 8010350:	f1be 0f00 	cmp.w	lr, #0
 8010354:	db54      	blt.n	8010400 <__ieee754_sqrt+0x17c>
 8010356:	f10c 0801 	add.w	r8, ip, #1
 801035a:	eba3 030c 	sub.w	r3, r3, ip
 801035e:	4290      	cmp	r0, r2
 8010360:	bf88      	it	hi
 8010362:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8010366:	1a12      	subs	r2, r2, r0
 8010368:	440c      	add	r4, r1
 801036a:	46c4      	mov	ip, r8
 801036c:	005b      	lsls	r3, r3, #1
 801036e:	3f01      	subs	r7, #1
 8010370:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8010374:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8010378:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801037c:	d1dd      	bne.n	801033a <__ieee754_sqrt+0xb6>
 801037e:	4313      	orrs	r3, r2
 8010380:	d01b      	beq.n	80103ba <__ieee754_sqrt+0x136>
 8010382:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8010430 <__ieee754_sqrt+0x1ac>
 8010386:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8010434 <__ieee754_sqrt+0x1b0>
 801038a:	e9da 0100 	ldrd	r0, r1, [sl]
 801038e:	e9db 2300 	ldrd	r2, r3, [fp]
 8010392:	f7ef ffa1 	bl	80002d8 <__aeabi_dsub>
 8010396:	e9da 8900 	ldrd	r8, r9, [sl]
 801039a:	4602      	mov	r2, r0
 801039c:	460b      	mov	r3, r1
 801039e:	4640      	mov	r0, r8
 80103a0:	4649      	mov	r1, r9
 80103a2:	f7f0 fbcd 	bl	8000b40 <__aeabi_dcmple>
 80103a6:	b140      	cbz	r0, 80103ba <__ieee754_sqrt+0x136>
 80103a8:	f1b4 3fff 	cmp.w	r4, #4294967295
 80103ac:	e9da 0100 	ldrd	r0, r1, [sl]
 80103b0:	e9db 2300 	ldrd	r2, r3, [fp]
 80103b4:	d126      	bne.n	8010404 <__ieee754_sqrt+0x180>
 80103b6:	3501      	adds	r5, #1
 80103b8:	463c      	mov	r4, r7
 80103ba:	106a      	asrs	r2, r5, #1
 80103bc:	0863      	lsrs	r3, r4, #1
 80103be:	07e9      	lsls	r1, r5, #31
 80103c0:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80103c4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80103c8:	bf48      	it	mi
 80103ca:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80103ce:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 80103d2:	461c      	mov	r4, r3
 80103d4:	e76d      	b.n	80102b2 <__ieee754_sqrt+0x2e>
 80103d6:	0ad3      	lsrs	r3, r2, #11
 80103d8:	3815      	subs	r0, #21
 80103da:	0552      	lsls	r2, r2, #21
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d0fa      	beq.n	80103d6 <__ieee754_sqrt+0x152>
 80103e0:	02dc      	lsls	r4, r3, #11
 80103e2:	d50a      	bpl.n	80103fa <__ieee754_sqrt+0x176>
 80103e4:	f1c1 0420 	rsb	r4, r1, #32
 80103e8:	fa22 f404 	lsr.w	r4, r2, r4
 80103ec:	1e4d      	subs	r5, r1, #1
 80103ee:	408a      	lsls	r2, r1
 80103f0:	4323      	orrs	r3, r4
 80103f2:	1b41      	subs	r1, r0, r5
 80103f4:	e772      	b.n	80102dc <__ieee754_sqrt+0x58>
 80103f6:	4608      	mov	r0, r1
 80103f8:	e7f0      	b.n	80103dc <__ieee754_sqrt+0x158>
 80103fa:	005b      	lsls	r3, r3, #1
 80103fc:	3101      	adds	r1, #1
 80103fe:	e7ef      	b.n	80103e0 <__ieee754_sqrt+0x15c>
 8010400:	46e0      	mov	r8, ip
 8010402:	e7aa      	b.n	801035a <__ieee754_sqrt+0xd6>
 8010404:	f7ef ff6a 	bl	80002dc <__adddf3>
 8010408:	e9da 8900 	ldrd	r8, r9, [sl]
 801040c:	4602      	mov	r2, r0
 801040e:	460b      	mov	r3, r1
 8010410:	4640      	mov	r0, r8
 8010412:	4649      	mov	r1, r9
 8010414:	f7f0 fb8a 	bl	8000b2c <__aeabi_dcmplt>
 8010418:	b120      	cbz	r0, 8010424 <__ieee754_sqrt+0x1a0>
 801041a:	1ca0      	adds	r0, r4, #2
 801041c:	bf08      	it	eq
 801041e:	3501      	addeq	r5, #1
 8010420:	3402      	adds	r4, #2
 8010422:	e7ca      	b.n	80103ba <__ieee754_sqrt+0x136>
 8010424:	3401      	adds	r4, #1
 8010426:	f024 0401 	bic.w	r4, r4, #1
 801042a:	e7c6      	b.n	80103ba <__ieee754_sqrt+0x136>
 801042c:	7ff00000 	.word	0x7ff00000
 8010430:	20000270 	.word	0x20000270
 8010434:	20000278 	.word	0x20000278

08010438 <_init>:
 8010438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801043a:	bf00      	nop
 801043c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801043e:	bc08      	pop	{r3}
 8010440:	469e      	mov	lr, r3
 8010442:	4770      	bx	lr

08010444 <_fini>:
 8010444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010446:	bf00      	nop
 8010448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801044a:	bc08      	pop	{r3}
 801044c:	469e      	mov	lr, r3
 801044e:	4770      	bx	lr
